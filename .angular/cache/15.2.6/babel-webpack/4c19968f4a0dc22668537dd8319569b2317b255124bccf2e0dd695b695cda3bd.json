{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthService = class AuthService {\n  constructor(http, router, cookieService) {\n    this.http = http;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.apiURL = 'https://accounts.spotify.com/authorize';\n    this.clientId = '933d3430c2e6442eac18add3a796497d'; // reemplaza con tu propio cliente ID\n    this.redirectUri = 'http://localhost:4200/disk'; // reemplaza con tu propia URI de redireccionamiento\n    this.scopes = ['user-read-private', 'user-read-email', 'user-library-read'];\n  }\n  login() {\n    const url = `${this.apiURL}?client_id=${this.clientId}&redirect_uri=${this.redirectUri}&scope=${this.scopes.join('%20')}&response_type=token`;\n    window.location.href = url;\n  }\n  clearCookies() {\n    this.cookieService.deleteAll('/', 'spotify.com');\n  }\n  logout() {\n    // elimina los tokens de acceso y actualización de la sesión actual\n    localStorage.removeItem('access_token');\n    this.clearCookies();\n    this.router.navigate(['/']);\n  }\n  isLoggedIn() {\n    // comprueba si hay tokens de acceso y actualización en la sesión actual\n  }\n  // @ts-ignore\n  getUserInfo() {\n    // obtén la información del usuario actual utilizando los tokens de acceso y actualización\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAWnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAWtBC,YAAoBC,IAAgB,EAAUC,MAAc,EAAUC,aAA4B;IAA9E,SAAI,GAAJF,IAAI;IAAsB,WAAM,GAANC,MAAM;IAAkB,kBAAa,GAAbC,aAAa;IAT3E,WAAM,GAAG,wCAAwC;IACjD,aAAQ,GAAG,kCAAkC,CAAC,CAAC;IAC/C,gBAAW,GAAG,4BAA4B,CAAC,CAAC;IAC5C,WAAM,GAAG,CACf,mBAAmB,EACnB,iBAAiB,EACjB,mBAAmB,CACpB;EAEoG;EAErGC,KAAK;IACH,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,cAAc,IAAI,CAACC,QAAQ,iBAAiB,IAAI,CAACC,WAAW,UAAU,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,KAAK,CAAC,sBAAsB;IAC7IC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGR,GAAG;EAC5B;EACAS,YAAY;IACV,IAAI,CAACX,aAAa,CAACY,SAAS,CAAC,GAAG,EAAE,aAAa,CAAC;EAClD;EAEAC,MAAM;IACJ;IACAC,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IACvC,IAAI,CAACJ,YAAY,EAAE;IACnB,IAAI,CAACZ,MAAM,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,UAAU;IACR;EAAA;EAGF;EACAC,WAAW;IACT;EAAA;CAGH;AArCYtB,WAAW,eAHvBD,UAAU,CAAC;EACVwB,UAAU,EAAE;CACb,CAAC,GACWvB,WAAW,CAqCvB;SArCYA,WAAW","names":["Injectable","AuthService","constructor","http","router","cookieService","login","url","apiURL","clientId","redirectUri","scopes","join","window","location","href","clearCookies","deleteAll","logout","localStorage","removeItem","navigate","isLoggedIn","getUserInfo","providedIn"],"sourceRoot":"","sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiURL = 'https://accounts.spotify.com/authorize';\n  private clientId = '933d3430c2e6442eac18add3a796497d'; // reemplaza con tu propio cliente ID\n  private redirectUri = 'http://localhost:4200/disk'; // reemplaza con tu propia URI de redireccionamiento\n  private scopes = [\n    'user-read-private',\n    'user-read-email',\n    'user-library-read'\n  ];\n\n  constructor(private http: HttpClient, private router: Router, private cookieService: CookieService) {}\n\n  login() {\n    const url = `${this.apiURL}?client_id=${this.clientId}&redirect_uri=${this.redirectUri}&scope=${this.scopes.join('%20')}&response_type=token`;\n    window.location.href = url;\n  }\n  clearCookies() {\n    this.cookieService.deleteAll('/', 'spotify.com');\n  }\n\n  logout() {\n    // elimina los tokens de acceso y actualización de la sesión actual\n    localStorage.removeItem('access_token');\n    this.clearCookies()\n    this.router.navigate(['/']);\n  }\n\n  isLoggedIn() {\n    // comprueba si hay tokens de acceso y actualización en la sesión actual\n  }\n\n  // @ts-ignore\n  getUserInfo(): Observable<any> {\n    // obtén la información del usuario actual utilizando los tokens de acceso y actualización\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}