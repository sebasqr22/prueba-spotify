{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Keyboard_instances, _Keyboard_client, _Keyboard_pressedKeys, _Keyboard_modifierBit, _Keyboard_keyDescriptionForString, _Mouse_client, _Mouse_keyboard, _Mouse_x, _Mouse_y, _Mouse_button, _Touchscreen_client, _Touchscreen_keyboard;\nimport { assert } from '../util/assert.js';\nimport { _keyDefinitions } from './USKeyboardLayout.js';\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport class Keyboard {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Keyboard_instances.add(this);\n    _Keyboard_client.set(this, void 0);\n    _Keyboard_pressedKeys.set(this, new Set());\n    /**\n     * @internal\n     */\n    this._modifiers = 0;\n    __classPrivateFieldSet(this, _Keyboard_client, client, \"f\");\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  down(key, options = {\n    text: undefined,\n    commands: []\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const description = __classPrivateFieldGet(_this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(_this, key);\n      const autoRepeat = __classPrivateFieldGet(_this, _Keyboard_pressedKeys, \"f\").has(description.code);\n      __classPrivateFieldGet(_this, _Keyboard_pressedKeys, \"f\").add(description.code);\n      _this._modifiers |= __classPrivateFieldGet(_this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(_this, description.key);\n      const text = options.text === undefined ? description.text : options.text;\n      yield __classPrivateFieldGet(_this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n        type: text ? 'keyDown' : 'rawKeyDown',\n        modifiers: _this._modifiers,\n        windowsVirtualKeyCode: description.keyCode,\n        code: description.code,\n        key: description.key,\n        text: text,\n        unmodifiedText: text,\n        autoRepeat,\n        location: description.location,\n        isKeypad: description.location === 3,\n        commands: options.commands\n      });\n    })();\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n  up(key) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const description = __classPrivateFieldGet(_this2, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(_this2, key);\n      _this2._modifiers &= ~__classPrivateFieldGet(_this2, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(_this2, description.key);\n      __classPrivateFieldGet(_this2, _Keyboard_pressedKeys, \"f\").delete(description.code);\n      yield __classPrivateFieldGet(_this2, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n        type: 'keyUp',\n        modifiers: _this2._modifiers,\n        key: description.key,\n        windowsVirtualKeyCode: description.keyCode,\n        code: description.code,\n        location: description.location\n      });\n    })();\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n  sendCharacter(char) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this3, _Keyboard_client, \"f\").send('Input.insertText', {\n        text: char\n      });\n    })();\n  }\n  charIsKey(char) {\n    return !!_keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n  type(text, options = {}) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const delay = options.delay || undefined;\n      for (const char of text) {\n        if (_this4.charIsKey(char)) {\n          yield _this4.press(char, {\n            delay\n          });\n        } else {\n          if (delay) {\n            yield new Promise(f => {\n              return setTimeout(f, delay);\n            });\n          }\n          yield _this4.sendCharacter(char);\n        }\n      }\n    })();\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  press(key, options = {}) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n      yield _this5.down(key, options);\n      if (delay) {\n        yield new Promise(f => {\n          return setTimeout(f, options.delay);\n        });\n      }\n      yield _this5.up(key);\n    })();\n  }\n}\n_Keyboard_client = new WeakMap(), _Keyboard_pressedKeys = new WeakMap(), _Keyboard_instances = new WeakSet(), _Keyboard_modifierBit = function _Keyboard_modifierBit(key) {\n  if (key === 'Alt') {\n    return 1;\n  }\n  if (key === 'Control') {\n    return 2;\n  }\n  if (key === 'Meta') {\n    return 4;\n  }\n  if (key === 'Shift') {\n    return 8;\n  }\n  return 0;\n}, _Keyboard_keyDescriptionForString = function _Keyboard_keyDescriptionForString(keyString) {\n  const shift = this._modifiers & 8;\n  const description = {\n    key: '',\n    keyCode: 0,\n    code: '',\n    text: '',\n    location: 0\n  };\n  const definition = _keyDefinitions[keyString];\n  assert(definition, `Unknown key: \"${keyString}\"`);\n  if (definition.key) {\n    description.key = definition.key;\n  }\n  if (shift && definition.shiftKey) {\n    description.key = definition.shiftKey;\n  }\n  if (definition.keyCode) {\n    description.keyCode = definition.keyCode;\n  }\n  if (shift && definition.shiftKeyCode) {\n    description.keyCode = definition.shiftKeyCode;\n  }\n  if (definition.code) {\n    description.code = definition.code;\n  }\n  if (definition.location) {\n    description.location = definition.location;\n  }\n  if (description.key.length === 1) {\n    description.text = description.key;\n  }\n  if (definition.text) {\n    description.text = definition.text;\n  }\n  if (shift && definition.shiftText) {\n    description.text = definition.shiftText;\n  }\n  // if any modifiers besides shift are pressed, no text should be sent\n  if (this._modifiers & ~8) {\n    description.text = '';\n  }\n  return description;\n};\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Mouse_client.set(this, void 0);\n    _Mouse_keyboard.set(this, void 0);\n    _Mouse_x.set(this, 0);\n    _Mouse_y.set(this, 0);\n    _Mouse_button.set(this, 'none');\n    __classPrivateFieldSet(this, _Mouse_client, client, \"f\");\n    __classPrivateFieldSet(this, _Mouse_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional object. If specified, the `steps` property\n   * sends intermediate `mousemove` events when set to `1` (default).\n   */\n  move(x, y, options = {}) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        steps = 1\n      } = options;\n      const fromX = __classPrivateFieldGet(_this6, _Mouse_x, \"f\"),\n        fromY = __classPrivateFieldGet(_this6, _Mouse_y, \"f\");\n      __classPrivateFieldSet(_this6, _Mouse_x, x, \"f\");\n      __classPrivateFieldSet(_this6, _Mouse_y, y, \"f\");\n      for (let i = 1; i <= steps; i++) {\n        yield __classPrivateFieldGet(_this6, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n          type: 'mouseMoved',\n          button: __classPrivateFieldGet(_this6, _Mouse_button, \"f\"),\n          x: fromX + (__classPrivateFieldGet(_this6, _Mouse_x, \"f\") - fromX) * (i / steps),\n          y: fromY + (__classPrivateFieldGet(_this6, _Mouse_y, \"f\") - fromY) * (i / steps),\n          modifiers: __classPrivateFieldGet(_this6, _Mouse_keyboard, \"f\")._modifiers\n        });\n      }\n    })();\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional `MouseOptions`.\n   */\n  click(x, y, options = {}) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n      yield _this7.move(x, y);\n      yield _this7.down(options);\n      if (delay !== null) {\n        yield new Promise(f => {\n          return setTimeout(f, delay);\n        });\n      }\n      yield _this7.up(options);\n    })();\n  }\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options - Optional `MouseOptions`.\n   */\n  down(options = {}) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        button = 'left',\n        clickCount = 1\n      } = options;\n      __classPrivateFieldSet(_this8, _Mouse_button, button, \"f\");\n      yield __classPrivateFieldGet(_this8, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mousePressed',\n        button,\n        x: __classPrivateFieldGet(_this8, _Mouse_x, \"f\"),\n        y: __classPrivateFieldGet(_this8, _Mouse_y, \"f\"),\n        modifiers: __classPrivateFieldGet(_this8, _Mouse_keyboard, \"f\")._modifiers,\n        clickCount\n      });\n    })();\n  }\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options - Optional `MouseOptions`.\n   */\n  up(options = {}) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        button = 'left',\n        clickCount = 1\n      } = options;\n      __classPrivateFieldSet(_this9, _Mouse_button, 'none', \"f\");\n      yield __classPrivateFieldGet(_this9, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mouseReleased',\n        button,\n        x: __classPrivateFieldGet(_this9, _Mouse_x, \"f\"),\n        y: __classPrivateFieldGet(_this9, _Mouse_y, \"f\"),\n        modifiers: __classPrivateFieldGet(_this9, _Mouse_keyboard, \"f\")._modifiers,\n        clickCount\n      });\n    })();\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   *\n   * ```ts\n   * await page.goto(\n   *   'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'\n   * );\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({deltaY: -100});\n   * ```\n   */\n  wheel(options = {}) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        deltaX = 0,\n        deltaY = 0\n      } = options;\n      yield __classPrivateFieldGet(_this10, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mouseWheel',\n        x: __classPrivateFieldGet(_this10, _Mouse_x, \"f\"),\n        y: __classPrivateFieldGet(_this10, _Mouse_y, \"f\"),\n        deltaX,\n        deltaY,\n        modifiers: __classPrivateFieldGet(_this10, _Mouse_keyboard, \"f\")._modifiers,\n        pointerType: 'mouse'\n      });\n    })();\n  }\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n  drag(start, target) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const promise = new Promise(resolve => {\n        __classPrivateFieldGet(_this11, _Mouse_client, \"f\").once('Input.dragIntercepted', event => {\n          return resolve(event.data);\n        });\n      });\n      yield _this11.move(start.x, start.y);\n      yield _this11.down();\n      yield _this11.move(target.x, target.y);\n      return promise;\n    })();\n  }\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   * @param data - drag data containing items and operations mask\n   */\n  dragEnter(target, data) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this12, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n        type: 'dragEnter',\n        x: target.x,\n        y: target.y,\n        modifiers: __classPrivateFieldGet(_this12, _Mouse_keyboard, \"f\")._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   * @param data - drag data containing items and operations mask\n   */\n  dragOver(target, data) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this13, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n        type: 'dragOver',\n        x: target.x,\n        y: target.y,\n        modifiers: __classPrivateFieldGet(_this13, _Mouse_keyboard, \"f\")._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   */\n  drop(target, data) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this14, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n        type: 'drop',\n        x: target.x,\n        y: target.y,\n        modifiers: __classPrivateFieldGet(_this14, _Mouse_keyboard, \"f\")._modifiers,\n        data\n      });\n    })();\n  }\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param start - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n  dragAndDrop(start, target, options = {}) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        delay = null\n      } = options;\n      const data = yield _this15.drag(start, target);\n      yield _this15.dragEnter(target, data);\n      yield _this15.dragOver(target, data);\n      if (delay) {\n        yield new Promise(resolve => {\n          return setTimeout(resolve, delay);\n        });\n      }\n      yield _this15.drop(target, data);\n      yield _this15.up();\n    })();\n  }\n}\n_Mouse_client = new WeakMap(), _Mouse_keyboard = new WeakMap(), _Mouse_x = new WeakMap(), _Mouse_y = new WeakMap(), _Mouse_button = new WeakMap();\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport class Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Touchscreen_client.set(this, void 0);\n    _Touchscreen_keyboard.set(this, void 0);\n    __classPrivateFieldSet(this, _Touchscreen_client, client, \"f\");\n    __classPrivateFieldSet(this, _Touchscreen_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  tap(x, y) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      yield _this16.touchStart(x, y);\n      yield _this16.touchEnd();\n    })();\n  }\n  /**\n   * Dispatches a `touchstart` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  touchStart(x, y) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const touchPoints = [{\n        x: Math.round(x),\n        y: Math.round(y)\n      }];\n      yield __classPrivateFieldGet(_this17, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n        type: 'touchStart',\n        touchPoints,\n        modifiers: __classPrivateFieldGet(_this17, _Touchscreen_keyboard, \"f\")._modifiers\n      });\n    })();\n  }\n  /**\n   * Dispatches a `touchMove` event.\n   * @param x - Horizontal position of the move.\n   * @param y - Vertical position of the move.\n   */\n  touchMove(x, y) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const movePoints = [{\n        x: Math.round(x),\n        y: Math.round(y)\n      }];\n      yield __classPrivateFieldGet(_this18, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n        type: 'touchMove',\n        touchPoints: movePoints,\n        modifiers: __classPrivateFieldGet(_this18, _Touchscreen_keyboard, \"f\")._modifiers\n      });\n    })();\n  }\n  /**\n   * Dispatches a `touchend` event.\n   */\n  touchEnd() {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this19, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n        type: 'touchEnd',\n        touchPoints: [],\n        modifiers: __classPrivateFieldGet(_this19, _Touchscreen_keyboard, \"f\")._modifiers\n      });\n    })();\n  }\n}\n_Touchscreen_client = new WeakMap(), _Touchscreen_keyboard = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Keyboard_instances","_Keyboard_client","_Keyboard_pressedKeys","_Keyboard_modifierBit","_Keyboard_keyDescriptionForString","_Mouse_client","_Mouse_keyboard","_Mouse_x","_Mouse_y","_Mouse_button","_Touchscreen_client","_Touchscreen_keyboard","assert","_keyDefinitions","Keyboard","constructor","client","add","Set","_modifiers","down","key","options","text","undefined","commands","description","autoRepeat","code","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","up","delete","sendCharacter","char","charIsKey","delay","press","Promise","setTimeout","WeakMap","WeakSet","keyString","shift","definition","shiftKey","shiftKeyCode","length","shiftText","Mouse","keyboard","move","x","y","steps","fromX","fromY","i","button","click","clickCount","wheel","deltaX","deltaY","pointerType","drag","start","target","promise","resolve","once","event","data","dragEnter","dragOver","drop","dragAndDrop","Touchscreen","tap","touchStart","touchEnd","touchPoints","Math","round","touchMove","movePoints"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Input.js"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Keyboard_instances, _Keyboard_client, _Keyboard_pressedKeys, _Keyboard_modifierBit, _Keyboard_keyDescriptionForString, _Mouse_client, _Mouse_keyboard, _Mouse_x, _Mouse_y, _Mouse_button, _Touchscreen_client, _Touchscreen_keyboard;\nimport { assert } from '../util/assert.js';\nimport { _keyDefinitions } from './USKeyboardLayout.js';\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport class Keyboard {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        _Keyboard_instances.add(this);\n        _Keyboard_client.set(this, void 0);\n        _Keyboard_pressedKeys.set(this, new Set());\n        /**\n         * @internal\n         */\n        this._modifiers = 0;\n        __classPrivateFieldSet(this, _Keyboard_client, client, \"f\");\n    }\n    /**\n     * Dispatches a `keydown` event.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n     * subsequent key presses will be sent with that modifier active.\n     * To release the modifier key, use {@link Keyboard.up}.\n     *\n     * After the key is pressed once, subsequent calls to\n     * {@link Keyboard.down} will have\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n     * set to true. To release the key, use {@link Keyboard.up}.\n     *\n     * Modifier keys DO influence {@link Keyboard.down}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text. Accepts commands which, if specified,\n     * is the commands of keyboard shortcuts,\n     * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n     */\n    async down(key, options = {\n        text: undefined,\n        commands: [],\n    }) {\n        const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n        const autoRepeat = __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").has(description.code);\n        __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").add(description.code);\n        this._modifiers |= __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n        const text = options.text === undefined ? description.text : options.text;\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n            type: text ? 'keyDown' : 'rawKeyDown',\n            modifiers: this._modifiers,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            key: description.key,\n            text: text,\n            unmodifiedText: text,\n            autoRepeat,\n            location: description.location,\n            isKeypad: description.location === 3,\n            commands: options.commands,\n        });\n    }\n    /**\n     * Dispatches a `keyup` event.\n     *\n     * @param key - Name of key to release, such as `ArrowLeft`.\n     * See {@link KeyInput | KeyInput}\n     * for a list of all key names.\n     */\n    async up(key) {\n        const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n        this._modifiers &= ~__classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n        __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").delete(description.code);\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n            type: 'keyUp',\n            modifiers: this._modifiers,\n            key: description.key,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            location: description.location,\n        });\n    }\n    /**\n     * Dispatches a `keypress` and `input` event.\n     * This does not send a `keydown` or `keyup` event.\n     *\n     * @remarks\n     * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     *\n     * ```ts\n     * page.keyboard.sendCharacter('嗨');\n     * ```\n     *\n     * @param char - Character to send into the page.\n     */\n    async sendCharacter(char) {\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.insertText', { text: char });\n    }\n    charIsKey(char) {\n        return !!_keyDefinitions[char];\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`,\n     * and `keyup` event for each character in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link Keyboard.press}.\n     *\n     * Modifier keys DO NOT effect `keyboard.type`.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     *\n     * ```ts\n     * await page.keyboard.type('Hello'); // Types instantly\n     * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param text - A text to type into a focused element.\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async type(text, options = {}) {\n        const delay = options.delay || undefined;\n        for (const char of text) {\n            if (this.charIsKey(char)) {\n                await this.press(char, { delay });\n            }\n            else {\n                if (delay) {\n                    await new Promise(f => {\n                        return setTimeout(f, delay);\n                    });\n                }\n                await this.sendCharacter(char);\n            }\n        }\n    }\n    /**\n     * Shortcut for {@link Keyboard.down}\n     * and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * Modifier keys DO effect {@link Keyboard.press}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0. Accepts commands which, if specified,\n     * is the commands of keyboard shortcuts,\n     * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n     */\n    async press(key, options = {}) {\n        const { delay = null } = options;\n        await this.down(key, options);\n        if (delay) {\n            await new Promise(f => {\n                return setTimeout(f, options.delay);\n            });\n        }\n        await this.up(key);\n    }\n}\n_Keyboard_client = new WeakMap(), _Keyboard_pressedKeys = new WeakMap(), _Keyboard_instances = new WeakSet(), _Keyboard_modifierBit = function _Keyboard_modifierBit(key) {\n    if (key === 'Alt') {\n        return 1;\n    }\n    if (key === 'Control') {\n        return 2;\n    }\n    if (key === 'Meta') {\n        return 4;\n    }\n    if (key === 'Shift') {\n        return 8;\n    }\n    return 0;\n}, _Keyboard_keyDescriptionForString = function _Keyboard_keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n        key: '',\n        keyCode: 0,\n        code: '',\n        text: '',\n        location: 0,\n    };\n    const definition = _keyDefinitions[keyString];\n    assert(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) {\n        description.key = definition.key;\n    }\n    if (shift && definition.shiftKey) {\n        description.key = definition.shiftKey;\n    }\n    if (definition.keyCode) {\n        description.keyCode = definition.keyCode;\n    }\n    if (shift && definition.shiftKeyCode) {\n        description.keyCode = definition.shiftKeyCode;\n    }\n    if (definition.code) {\n        description.code = definition.code;\n    }\n    if (definition.location) {\n        description.location = definition.location;\n    }\n    if (description.key.length === 1) {\n        description.text = description.key;\n    }\n    if (definition.text) {\n        description.text = definition.text;\n    }\n    if (shift && definition.shiftText) {\n        description.text = definition.shiftText;\n    }\n    // if any modifiers besides shift are pressed, no text should be sent\n    if (this._modifiers & ~8) {\n        description.text = '';\n    }\n    return description;\n};\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        _Mouse_client.set(this, void 0);\n        _Mouse_keyboard.set(this, void 0);\n        _Mouse_x.set(this, 0);\n        _Mouse_y.set(this, 0);\n        _Mouse_button.set(this, 'none');\n        __classPrivateFieldSet(this, _Mouse_client, client, \"f\");\n        __classPrivateFieldSet(this, _Mouse_keyboard, keyboard, \"f\");\n    }\n    /**\n     * Dispatches a `mousemove` event.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional object. If specified, the `steps` property\n     * sends intermediate `mousemove` events when set to `1` (default).\n     */\n    async move(x, y, options = {}) {\n        const { steps = 1 } = options;\n        const fromX = __classPrivateFieldGet(this, _Mouse_x, \"f\"), fromY = __classPrivateFieldGet(this, _Mouse_y, \"f\");\n        __classPrivateFieldSet(this, _Mouse_x, x, \"f\");\n        __classPrivateFieldSet(this, _Mouse_y, y, \"f\");\n        for (let i = 1; i <= steps; i++) {\n            await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n                type: 'mouseMoved',\n                button: __classPrivateFieldGet(this, _Mouse_button, \"f\"),\n                x: fromX + (__classPrivateFieldGet(this, _Mouse_x, \"f\") - fromX) * (i / steps),\n                y: fromY + (__classPrivateFieldGet(this, _Mouse_y, \"f\") - fromY) * (i / steps),\n                modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            });\n        }\n    }\n    /**\n     * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional `MouseOptions`.\n     */\n    async click(x, y, options = {}) {\n        const { delay = null } = options;\n        await this.move(x, y);\n        await this.down(options);\n        if (delay !== null) {\n            await new Promise(f => {\n                return setTimeout(f, delay);\n            });\n        }\n        await this.up(options);\n    }\n    /**\n     * Dispatches a `mousedown` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async down(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        __classPrivateFieldSet(this, _Mouse_button, button, \"f\");\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mousePressed',\n            button,\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mouseup` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async up(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        __classPrivateFieldSet(this, _Mouse_button, 'none', \"f\");\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mouseReleased',\n            button,\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mousewheel` event.\n     * @param options - Optional: `MouseWheelOptions`.\n     *\n     * @example\n     * An example of zooming into an element:\n     *\n     * ```ts\n     * await page.goto(\n     *   'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'\n     * );\n     *\n     * const elem = await page.$('div');\n     * const boundingBox = await elem.boundingBox();\n     * await page.mouse.move(\n     *   boundingBox.x + boundingBox.width / 2,\n     *   boundingBox.y + boundingBox.height / 2\n     * );\n     *\n     * await page.mouse.wheel({deltaY: -100});\n     * ```\n     */\n    async wheel(options = {}) {\n        const { deltaX = 0, deltaY = 0 } = options;\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mouseWheel',\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            deltaX,\n            deltaY,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            pointerType: 'mouse',\n        });\n    }\n    /**\n     * Dispatches a `drag` event.\n     * @param start - starting point for drag\n     * @param target - point to drag to\n     */\n    async drag(start, target) {\n        const promise = new Promise(resolve => {\n            __classPrivateFieldGet(this, _Mouse_client, \"f\").once('Input.dragIntercepted', event => {\n                return resolve(event.data);\n            });\n        });\n        await this.move(start.x, start.y);\n        await this.down();\n        await this.move(target.x, target.y);\n        return promise;\n    }\n    /**\n     * Dispatches a `dragenter` event.\n     * @param target - point for emitting `dragenter` event\n     * @param data - drag data containing items and operations mask\n     */\n    async dragEnter(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'dragEnter',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Dispatches a `dragover` event.\n     * @param target - point for emitting `dragover` event\n     * @param data - drag data containing items and operations mask\n     */\n    async dragOver(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'dragOver',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a dragenter, dragover, and drop in sequence.\n     * @param target - point to drop on\n     * @param data - drag data containing items and operations mask\n     */\n    async drop(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'drop',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a drag, dragenter, dragover, and drop in sequence.\n     * @param start - point to drag from\n     * @param target - point to drop on\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n     * Defaults to 0.\n     */\n    async dragAndDrop(start, target, options = {}) {\n        const { delay = null } = options;\n        const data = await this.drag(start, target);\n        await this.dragEnter(target, data);\n        await this.dragOver(target, data);\n        if (delay) {\n            await new Promise(resolve => {\n                return setTimeout(resolve, delay);\n            });\n        }\n        await this.drop(target, data);\n        await this.up();\n    }\n}\n_Mouse_client = new WeakMap(), _Mouse_keyboard = new WeakMap(), _Mouse_x = new WeakMap(), _Mouse_y = new WeakMap(), _Mouse_button = new WeakMap();\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport class Touchscreen {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        _Touchscreen_client.set(this, void 0);\n        _Touchscreen_keyboard.set(this, void 0);\n        __classPrivateFieldSet(this, _Touchscreen_client, client, \"f\");\n        __classPrivateFieldSet(this, _Touchscreen_keyboard, keyboard, \"f\");\n    }\n    /**\n     * Dispatches a `touchstart` and `touchend` event.\n     * @param x - Horizontal position of the tap.\n     * @param y - Vertical position of the tap.\n     */\n    async tap(x, y) {\n        await this.touchStart(x, y);\n        await this.touchEnd();\n    }\n    /**\n     * Dispatches a `touchstart` event.\n     * @param x - Horizontal position of the tap.\n     * @param y - Vertical position of the tap.\n     */\n    async touchStart(x, y) {\n        const touchPoints = [{ x: Math.round(x), y: Math.round(y) }];\n        await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n            type: 'touchStart',\n            touchPoints,\n            modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers,\n        });\n    }\n    /**\n     * Dispatches a `touchMove` event.\n     * @param x - Horizontal position of the move.\n     * @param y - Vertical position of the move.\n     */\n    async touchMove(x, y) {\n        const movePoints = [{ x: Math.round(x), y: Math.round(y) }];\n        await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n            type: 'touchMove',\n            touchPoints: movePoints,\n            modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers,\n        });\n    }\n    /**\n     * Dispatches a `touchend` event.\n     */\n    async touchEnd() {\n        await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n            type: 'touchEnd',\n            touchPoints: [],\n            modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers,\n        });\n    }\n}\n_Touchscreen_client = new WeakMap(), _Touchscreen_keyboard = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}