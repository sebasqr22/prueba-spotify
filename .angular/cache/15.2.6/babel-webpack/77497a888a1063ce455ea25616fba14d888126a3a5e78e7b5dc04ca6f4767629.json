{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _CDPBrowser_instances, _CDPBrowser_ignoreHTTPSErrors, _CDPBrowser_defaultViewport, _CDPBrowser_process, _CDPBrowser_connection, _CDPBrowser_closeCallback, _CDPBrowser_targetFilterCallback, _CDPBrowser_isPageTargetCallback, _CDPBrowser_defaultContext, _CDPBrowser_contexts, _CDPBrowser_screenshotTaskQueue, _CDPBrowser_targetManager, _CDPBrowser_emitDisconnected, _CDPBrowser_setIsPageTargetCallback, _CDPBrowser_createTarget, _CDPBrowser_onAttachedToTarget, _CDPBrowser_onDetachedFromTarget, _CDPBrowser_onTargetChanged, _CDPBrowser_onTargetDiscovered, _CDPBrowser_getVersion, _CDPBrowserContext_connection, _CDPBrowserContext_browser, _CDPBrowserContext_id;\nimport { Browser as BrowserBase, WEB_PERMISSION_TO_PROTOCOL_PERMISSION } from '../api/Browser.js';\nimport { BrowserContext } from '../api/BrowserContext.js';\nimport { assert } from '../util/assert.js';\nimport { ChromeTargetManager } from './ChromeTargetManager.js';\nimport { ConnectionEmittedEvents } from './Connection.js';\nimport { FirefoxTargetManager } from './FirefoxTargetManager.js';\nimport { Target } from './Target.js';\nimport { TaskQueue } from './TaskQueue.js';\nimport { waitWithTimeout } from './util.js';\n/**\n * @internal\n */\nexport class CDPBrowser extends BrowserBase {\n  /**\n   * @internal\n   */\n  static _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    return _asyncToGenerator(function* () {\n      const browser = new CDPBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n      yield browser._attach();\n      return browser;\n    })();\n  }\n  /**\n   * @internal\n   */\n  get _targets() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets();\n  }\n  /**\n   * @internal\n   */\n  constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    var _this;\n    super();\n    _this = this;\n    _CDPBrowser_instances.add(this);\n    _CDPBrowser_ignoreHTTPSErrors.set(this, void 0);\n    _CDPBrowser_defaultViewport.set(this, void 0);\n    _CDPBrowser_process.set(this, void 0);\n    _CDPBrowser_connection.set(this, void 0);\n    _CDPBrowser_closeCallback.set(this, void 0);\n    _CDPBrowser_targetFilterCallback.set(this, void 0);\n    _CDPBrowser_isPageTargetCallback.set(this, void 0);\n    _CDPBrowser_defaultContext.set(this, void 0);\n    _CDPBrowser_contexts.set(this, void 0);\n    _CDPBrowser_screenshotTaskQueue.set(this, void 0);\n    _CDPBrowser_targetManager.set(this, void 0);\n    _CDPBrowser_emitDisconnected.set(this, () => {\n      this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n    });\n\n    _CDPBrowser_createTarget.set(this, (targetInfo, session) => {\n      var _a;\n      const {\n        browserContextId\n      } = targetInfo;\n      const context = browserContextId && __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").has(browserContextId) ? __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").get(browserContextId) : __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n      if (!context) {\n        throw new Error('Missing browser context');\n      }\n      return new Target(targetInfo, session, context, __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\"), isAutoAttachEmulated => {\n        return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._createSession(targetInfo, isAutoAttachEmulated);\n      }, __classPrivateFieldGet(this, _CDPBrowser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _CDPBrowser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _CDPBrowser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\"));\n    });\n    _CDPBrowser_onAttachedToTarget.set(this, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (target) {\n        if (yield target._initializedPromise) {\n          _this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n          target.browserContext().emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _CDPBrowser_onDetachedFromTarget.set(this, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (target) {\n        target._initializedCallback(false);\n        target._closedCallback();\n        if (yield target._initializedPromise) {\n          _this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n          target.browserContext().emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n        }\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _CDPBrowser_onTargetChanged.set(this, ({\n      target,\n      targetInfo\n    }) => {\n      const previousURL = target.url();\n      const wasInitialized = target._isInitialized;\n      target._targetInfoChanged(targetInfo);\n      if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n        target.browserContext().emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n      }\n    });\n    _CDPBrowser_onTargetDiscovered.set(this, targetInfo => {\n      this.emit('targetdiscovered', targetInfo);\n    });\n    product = product || 'chrome';\n    __classPrivateFieldSet(this, _CDPBrowser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_defaultViewport, defaultViewport, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_process, process, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_screenshotTaskQueue, new TaskQueue(), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_closeCallback, closeCallback || function () {}, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_targetFilterCallback, targetFilterCallback || (() => {\n      return true;\n    }), \"f\");\n    __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n    if (product === 'firefox') {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new FirefoxTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new ChromeTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    }\n    __classPrivateFieldSet(this, _CDPBrowser_defaultContext, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_contexts, new Map(), \"f\");\n    for (const contextId of contextIds) {\n      __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(contextId, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, contextId));\n    }\n  }\n  /**\n   * @internal\n   */\n  _attach() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      __classPrivateFieldGet(_this2, _CDPBrowser_connection, \"f\").on(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(_this2, _CDPBrowser_emitDisconnected, \"f\"));\n      __classPrivateFieldGet(_this2, _CDPBrowser_targetManager, \"f\").on(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(_this2, _CDPBrowser_onAttachedToTarget, \"f\"));\n      __classPrivateFieldGet(_this2, _CDPBrowser_targetManager, \"f\").on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(_this2, _CDPBrowser_onDetachedFromTarget, \"f\"));\n      __classPrivateFieldGet(_this2, _CDPBrowser_targetManager, \"f\").on(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(_this2, _CDPBrowser_onTargetChanged, \"f\"));\n      __classPrivateFieldGet(_this2, _CDPBrowser_targetManager, \"f\").on(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(_this2, _CDPBrowser_onTargetDiscovered, \"f\"));\n      yield __classPrivateFieldGet(_this2, _CDPBrowser_targetManager, \"f\").initialize();\n    })();\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").off(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n  }\n  /**\n   * The spawned browser process. Returns `null` if the browser instance was created with\n   * {@link Puppeteer.connect}.\n   */\n  process() {\n    var _a;\n    return (_a = __classPrivateFieldGet(this, _CDPBrowser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * @internal\n   */\n  _targetManager() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _getIsPageTargetCallback() {\n    return __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\");\n  }\n  /**\n   * Creates a new incognito browser context. This won't share cookies/cache with other\n   * browser contexts.\n   *\n   * @example\n   *\n   * ```ts\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   // Create a new incognito browser context.\n   *   const context = await browser.createIncognitoBrowserContext();\n   *   // Create a new page in a pristine context.\n   *   const page = await context.newPage();\n   *   // Do stuff\n   *   await page.goto('https://example.com');\n   * })();\n   * ```\n   */\n  createIncognitoBrowserContext(options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        proxyServer,\n        proxyBypassList\n      } = options;\n      const {\n        browserContextId\n      } = yield __classPrivateFieldGet(_this3, _CDPBrowser_connection, \"f\").send('Target.createBrowserContext', {\n        proxyServer,\n        proxyBypassList: proxyBypassList && proxyBypassList.join(',')\n      });\n      const context = new CDPBrowserContext(__classPrivateFieldGet(_this3, _CDPBrowser_connection, \"f\"), _this3, browserContextId);\n      __classPrivateFieldGet(_this3, _CDPBrowser_contexts, \"f\").set(browserContextId, context);\n      return context;\n    })();\n  }\n  /**\n   * Returns an array of all open browser contexts. In a newly created browser, this will\n   * return a single instance of {@link BrowserContext}.\n   */\n  browserContexts() {\n    return [__classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").values())];\n  }\n  /**\n   * Returns the default browser context. The default browser context cannot be closed.\n   */\n  defaultBrowserContext() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _disposeContext(contextId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!contextId) {\n        return;\n      }\n      yield __classPrivateFieldGet(_this4, _CDPBrowser_connection, \"f\").send('Target.disposeBrowserContext', {\n        browserContextId: contextId\n      });\n      __classPrivateFieldGet(_this4, _CDPBrowser_contexts, \"f\").delete(contextId);\n    })();\n  }\n  /**\n   * The browser websocket endpoint which can be used as an argument to\n   * {@link Puppeteer.connect}.\n   *\n   * @returns The Browser websocket url.\n   *\n   * @remarks\n   *\n   * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n   *\n   * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n   * Learn more about the\n   * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n   * the {@link\n   * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n   * | browser endpoint}.\n   */\n  wsEndpoint() {\n    return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").url();\n  }\n  /**\n   * Promise which resolves to a new {@link Page} object. The Page is created in\n   * a default browser context.\n   */\n  newPage() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return __classPrivateFieldGet(_this5, _CDPBrowser_defaultContext, \"f\").newPage();\n    })();\n  }\n  /**\n   * @internal\n   */\n  _createPageInContext(contextId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        targetId\n      } = yield __classPrivateFieldGet(_this6, _CDPBrowser_connection, \"f\").send('Target.createTarget', {\n        url: 'about:blank',\n        browserContextId: contextId || undefined\n      });\n      const target = __classPrivateFieldGet(_this6, _CDPBrowser_targetManager, \"f\").getAvailableTargets().get(targetId);\n      if (!target) {\n        throw new Error(`Missing target for page (id = ${targetId})`);\n      }\n      const initialized = yield target._initializedPromise;\n      if (!initialized) {\n        throw new Error(`Failed to create target for page (id = ${targetId})`);\n      }\n      const page = yield target.page();\n      if (!page) {\n        throw new Error(`Failed to create a page for context (id = ${contextId})`);\n      }\n      return page;\n    })();\n  }\n  /**\n   * All active targets inside the Browser. In case of multiple browser contexts, returns\n   * an array with all the targets in all browser contexts.\n   */\n  targets() {\n    return Array.from(__classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().values()).filter(target => {\n      return target._isInitialized;\n    });\n  }\n  /**\n   * The target associated with the browser.\n   */\n  target() {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n  /**\n   * Searches for a target in all browser contexts.\n   *\n   * @param predicate - A function to be run for every target.\n   * @returns The first target found that matches the `predicate` function.\n   *\n   * @example\n   *\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browser.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  waitForTarget(predicate, options = {}) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        timeout = 30000\n      } = options;\n      let resolve;\n      let isResolved = false;\n      const targetPromise = new Promise(x => {\n        return resolve = x;\n      });\n      _this7.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n      _this7.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n      try {\n        _this7.targets().forEach(check);\n        if (!timeout) {\n          return yield targetPromise;\n        }\n        return yield waitWithTimeout(targetPromise, 'target', timeout);\n      } finally {\n        _this7.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n        _this7.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n      }\n      function check(_x3) {\n        return _check.apply(this, arguments);\n      }\n      function _check() {\n        _check = _asyncToGenerator(function* (target) {\n          if ((yield predicate(target)) && !isResolved) {\n            isResolved = true;\n            resolve(target);\n          }\n        });\n        return _check.apply(this, arguments);\n      }\n    })();\n  }\n  /**\n   * An array of all open pages inside the Browser.\n   *\n   * @remarks\n   *\n   * In case of multiple browser contexts, returns an array with all the pages in all\n   * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n   * here. You can find them using {@link Target.page}.\n   */\n  pages() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const contextPages = yield Promise.all(_this8.browserContexts().map(context => {\n        return context.pages();\n      }));\n      // Flatten array.\n      return contextPages.reduce((acc, x) => {\n        return acc.concat(x);\n      }, []);\n    })();\n  }\n  /**\n   * A string representing the browser name and version.\n   *\n   * @remarks\n   *\n   * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n   * non-headless, this is similar to `Chrome/61.0.3153.0`.\n   *\n   * The format of browser.version() might change with future releases of Chromium.\n   */\n  version() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const version = yield __classPrivateFieldGet(_this9, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(_this9);\n      return version.product;\n    })();\n  }\n  /**\n   * The browser's original user agent. Pages can override the browser user agent with\n   * {@link Page.setUserAgent}.\n   */\n  userAgent() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const version = yield __classPrivateFieldGet(_this10, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(_this10);\n      return version.userAgent;\n    })();\n  }\n  /**\n   * Closes Chromium and all of its pages (if any were opened). The\n   * {@link CDPBrowser} object itself is considered to be disposed and cannot be\n   * used anymore.\n   */\n  close() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this11, _CDPBrowser_closeCallback, \"f\").call(null);\n      _this11.disconnect();\n    })();\n  }\n  /**\n   * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n   * After calling `disconnect`, the {@link CDPBrowser} object is considered disposed and\n   * cannot be used anymore.\n   */\n  disconnect() {\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").dispose();\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").dispose();\n    this._detach();\n  }\n  /**\n   * Indicates that the browser is connected.\n   */\n  isConnected() {\n    return !__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._closed;\n  }\n}\n_CDPBrowser_ignoreHTTPSErrors = new WeakMap(), _CDPBrowser_defaultViewport = new WeakMap(), _CDPBrowser_process = new WeakMap(), _CDPBrowser_connection = new WeakMap(), _CDPBrowser_closeCallback = new WeakMap(), _CDPBrowser_targetFilterCallback = new WeakMap(), _CDPBrowser_isPageTargetCallback = new WeakMap(), _CDPBrowser_defaultContext = new WeakMap(), _CDPBrowser_contexts = new WeakMap(), _CDPBrowser_screenshotTaskQueue = new WeakMap(), _CDPBrowser_targetManager = new WeakMap(), _CDPBrowser_emitDisconnected = new WeakMap(), _CDPBrowser_createTarget = new WeakMap(), _CDPBrowser_onAttachedToTarget = new WeakMap(), _CDPBrowser_onDetachedFromTarget = new WeakMap(), _CDPBrowser_onTargetChanged = new WeakMap(), _CDPBrowser_onTargetDiscovered = new WeakMap(), _CDPBrowser_instances = new WeakSet(), _CDPBrowser_setIsPageTargetCallback = function _CDPBrowser_setIsPageTargetCallback(isPageTargetCallback) {\n  __classPrivateFieldSet(this, _CDPBrowser_isPageTargetCallback, isPageTargetCallback || (target => {\n    return target.type === 'page' || target.type === 'background_page' || target.type === 'webview';\n  }), \"f\");\n}, _CDPBrowser_getVersion = function _CDPBrowser_getVersion() {\n  return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * @internal\n */\nexport class CDPBrowserContext extends BrowserContext {\n  /**\n   * @internal\n   */\n  constructor(connection, browser, contextId) {\n    super();\n    _CDPBrowserContext_connection.set(this, void 0);\n    _CDPBrowserContext_browser.set(this, void 0);\n    _CDPBrowserContext_id.set(this, void 0);\n    __classPrivateFieldSet(this, _CDPBrowserContext_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_browser, browser, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_id, contextId, \"f\");\n  }\n  get id() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  /**\n   * This searches for a target in this specific browser context.\n   *\n   * @example\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   *\n   * @param predicate - A function to be run for every target\n   * @param options - An object of options. Accepts a timeout,\n   * which is the maximum wait time in milliseconds.\n   * Pass `0` to disable the timeout. Defaults to 30 seconds.\n   * @returns Promise which resolves to the first target found\n   * that matches the `predicate` function.\n   */\n  waitForTarget(predicate, options = {}) {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  pages() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const pages = yield Promise.all(_this12.targets().filter(target => {\n        var _a;\n        return target.type() === 'page' || target.type() === 'other' && ((_a = __classPrivateFieldGet(_this12, _CDPBrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()));\n      }).map(target => {\n        return target.page();\n      }));\n      return pages.filter(page => {\n        return !!page;\n      });\n    })();\n  }\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito() {\n    return !!__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n   * @param permissions - An array of permissions to grant.\n   * All permissions that are not listed here will be automatically denied.\n   */\n  overridePermissions(origin, permissions) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const protocolPermissions = permissions.map(permission => {\n        const protocolPermission = WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n        if (!protocolPermission) {\n          throw new Error('Unknown permission: ' + permission);\n        }\n        return protocolPermission;\n      });\n      yield __classPrivateFieldGet(_this13, _CDPBrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n        origin,\n        browserContextId: __classPrivateFieldGet(_this13, _CDPBrowserContext_id, \"f\") || undefined,\n        permissions: protocolPermissions\n      });\n    })();\n  }\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  clearPermissionOverrides() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this14, _CDPBrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n        browserContextId: __classPrivateFieldGet(_this14, _CDPBrowserContext_id, \"f\") || undefined\n      });\n    })();\n  }\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\");\n  }\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  close() {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      assert(__classPrivateFieldGet(_this15, _CDPBrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n      yield __classPrivateFieldGet(_this15, _CDPBrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(_this15, _CDPBrowserContext_id, \"f\"));\n    })();\n  }\n}\n_CDPBrowserContext_connection = new WeakMap(), _CDPBrowserContext_browser = new WeakMap(), _CDPBrowserContext_id = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_CDPBrowser_instances","_CDPBrowser_ignoreHTTPSErrors","_CDPBrowser_defaultViewport","_CDPBrowser_process","_CDPBrowser_connection","_CDPBrowser_closeCallback","_CDPBrowser_targetFilterCallback","_CDPBrowser_isPageTargetCallback","_CDPBrowser_defaultContext","_CDPBrowser_contexts","_CDPBrowser_screenshotTaskQueue","_CDPBrowser_targetManager","_CDPBrowser_emitDisconnected","_CDPBrowser_setIsPageTargetCallback","_CDPBrowser_createTarget","_CDPBrowser_onAttachedToTarget","_CDPBrowser_onDetachedFromTarget","_CDPBrowser_onTargetChanged","_CDPBrowser_onTargetDiscovered","_CDPBrowser_getVersion","_CDPBrowserContext_connection","_CDPBrowserContext_browser","_CDPBrowserContext_id","Browser","BrowserBase","WEB_PERMISSION_TO_PROTOCOL_PERMISSION","BrowserContext","assert","ChromeTargetManager","ConnectionEmittedEvents","FirefoxTargetManager","Target","TaskQueue","waitWithTimeout","CDPBrowser","_create","product","connection","contextIds","ignoreHTTPSErrors","defaultViewport","process","closeCallback","targetFilterCallback","isPageTargetCallback","browser","_attach","_targets","getAvailableTargets","constructor","add","emit","targetInfo","session","_a","browserContextId","context","Error","isAutoAttachEmulated","_createSession","target","_initializedPromise","browserContext","_initializedCallback","_closedCallback","previousURL","url","wasInitialized","_isInitialized","_targetInfoChanged","CDPBrowserContext","Map","contextId","on","Disconnected","initialize","_detach","off","_targetManager","_getIsPageTargetCallback","createIncognitoBrowserContext","options","proxyServer","proxyBypassList","send","join","browserContexts","Array","from","values","defaultBrowserContext","_disposeContext","delete","wsEndpoint","newPage","_createPageInContext","targetId","undefined","initialized","page","targets","filter","browserTarget","find","type","waitForTarget","predicate","timeout","resolve","isResolved","targetPromise","Promise","x","check","forEach","pages","contextPages","all","map","reduce","acc","concat","version","userAgent","close","disconnect","dispose","isConnected","_closed","WeakMap","WeakSet","id","_getTargetInfo","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","clearPermissionOverrides"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Browser.js"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _CDPBrowser_instances, _CDPBrowser_ignoreHTTPSErrors, _CDPBrowser_defaultViewport, _CDPBrowser_process, _CDPBrowser_connection, _CDPBrowser_closeCallback, _CDPBrowser_targetFilterCallback, _CDPBrowser_isPageTargetCallback, _CDPBrowser_defaultContext, _CDPBrowser_contexts, _CDPBrowser_screenshotTaskQueue, _CDPBrowser_targetManager, _CDPBrowser_emitDisconnected, _CDPBrowser_setIsPageTargetCallback, _CDPBrowser_createTarget, _CDPBrowser_onAttachedToTarget, _CDPBrowser_onDetachedFromTarget, _CDPBrowser_onTargetChanged, _CDPBrowser_onTargetDiscovered, _CDPBrowser_getVersion, _CDPBrowserContext_connection, _CDPBrowserContext_browser, _CDPBrowserContext_id;\nimport { Browser as BrowserBase, WEB_PERMISSION_TO_PROTOCOL_PERMISSION, } from '../api/Browser.js';\nimport { BrowserContext } from '../api/BrowserContext.js';\nimport { assert } from '../util/assert.js';\nimport { ChromeTargetManager } from './ChromeTargetManager.js';\nimport { ConnectionEmittedEvents } from './Connection.js';\nimport { FirefoxTargetManager } from './FirefoxTargetManager.js';\nimport { Target } from './Target.js';\nimport { TaskQueue } from './TaskQueue.js';\nimport { waitWithTimeout } from './util.js';\n/**\n * @internal\n */\nexport class CDPBrowser extends BrowserBase {\n    /**\n     * @internal\n     */\n    static async _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n        const browser = new CDPBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n        await browser._attach();\n        return browser;\n    }\n    /**\n     * @internal\n     */\n    get _targets() {\n        return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets();\n    }\n    /**\n     * @internal\n     */\n    constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n        super();\n        _CDPBrowser_instances.add(this);\n        _CDPBrowser_ignoreHTTPSErrors.set(this, void 0);\n        _CDPBrowser_defaultViewport.set(this, void 0);\n        _CDPBrowser_process.set(this, void 0);\n        _CDPBrowser_connection.set(this, void 0);\n        _CDPBrowser_closeCallback.set(this, void 0);\n        _CDPBrowser_targetFilterCallback.set(this, void 0);\n        _CDPBrowser_isPageTargetCallback.set(this, void 0);\n        _CDPBrowser_defaultContext.set(this, void 0);\n        _CDPBrowser_contexts.set(this, void 0);\n        _CDPBrowser_screenshotTaskQueue.set(this, void 0);\n        _CDPBrowser_targetManager.set(this, void 0);\n        _CDPBrowser_emitDisconnected.set(this, () => {\n            this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n        });\n        _CDPBrowser_createTarget.set(this, (targetInfo, session) => {\n            var _a;\n            const { browserContextId } = targetInfo;\n            const context = browserContextId && __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").has(browserContextId)\n                ? __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").get(browserContextId)\n                : __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n            if (!context) {\n                throw new Error('Missing browser context');\n            }\n            return new Target(targetInfo, session, context, __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\"), (isAutoAttachEmulated) => {\n                return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._createSession(targetInfo, isAutoAttachEmulated);\n            }, __classPrivateFieldGet(this, _CDPBrowser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _CDPBrowser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _CDPBrowser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\"));\n        });\n        _CDPBrowser_onAttachedToTarget.set(this, async (target) => {\n            if (await target._initializedPromise) {\n                this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n                target\n                    .browserContext()\n                    .emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n            }\n        });\n        _CDPBrowser_onDetachedFromTarget.set(this, async (target) => {\n            target._initializedCallback(false);\n            target._closedCallback();\n            if (await target._initializedPromise) {\n                this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n                target\n                    .browserContext()\n                    .emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n            }\n        });\n        _CDPBrowser_onTargetChanged.set(this, ({ target, targetInfo, }) => {\n            const previousURL = target.url();\n            const wasInitialized = target._isInitialized;\n            target._targetInfoChanged(targetInfo);\n            if (wasInitialized && previousURL !== target.url()) {\n                this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n                target\n                    .browserContext()\n                    .emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n            }\n        });\n        _CDPBrowser_onTargetDiscovered.set(this, (targetInfo) => {\n            this.emit('targetdiscovered', targetInfo);\n        });\n        product = product || 'chrome';\n        __classPrivateFieldSet(this, _CDPBrowser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_defaultViewport, defaultViewport, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_process, process, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_screenshotTaskQueue, new TaskQueue(), \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_closeCallback, closeCallback || function () { }, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_targetFilterCallback, targetFilterCallback ||\n            (() => {\n                return true;\n            }), \"f\");\n        __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n        if (product === 'firefox') {\n            __classPrivateFieldSet(this, _CDPBrowser_targetManager, new FirefoxTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _CDPBrowser_targetManager, new ChromeTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n        }\n        __classPrivateFieldSet(this, _CDPBrowser_defaultContext, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this), \"f\");\n        __classPrivateFieldSet(this, _CDPBrowser_contexts, new Map(), \"f\");\n        for (const contextId of contextIds) {\n            __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(contextId, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, contextId));\n        }\n    }\n    /**\n     * @internal\n     */\n    async _attach() {\n        __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").on(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n        await __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").initialize();\n    }\n    /**\n     * @internal\n     */\n    _detach() {\n        __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").off(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n    }\n    /**\n     * The spawned browser process. Returns `null` if the browser instance was created with\n     * {@link Puppeteer.connect}.\n     */\n    process() {\n        var _a;\n        return (_a = __classPrivateFieldGet(this, _CDPBrowser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * @internal\n     */\n    _targetManager() {\n        return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _getIsPageTargetCallback() {\n        return __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\");\n    }\n    /**\n     * Creates a new incognito browser context. This won't share cookies/cache with other\n     * browser contexts.\n     *\n     * @example\n     *\n     * ```ts\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   // Create a new incognito browser context.\n     *   const context = await browser.createIncognitoBrowserContext();\n     *   // Create a new page in a pristine context.\n     *   const page = await context.newPage();\n     *   // Do stuff\n     *   await page.goto('https://example.com');\n     * })();\n     * ```\n     */\n    async createIncognitoBrowserContext(options = {}) {\n        const { proxyServer, proxyBypassList } = options;\n        const { browserContextId } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createBrowserContext', {\n            proxyServer,\n            proxyBypassList: proxyBypassList && proxyBypassList.join(','),\n        });\n        const context = new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, browserContextId);\n        __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(browserContextId, context);\n        return context;\n    }\n    /**\n     * Returns an array of all open browser contexts. In a newly created browser, this will\n     * return a single instance of {@link BrowserContext}.\n     */\n    browserContexts() {\n        return [__classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").values())];\n    }\n    /**\n     * Returns the default browser context. The default browser context cannot be closed.\n     */\n    defaultBrowserContext() {\n        return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n    }\n    /**\n     * @internal\n     */\n    async _disposeContext(contextId) {\n        if (!contextId) {\n            return;\n        }\n        await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.disposeBrowserContext', {\n            browserContextId: contextId,\n        });\n        __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").delete(contextId);\n    }\n    /**\n     * The browser websocket endpoint which can be used as an argument to\n     * {@link Puppeteer.connect}.\n     *\n     * @returns The Browser websocket url.\n     *\n     * @remarks\n     *\n     * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n     *\n     * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n     * Learn more about the\n     * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n     * the {@link\n     * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n     * | browser endpoint}.\n     */\n    wsEndpoint() {\n        return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").url();\n    }\n    /**\n     * Promise which resolves to a new {@link Page} object. The Page is created in\n     * a default browser context.\n     */\n    async newPage() {\n        return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\").newPage();\n    }\n    /**\n     * @internal\n     */\n    async _createPageInContext(contextId) {\n        const { targetId } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createTarget', {\n            url: 'about:blank',\n            browserContextId: contextId || undefined,\n        });\n        const target = __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().get(targetId);\n        if (!target) {\n            throw new Error(`Missing target for page (id = ${targetId})`);\n        }\n        const initialized = await target._initializedPromise;\n        if (!initialized) {\n            throw new Error(`Failed to create target for page (id = ${targetId})`);\n        }\n        const page = await target.page();\n        if (!page) {\n            throw new Error(`Failed to create a page for context (id = ${contextId})`);\n        }\n        return page;\n    }\n    /**\n     * All active targets inside the Browser. In case of multiple browser contexts, returns\n     * an array with all the targets in all browser contexts.\n     */\n    targets() {\n        return Array.from(__classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().values()).filter(target => {\n            return target._isInitialized;\n        });\n    }\n    /**\n     * The target associated with the browser.\n     */\n    target() {\n        const browserTarget = this.targets().find(target => {\n            return target.type() === 'browser';\n        });\n        if (!browserTarget) {\n            throw new Error('Browser target is not found');\n        }\n        return browserTarget;\n    }\n    /**\n     * Searches for a target in all browser contexts.\n     *\n     * @param predicate - A function to be run for every target.\n     * @returns The first target found that matches the `predicate` function.\n     *\n     * @example\n     *\n     * An example of finding a target for a page opened via `window.open`:\n     *\n     * ```ts\n     * await page.evaluate(() => window.open('https://www.example.com/'));\n     * const newWindowTarget = await browser.waitForTarget(\n     *   target => target.url() === 'https://www.example.com/'\n     * );\n     * ```\n     */\n    async waitForTarget(predicate, options = {}) {\n        const { timeout = 30000 } = options;\n        let resolve;\n        let isResolved = false;\n        const targetPromise = new Promise(x => {\n            return (resolve = x);\n        });\n        this.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n        this.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n        try {\n            this.targets().forEach(check);\n            if (!timeout) {\n                return await targetPromise;\n            }\n            return await waitWithTimeout(targetPromise, 'target', timeout);\n        }\n        finally {\n            this.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n            this.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n        }\n        async function check(target) {\n            if ((await predicate(target)) && !isResolved) {\n                isResolved = true;\n                resolve(target);\n            }\n        }\n    }\n    /**\n     * An array of all open pages inside the Browser.\n     *\n     * @remarks\n     *\n     * In case of multiple browser contexts, returns an array with all the pages in all\n     * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n     * here. You can find them using {@link Target.page}.\n     */\n    async pages() {\n        const contextPages = await Promise.all(this.browserContexts().map(context => {\n            return context.pages();\n        }));\n        // Flatten array.\n        return contextPages.reduce((acc, x) => {\n            return acc.concat(x);\n        }, []);\n    }\n    /**\n     * A string representing the browser name and version.\n     *\n     * @remarks\n     *\n     * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n     * non-headless, this is similar to `Chrome/61.0.3153.0`.\n     *\n     * The format of browser.version() might change with future releases of Chromium.\n     */\n    async version() {\n        const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n        return version.product;\n    }\n    /**\n     * The browser's original user agent. Pages can override the browser user agent with\n     * {@link Page.setUserAgent}.\n     */\n    async userAgent() {\n        const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n        return version.userAgent;\n    }\n    /**\n     * Closes Chromium and all of its pages (if any were opened). The\n     * {@link CDPBrowser} object itself is considered to be disposed and cannot be\n     * used anymore.\n     */\n    async close() {\n        await __classPrivateFieldGet(this, _CDPBrowser_closeCallback, \"f\").call(null);\n        this.disconnect();\n    }\n    /**\n     * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n     * After calling `disconnect`, the {@link CDPBrowser} object is considered disposed and\n     * cannot be used anymore.\n     */\n    disconnect() {\n        __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").dispose();\n        __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").dispose();\n        this._detach();\n    }\n    /**\n     * Indicates that the browser is connected.\n     */\n    isConnected() {\n        return !__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._closed;\n    }\n}\n_CDPBrowser_ignoreHTTPSErrors = new WeakMap(), _CDPBrowser_defaultViewport = new WeakMap(), _CDPBrowser_process = new WeakMap(), _CDPBrowser_connection = new WeakMap(), _CDPBrowser_closeCallback = new WeakMap(), _CDPBrowser_targetFilterCallback = new WeakMap(), _CDPBrowser_isPageTargetCallback = new WeakMap(), _CDPBrowser_defaultContext = new WeakMap(), _CDPBrowser_contexts = new WeakMap(), _CDPBrowser_screenshotTaskQueue = new WeakMap(), _CDPBrowser_targetManager = new WeakMap(), _CDPBrowser_emitDisconnected = new WeakMap(), _CDPBrowser_createTarget = new WeakMap(), _CDPBrowser_onAttachedToTarget = new WeakMap(), _CDPBrowser_onDetachedFromTarget = new WeakMap(), _CDPBrowser_onTargetChanged = new WeakMap(), _CDPBrowser_onTargetDiscovered = new WeakMap(), _CDPBrowser_instances = new WeakSet(), _CDPBrowser_setIsPageTargetCallback = function _CDPBrowser_setIsPageTargetCallback(isPageTargetCallback) {\n    __classPrivateFieldSet(this, _CDPBrowser_isPageTargetCallback, isPageTargetCallback ||\n        ((target) => {\n            return (target.type === 'page' ||\n                target.type === 'background_page' ||\n                target.type === 'webview');\n        }), \"f\");\n}, _CDPBrowser_getVersion = function _CDPBrowser_getVersion() {\n    return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * @internal\n */\nexport class CDPBrowserContext extends BrowserContext {\n    /**\n     * @internal\n     */\n    constructor(connection, browser, contextId) {\n        super();\n        _CDPBrowserContext_connection.set(this, void 0);\n        _CDPBrowserContext_browser.set(this, void 0);\n        _CDPBrowserContext_id.set(this, void 0);\n        __classPrivateFieldSet(this, _CDPBrowserContext_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowserContext_browser, browser, \"f\");\n        __classPrivateFieldSet(this, _CDPBrowserContext_id, contextId, \"f\");\n    }\n    get id() {\n        return __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n    }\n    /**\n     * An array of all active targets inside the browser context.\n     */\n    targets() {\n        return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").targets().filter(target => {\n            return target.browserContext() === this;\n        });\n    }\n    /**\n     * This searches for a target in this specific browser context.\n     *\n     * @example\n     * An example of finding a target for a page opened via `window.open`:\n     *\n     * ```ts\n     * await page.evaluate(() => window.open('https://www.example.com/'));\n     * const newWindowTarget = await browserContext.waitForTarget(\n     *   target => target.url() === 'https://www.example.com/'\n     * );\n     * ```\n     *\n     * @param predicate - A function to be run for every target\n     * @param options - An object of options. Accepts a timeout,\n     * which is the maximum wait time in milliseconds.\n     * Pass `0` to disable the timeout. Defaults to 30 seconds.\n     * @returns Promise which resolves to the first target found\n     * that matches the `predicate` function.\n     */\n    waitForTarget(predicate, options = {}) {\n        return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").waitForTarget(target => {\n            return target.browserContext() === this && predicate(target);\n        }, options);\n    }\n    /**\n     * An array of all pages inside the browser context.\n     *\n     * @returns Promise which resolves to an array of all open pages.\n     * Non visible pages, such as `\"background_page\"`, will not be listed here.\n     * You can find them using {@link Target.page | the target page}.\n     */\n    async pages() {\n        const pages = await Promise.all(this.targets()\n            .filter(target => {\n            var _a;\n            return (target.type() === 'page' ||\n                (target.type() === 'other' &&\n                    ((_a = __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()))));\n        })\n            .map(target => {\n            return target.page();\n        }));\n        return pages.filter((page) => {\n            return !!page;\n        });\n    }\n    /**\n     * Returns whether BrowserContext is incognito.\n     * The default browser context is the only non-incognito browser context.\n     *\n     * @remarks\n     * The default browser context cannot be closed.\n     */\n    isIncognito() {\n        return !!__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n    }\n    /**\n     * @example\n     *\n     * ```ts\n     * const context = browser.defaultBrowserContext();\n     * await context.overridePermissions('https://html5demos.com', [\n     *   'geolocation',\n     * ]);\n     * ```\n     *\n     * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n     * @param permissions - An array of permissions to grant.\n     * All permissions that are not listed here will be automatically denied.\n     */\n    async overridePermissions(origin, permissions) {\n        const protocolPermissions = permissions.map(permission => {\n            const protocolPermission = WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n            if (!protocolPermission) {\n                throw new Error('Unknown permission: ' + permission);\n            }\n            return protocolPermission;\n        });\n        await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n            origin,\n            browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined,\n            permissions: protocolPermissions,\n        });\n    }\n    /**\n     * Clears all permission overrides for the browser context.\n     *\n     * @example\n     *\n     * ```ts\n     * const context = browser.defaultBrowserContext();\n     * context.overridePermissions('https://example.com', ['clipboard-read']);\n     * // do stuff ..\n     * context.clearPermissionOverrides();\n     * ```\n     */\n    async clearPermissionOverrides() {\n        await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n            browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined,\n        });\n    }\n    /**\n     * Creates a new page in the browser context.\n     */\n    newPage() {\n        return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n    }\n    /**\n     * The browser this browser context belongs to.\n     */\n    browser() {\n        return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\");\n    }\n    /**\n     * Closes the browser context. All the targets that belong to the browser context\n     * will be closed.\n     *\n     * @remarks\n     * Only incognito browser contexts can be closed.\n     */\n    async close() {\n        assert(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n        await __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n    }\n}\n_CDPBrowserContext_connection = new WeakMap(), _CDPBrowserContext_browser = new WeakMap(), _CDPBrowserContext_id = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}