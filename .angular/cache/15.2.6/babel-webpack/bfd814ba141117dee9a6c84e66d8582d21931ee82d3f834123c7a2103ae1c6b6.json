{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiURL = 'https://accounts.spotify.com/authorize';\n    this.clientId = '933d3430c2e6442eac18add3a796497d'; // reemplaza con tu propio cliente ID\n    this.redirectUri = 'http://localhost:4200/disk'; // reemplaza con tu propia URI de redireccionamiento\n    this.scopes = ['user-read-private', 'user-read-email', 'user-library-read'];\n  }\n  login() {\n    const url = `${this.apiURL}?client_id=${this.clientId}&redirect_uri=${this.redirectUri}&scope=${this.scopes.join('%20')}&response_type=token`;\n    window.location.href = url;\n  }\n  logout() {\n    // elimina los tokens de acceso y actualización de la sesión actual\n    localStorage.removeItem('access_token');\n    this.router.navigate(['/']);\n  }\n  isLoggedIn() {\n    // comprueba si hay tokens de acceso y actualización en la sesión actual\n  }\n  // @ts-ignore\n  getUserInfo() {\n    // obtén la información del usuario actual utilizando los tokens de acceso y actualización\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAWtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAT5C,WAAM,GAAG,wCAAwC;IACjD,aAAQ,GAAG,kCAAkC,CAAC,CAAC;IAC/C,gBAAW,GAAG,4BAA4B,CAAC,CAAC;IAC5C,WAAM,GAAG,CACf,mBAAmB,EACnB,iBAAiB,EACjB,mBAAmB,CACpB;EAE8D;EAE/DC,KAAK;IACH,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,cAAc,IAAI,CAACC,QAAQ,iBAAiB,IAAI,CAACC,WAAW,UAAU,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,KAAK,CAAC,sBAAsB;IAC7IC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGR,GAAG;EAC5B;EAEAS,MAAM;IACJ;IACAC,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IACvC,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,UAAU;IACR;EAAA;EAGF;EACAC,WAAW;IACT;EAAA;;AA9BSnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["AuthService","constructor","http","router","login","url","apiURL","clientId","redirectUri","scopes","join","window","location","href","logout","localStorage","removeItem","navigate","isLoggedIn","getUserInfo","factory","providedIn"],"sourceRoot":"","sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiURL = 'https://accounts.spotify.com/authorize';\n  private clientId = '933d3430c2e6442eac18add3a796497d'; // reemplaza con tu propio cliente ID\n  private redirectUri = 'http://localhost:4200/disk'; // reemplaza con tu propia URI de redireccionamiento\n  private scopes = [\n    'user-read-private',\n    'user-read-email',\n    'user-library-read'\n  ];\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login() {\n    const url = `${this.apiURL}?client_id=${this.clientId}&redirect_uri=${this.redirectUri}&scope=${this.scopes.join('%20')}&response_type=token`;\n    window.location.href = url;\n  }\n\n  logout() {\n    // elimina los tokens de acceso y actualización de la sesión actual\n    localStorage.removeItem('access_token');\n    this.router.navigate(['/']);\n  }\n\n  isLoggedIn() {\n    // comprueba si hay tokens de acceso y actualización en la sesión actual\n  }\n\n  // @ts-ignore\n  getUserInfo(): Observable<any> {\n    // obtén la información del usuario actual utilizando los tokens de acceso y actualización\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}