{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ARIAQueryHandler } from './AriaQueryHandler.js';\nimport { customQueryHandlers } from './CustomQueryHandler.js';\nimport { PierceQueryHandler } from './PierceQueryHandler.js';\nimport { PQueryHandler } from './PQueryHandler.js';\nimport { TextQueryHandler } from './TextQueryHandler.js';\nimport { XPathQueryHandler } from './XPathQueryHandler.js';\nexport const BUILTIN_QUERY_HANDLERS = Object.freeze({\n  aria: ARIAQueryHandler,\n  pierce: PierceQueryHandler,\n  xpath: XPathQueryHandler,\n  text: TextQueryHandler\n});\nconst QUERY_SEPARATORS = ['=', '/'];\n/**\n * @internal\n */\nexport function getQueryHandlerByName(name) {\n  if (name in BUILTIN_QUERY_HANDLERS) {\n    return BUILTIN_QUERY_HANDLERS[name];\n  }\n  return customQueryHandlers.get(name);\n}\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector) {\n  for (const handlerMap of [customQueryHandlers.names().map(name => {\n    return [name, customQueryHandlers.get(name)];\n  }), Object.entries(BUILTIN_QUERY_HANDLERS)]) {\n    for (const [name, QueryHandler] of handlerMap) {\n      for (const separator of QUERY_SEPARATORS) {\n        const prefix = `${name}${separator}`;\n        if (selector.startsWith(prefix)) {\n          selector = selector.slice(prefix.length);\n          return {\n            updatedSelector: selector,\n            QueryHandler\n          };\n        }\n      }\n    }\n  }\n  return {\n    updatedSelector: selector,\n    QueryHandler: PQueryHandler\n  };\n}","map":{"version":3,"names":["ARIAQueryHandler","customQueryHandlers","PierceQueryHandler","PQueryHandler","TextQueryHandler","XPathQueryHandler","BUILTIN_QUERY_HANDLERS","Object","freeze","aria","pierce","xpath","text","QUERY_SEPARATORS","getQueryHandlerByName","name","get","getQueryHandlerAndSelector","selector","handlerMap","names","map","entries","QueryHandler","separator","prefix","startsWith","slice","length","updatedSelector"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/GetQueryHandler.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ARIAQueryHandler } from './AriaQueryHandler.js';\nimport { customQueryHandlers } from './CustomQueryHandler.js';\nimport { PierceQueryHandler } from './PierceQueryHandler.js';\nimport { PQueryHandler } from './PQueryHandler.js';\nimport { TextQueryHandler } from './TextQueryHandler.js';\nimport { XPathQueryHandler } from './XPathQueryHandler.js';\nexport const BUILTIN_QUERY_HANDLERS = Object.freeze({\n    aria: ARIAQueryHandler,\n    pierce: PierceQueryHandler,\n    xpath: XPathQueryHandler,\n    text: TextQueryHandler,\n});\nconst QUERY_SEPARATORS = ['=', '/'];\n/**\n * @internal\n */\nexport function getQueryHandlerByName(name) {\n    if (name in BUILTIN_QUERY_HANDLERS) {\n        return BUILTIN_QUERY_HANDLERS[name];\n    }\n    return customQueryHandlers.get(name);\n}\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector) {\n    for (const handlerMap of [\n        customQueryHandlers.names().map(name => {\n            return [name, customQueryHandlers.get(name)];\n        }),\n        Object.entries(BUILTIN_QUERY_HANDLERS),\n    ]) {\n        for (const [name, QueryHandler] of handlerMap) {\n            for (const separator of QUERY_SEPARATORS) {\n                const prefix = `${name}${separator}`;\n                if (selector.startsWith(prefix)) {\n                    selector = selector.slice(prefix.length);\n                    return { updatedSelector: selector, QueryHandler };\n                }\n            }\n        }\n    }\n    return { updatedSelector: selector, QueryHandler: PQueryHandler };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,OAAO,MAAMC,sBAAsB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAChDC,IAAI,EAAET,gBAAgB;EACtBU,MAAM,EAAER,kBAAkB;EAC1BS,KAAK,EAAEN,iBAAiB;EACxBO,IAAI,EAAER;AACV,CAAC,CAAC;AACF,MAAMS,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AACnC;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,CAACC,IAAI,EAAE;EACxC,IAAIA,IAAI,IAAIT,sBAAsB,EAAE;IAChC,OAAOA,sBAAsB,CAACS,IAAI,CAAC;EACvC;EACA,OAAOd,mBAAmB,CAACe,GAAG,CAACD,IAAI,CAAC;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASE,0BAA0B,CAACC,QAAQ,EAAE;EACjD,KAAK,MAAMC,UAAU,IAAI,CACrBlB,mBAAmB,CAACmB,KAAK,EAAE,CAACC,GAAG,CAACN,IAAI,IAAI;IACpC,OAAO,CAACA,IAAI,EAAEd,mBAAmB,CAACe,GAAG,CAACD,IAAI,CAAC,CAAC;EAChD,CAAC,CAAC,EACFR,MAAM,CAACe,OAAO,CAAChB,sBAAsB,CAAC,CACzC,EAAE;IACC,KAAK,MAAM,CAACS,IAAI,EAAEQ,YAAY,CAAC,IAAIJ,UAAU,EAAE;MAC3C,KAAK,MAAMK,SAAS,IAAIX,gBAAgB,EAAE;QACtC,MAAMY,MAAM,GAAI,GAAEV,IAAK,GAAES,SAAU,EAAC;QACpC,IAAIN,QAAQ,CAACQ,UAAU,CAACD,MAAM,CAAC,EAAE;UAC7BP,QAAQ,GAAGA,QAAQ,CAACS,KAAK,CAACF,MAAM,CAACG,MAAM,CAAC;UACxC,OAAO;YAAEC,eAAe,EAAEX,QAAQ;YAAEK;UAAa,CAAC;QACtD;MACJ;IACJ;EACJ;EACA,OAAO;IAAEM,eAAe,EAAEX,QAAQ;IAAEK,YAAY,EAAEpB;EAAc,CAAC;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}