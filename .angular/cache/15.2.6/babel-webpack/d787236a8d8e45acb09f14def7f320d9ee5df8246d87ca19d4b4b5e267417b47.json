{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNode } from '../environment.js';\n/**\n * @internal\n */\nlet debugModule = null;\n/**\n * @internal\n */\nexport function importDebug() {\n  return _importDebug.apply(this, arguments);\n}\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n *\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * @internal\n */\nfunction _importDebug() {\n  _importDebug = _asyncToGenerator(function* () {\n    if (!debugModule) {\n      debugModule = (yield import('debug')).default;\n    }\n    return debugModule;\n  });\n  return _importDebug.apply(this, arguments);\n}\nexport const debug = prefix => {\n  if (isNode) {\n    return /*#__PURE__*/_asyncToGenerator(function* (...logArgs) {\n      if (captureLogs) {\n        capturedLogs.push(prefix + logArgs);\n      }\n      (yield importDebug())(prefix)(logArgs);\n    });\n  }\n  return (...logArgs) => {\n    const debugLevel = globalThis.__PUPPETEER_DEBUG;\n    if (!debugLevel) {\n      return;\n    }\n    const everythingShouldBeLogged = debugLevel === '*';\n    const prefixMatchesDebugLevel = everythingShouldBeLogged || (\n    /**\n     * If the debug level is `foo*`, that means we match any prefix that\n     * starts with `foo`. If the level is `foo`, we match only the prefix\n     * `foo`.\n     */\n    debugLevel.endsWith('*') ? prefix.startsWith(debugLevel) : prefix === debugLevel);\n    if (!prefixMatchesDebugLevel) {\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};\n/**\n * @internal\n */\nlet capturedLogs = [];\n/**\n * @internal\n */\nlet captureLogs = false;\n/**\n * @internal\n */\nexport function setLogCapture(value) {\n  capturedLogs = [];\n  captureLogs = value;\n}\n/**\n * @internal\n */\nexport function getCapturedLogs() {\n  return capturedLogs;\n}","map":{"version":3,"names":["isNode","debugModule","importDebug","default","debug","prefix","logArgs","captureLogs","capturedLogs","push","debugLevel","globalThis","__PUPPETEER_DEBUG","everythingShouldBeLogged","prefixMatchesDebugLevel","endsWith","startsWith","console","log","setLogCapture","value","getCapturedLogs"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Debug.js"],"sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNode } from '../environment.js';\n/**\n * @internal\n */\nlet debugModule = null;\n/**\n * @internal\n */\nexport async function importDebug() {\n    if (!debugModule) {\n        debugModule = (await import('debug')).default;\n    }\n    return debugModule;\n}\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n *\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * @internal\n */\nexport const debug = (prefix) => {\n    if (isNode) {\n        return async (...logArgs) => {\n            if (captureLogs) {\n                capturedLogs.push(prefix + logArgs);\n            }\n            (await importDebug())(prefix)(logArgs);\n        };\n    }\n    return (...logArgs) => {\n        const debugLevel = globalThis.__PUPPETEER_DEBUG;\n        if (!debugLevel) {\n            return;\n        }\n        const everythingShouldBeLogged = debugLevel === '*';\n        const prefixMatchesDebugLevel = everythingShouldBeLogged ||\n            /**\n             * If the debug level is `foo*`, that means we match any prefix that\n             * starts with `foo`. If the level is `foo`, we match only the prefix\n             * `foo`.\n             */\n            (debugLevel.endsWith('*')\n                ? prefix.startsWith(debugLevel)\n                : prefix === debugLevel);\n        if (!prefixMatchesDebugLevel) {\n            return;\n        }\n        // eslint-disable-next-line no-console\n        console.log(`${prefix}:`, ...logArgs);\n    };\n};\n/**\n * @internal\n */\nlet capturedLogs = [];\n/**\n * @internal\n */\nlet captureLogs = false;\n/**\n * @internal\n */\nexport function setLogCapture(value) {\n    capturedLogs = [];\n    captureLogs = value;\n}\n/**\n * @internal\n */\nexport function getCapturedLogs() {\n    return capturedLogs;\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C;AACA;AACA;AACA,IAAIC,WAAW,GAAG,IAAI;AACtB;AACA;AACA;AACA,gBAAsBC,WAAW;EAAA;AAAA;AAMjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;EAAA,iCANO,aAA6B;IAChC,IAAI,CAACD,WAAW,EAAE;MACdA,WAAW,GAAG,OAAO,MAAM,CAAC,OAAO,CAAC,EAAEE,OAAO;IACjD;IACA,OAAOF,WAAW;EACtB,CAAC;EAAA;AAAA;AAuCD,OAAO,MAAMG,KAAK,GAAIC,MAAM,IAAK;EAC7B,IAAIL,MAAM,EAAE;IACR,sCAAO,WAAO,GAAGM,OAAO,EAAK;MACzB,IAAIC,WAAW,EAAE;QACbC,YAAY,CAACC,IAAI,CAACJ,MAAM,GAAGC,OAAO,CAAC;MACvC;MACA,OAAOJ,WAAW,EAAE,EAAEG,MAAM,CAAC,CAACC,OAAO,CAAC;IAC1C,CAAC;EACL;EACA,OAAO,CAAC,GAAGA,OAAO,KAAK;IACnB,MAAMI,UAAU,GAAGC,UAAU,CAACC,iBAAiB;IAC/C,IAAI,CAACF,UAAU,EAAE;MACb;IACJ;IACA,MAAMG,wBAAwB,GAAGH,UAAU,KAAK,GAAG;IACnD,MAAMI,uBAAuB,GAAGD,wBAAwB;IACpD;AACZ;AACA;AACA;AACA;IACaH,UAAU,CAACK,QAAQ,CAAC,GAAG,CAAC,GACnBV,MAAM,CAACW,UAAU,CAACN,UAAU,CAAC,GAC7BL,MAAM,KAAKK,UAAU,CAAC;IAChC,IAAI,CAACI,uBAAuB,EAAE;MAC1B;IACJ;IACA;IACAG,OAAO,CAACC,GAAG,CAAE,GAAEb,MAAO,GAAE,EAAE,GAAGC,OAAO,CAAC;EACzC,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA,IAAIE,YAAY,GAAG,EAAE;AACrB;AACA;AACA;AACA,IAAID,WAAW,GAAG,KAAK;AACvB;AACA;AACA;AACA,OAAO,SAASY,aAAa,CAACC,KAAK,EAAE;EACjCZ,YAAY,GAAG,EAAE;EACjBD,WAAW,GAAGa,KAAK;AACvB;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAe,GAAG;EAC9B,OAAOb,YAAY;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}