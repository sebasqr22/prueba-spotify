{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _FrameManager_instances, _FrameManager_page, _FrameManager_networkManager, _FrameManager_timeoutSettings, _FrameManager_contextIdToContext, _FrameManager_isolatedWorlds, _FrameManager_client, _FrameManager_frameNavigatedReceived, _FrameManager_deviceRequestPromptManagerMap, _FrameManager_onLifecycleEvent, _FrameManager_onFrameStartedLoading, _FrameManager_onFrameStoppedLoading, _FrameManager_handleFrameTree, _FrameManager_onFrameAttached, _FrameManager_onFrameNavigated, _FrameManager_createIsolatedWorld, _FrameManager_onFrameNavigatedWithinDocument, _FrameManager_onFrameDetached, _FrameManager_onExecutionContextCreated, _FrameManager_onExecutionContextDestroyed, _FrameManager_onExecutionContextsCleared, _FrameManager_removeFramesRecursively;\nimport { assert } from '../util/assert.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { isTargetClosedError } from './Connection.js';\nimport { DeviceRequestPromptManager } from './DeviceRequestPrompt.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { EVALUATION_SCRIPT_URL, ExecutionContext } from './ExecutionContext.js';\nimport { Frame } from './Frame.js';\nimport { FrameTree } from './FrameTree.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { NetworkManager } from './NetworkManager.js';\nimport { debugError } from './util.js';\nconst UTILITY_WORLD_NAME = '__puppeteer_utility_world__';\n/**\n * We use symbols to prevent external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nexport const FrameManagerEmittedEvents = {\n  FrameAttached: Symbol('FrameManager.FrameAttached'),\n  FrameNavigated: Symbol('FrameManager.FrameNavigated'),\n  FrameDetached: Symbol('FrameManager.FrameDetached'),\n  FrameSwapped: Symbol('FrameManager.FrameSwapped'),\n  LifecycleEvent: Symbol('FrameManager.LifecycleEvent'),\n  FrameNavigatedWithinDocument: Symbol('FrameManager.FrameNavigatedWithinDocument'),\n  ExecutionContextCreated: Symbol('FrameManager.ExecutionContextCreated'),\n  ExecutionContextDestroyed: Symbol('FrameManager.ExecutionContextDestroyed')\n};\n/**\n * A frame manager manages the frames for a given {@link Page | page}.\n *\n * @internal\n */\nexport class FrameManager extends EventEmitter {\n  get timeoutSettings() {\n    return __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\");\n  }\n  get networkManager() {\n    return __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\");\n  }\n  get client() {\n    return __classPrivateFieldGet(this, _FrameManager_client, \"f\");\n  }\n  constructor(client, page, ignoreHTTPSErrors, timeoutSettings) {\n    super();\n    _FrameManager_instances.add(this);\n    _FrameManager_page.set(this, void 0);\n    _FrameManager_networkManager.set(this, void 0);\n    _FrameManager_timeoutSettings.set(this, void 0);\n    _FrameManager_contextIdToContext.set(this, new Map());\n    _FrameManager_isolatedWorlds.set(this, new Set());\n    _FrameManager_client.set(this, void 0);\n    /**\n     * @internal\n     */\n    this._frameTree = new FrameTree();\n    /**\n     * Set of frame IDs stored to indicate if a frame has received a\n     * frameNavigated event so that frame tree responses could be ignored as the\n     * frameNavigated event usually contains the latest information.\n     */\n    _FrameManager_frameNavigatedReceived.set(this, new Set());\n    _FrameManager_deviceRequestPromptManagerMap.set(this, new WeakMap());\n    __classPrivateFieldSet(this, _FrameManager_client, client, \"f\");\n    __classPrivateFieldSet(this, _FrameManager_page, page, \"f\");\n    __classPrivateFieldSet(this, _FrameManager_networkManager, new NetworkManager(client, ignoreHTTPSErrors, this), \"f\");\n    __classPrivateFieldSet(this, _FrameManager_timeoutSettings, timeoutSettings, \"f\");\n    this.setupEventListeners(__classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n  }\n  setupEventListeners(session) {\n    session.on('Page.frameAttached', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, event.frameId, event.parentFrameId);\n    });\n    session.on('Page.frameNavigated', event => {\n      __classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").add(event.frame.id);\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, event.frame);\n    });\n    session.on('Page.navigatedWithinDocument', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigatedWithinDocument).call(this, event.frameId, event.url);\n    });\n    session.on('Page.frameDetached', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameDetached).call(this, event.frameId, event.reason);\n    });\n    session.on('Page.frameStartedLoading', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStartedLoading).call(this, event.frameId);\n    });\n    session.on('Page.frameStoppedLoading', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStoppedLoading).call(this, event.frameId);\n    });\n    session.on('Runtime.executionContextCreated', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextCreated).call(this, event.context, session);\n    });\n    session.on('Runtime.executionContextDestroyed', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextDestroyed).call(this, event.executionContextId, session);\n    });\n    session.on('Runtime.executionContextsCleared', () => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextsCleared).call(this, session);\n    });\n    session.on('Page.lifecycleEvent', event => {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onLifecycleEvent).call(this, event);\n    });\n  }\n  initialize(client = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield Promise.all([client.send('Page.enable'), client.send('Page.getFrameTree')]);\n        const {\n          frameTree\n        } = result[1];\n        __classPrivateFieldGet(_this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(_this, client, frameTree);\n        yield Promise.all([client.send('Page.setLifecycleEventsEnabled', {\n          enabled: true\n        }), client.send('Runtime.enable').then(() => {\n          return __classPrivateFieldGet(_this, _FrameManager_instances, \"m\", _FrameManager_createIsolatedWorld).call(_this, client, UTILITY_WORLD_NAME);\n        }),\n        // TODO: Network manager is not aware of OOP iframes yet.\n        client === __classPrivateFieldGet(_this, _FrameManager_client, \"f\") ? __classPrivateFieldGet(_this, _FrameManager_networkManager, \"f\").initialize() : Promise.resolve()]);\n      } catch (error) {\n        // The target might have been closed before the initialization finished.\n        if (isErrorLike(error) && isTargetClosedError(error)) {\n          return;\n        }\n        throw error;\n      }\n    })();\n  }\n  executionContextById(contextId, session = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n    const context = this.getExecutionContextById(contextId, session);\n    assert(context, 'INTERNAL ERROR: missing context with id = ' + contextId);\n    return context;\n  }\n  getExecutionContextById(contextId, session = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n    return __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(`${session.id()}:${contextId}`);\n  }\n  page() {\n    return __classPrivateFieldGet(this, _FrameManager_page, \"f\");\n  }\n  mainFrame() {\n    const mainFrame = this._frameTree.getMainFrame();\n    assert(mainFrame, 'Requesting main frame too early!');\n    return mainFrame;\n  }\n  frames() {\n    return Array.from(this._frameTree.frames());\n  }\n  frame(frameId) {\n    return this._frameTree.getById(frameId) || null;\n  }\n  onAttachedToTarget(target) {\n    if (target._getTargetInfo().type !== 'iframe') {\n      return;\n    }\n    const frame = this.frame(target._getTargetInfo().targetId);\n    if (frame) {\n      frame.updateClient(target._session());\n    }\n    this.setupEventListeners(target._session());\n    this.initialize(target._session());\n  }\n  /**\n   * @internal\n   */\n  _deviceRequestPromptManager(client) {\n    let manager = __classPrivateFieldGet(this, _FrameManager_deviceRequestPromptManagerMap, \"f\").get(client);\n    if (manager === undefined) {\n      manager = new DeviceRequestPromptManager(client, __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\"));\n      __classPrivateFieldGet(this, _FrameManager_deviceRequestPromptManagerMap, \"f\").set(client, manager);\n    }\n    return manager;\n  }\n}\n_FrameManager_page = new WeakMap(), _FrameManager_networkManager = new WeakMap(), _FrameManager_timeoutSettings = new WeakMap(), _FrameManager_contextIdToContext = new WeakMap(), _FrameManager_isolatedWorlds = new WeakMap(), _FrameManager_client = new WeakMap(), _FrameManager_frameNavigatedReceived = new WeakMap(), _FrameManager_deviceRequestPromptManagerMap = new WeakMap(), _FrameManager_instances = new WeakSet(), _FrameManager_onLifecycleEvent = function _FrameManager_onLifecycleEvent(event) {\n  const frame = this.frame(event.frameId);\n  if (!frame) {\n    return;\n  }\n  frame._onLifecycleEvent(event.loaderId, event.name);\n  this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_onFrameStartedLoading = function _FrameManager_onFrameStartedLoading(frameId) {\n  const frame = this.frame(frameId);\n  if (!frame) {\n    return;\n  }\n  frame._onLoadingStarted();\n}, _FrameManager_onFrameStoppedLoading = function _FrameManager_onFrameStoppedLoading(frameId) {\n  const frame = this.frame(frameId);\n  if (!frame) {\n    return;\n  }\n  frame._onLoadingStopped();\n  this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_handleFrameTree = function _FrameManager_handleFrameTree(session, frameTree) {\n  if (frameTree.frame.parentId) {\n    __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, frameTree.frame.id, frameTree.frame.parentId);\n  }\n  if (!__classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").has(frameTree.frame.id)) {\n    __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, frameTree.frame);\n  } else {\n    __classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").delete(frameTree.frame.id);\n  }\n  if (!frameTree.childFrames) {\n    return;\n  }\n  for (const child of frameTree.childFrames) {\n    __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(this, session, child);\n  }\n}, _FrameManager_onFrameAttached = function _FrameManager_onFrameAttached(session, frameId, parentFrameId) {\n  let frame = this.frame(frameId);\n  if (frame) {\n    if (session && frame.isOOPFrame()) {\n      // If an OOP iframes becomes a normal iframe again\n      // it is first attached to the parent page before\n      // the target is removed.\n      frame.updateClient(session);\n    }\n    return;\n  }\n  frame = new Frame(this, frameId, parentFrameId, session);\n  this._frameTree.addFrame(frame);\n  this.emit(FrameManagerEmittedEvents.FrameAttached, frame);\n}, _FrameManager_onFrameNavigated = /*#__PURE__*/function () {\n  var _FrameManager_onFrameNavigated2 = _asyncToGenerator(function* (framePayload) {\n    const frameId = framePayload.id;\n    const isMainFrame = !framePayload.parentId;\n    let frame = this._frameTree.getById(frameId);\n    // Detach all child frames first.\n    if (frame) {\n      for (const child of frame.childFrames()) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n      }\n    }\n    // Update or create main frame.\n    if (isMainFrame) {\n      if (frame) {\n        // Update frame id to retain frame identity on cross-process navigation.\n        this._frameTree.removeFrame(frame);\n        frame._id = frameId;\n      } else {\n        // Initial main frame navigation.\n        frame = new Frame(this, frameId, undefined, __classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n      }\n      this._frameTree.addFrame(frame);\n    }\n    frame = yield this._frameTree.waitForFrame(frameId);\n    frame._navigated(framePayload);\n    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n  });\n  function _FrameManager_onFrameNavigated(_x) {\n    return _FrameManager_onFrameNavigated2.apply(this, arguments);\n  }\n  return _FrameManager_onFrameNavigated;\n}(), _FrameManager_createIsolatedWorld = /*#__PURE__*/function () {\n  var _FrameManager_createIsolatedWorld2 = _asyncToGenerator(function* (session, name) {\n    const key = `${session.id()}:${name}`;\n    if (__classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").has(key)) {\n      return;\n    }\n    yield session.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: `//# sourceURL=${EVALUATION_SCRIPT_URL}`,\n      worldName: name\n    });\n    yield Promise.all(this.frames().filter(frame => {\n      return frame._client() === session;\n    }).map(frame => {\n      // Frames might be removed before we send this, so we don't want to\n      // throw an error.\n      return session.send('Page.createIsolatedWorld', {\n        frameId: frame._id,\n        worldName: name,\n        grantUniveralAccess: true\n      }).catch(debugError);\n    }));\n    __classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").add(key);\n  });\n  function _FrameManager_createIsolatedWorld(_x2, _x3) {\n    return _FrameManager_createIsolatedWorld2.apply(this, arguments);\n  }\n  return _FrameManager_createIsolatedWorld;\n}(), _FrameManager_onFrameNavigatedWithinDocument = function _FrameManager_onFrameNavigatedWithinDocument(frameId, url) {\n  const frame = this.frame(frameId);\n  if (!frame) {\n    return;\n  }\n  frame._navigatedWithinDocument(url);\n  this.emit(FrameManagerEmittedEvents.FrameNavigatedWithinDocument, frame);\n  this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n}, _FrameManager_onFrameDetached = function _FrameManager_onFrameDetached(frameId, reason) {\n  const frame = this.frame(frameId);\n  if (reason === 'remove') {\n    // Only remove the frame if the reason for the detached event is\n    // an actual removement of the frame.\n    // For frames that become OOP iframes, the reason would be 'swap'.\n    if (frame) {\n      __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, frame);\n    }\n  } else if (reason === 'swap') {\n    this.emit(FrameManagerEmittedEvents.FrameSwapped, frame);\n  }\n}, _FrameManager_onExecutionContextCreated = function _FrameManager_onExecutionContextCreated(contextPayload, session) {\n  const auxData = contextPayload.auxData;\n  const frameId = auxData && auxData.frameId;\n  const frame = typeof frameId === 'string' ? this.frame(frameId) : undefined;\n  let world;\n  if (frame) {\n    // Only care about execution contexts created for the current session.\n    if (frame._client() !== session) {\n      return;\n    }\n    if (contextPayload.auxData && contextPayload.auxData['isDefault']) {\n      world = frame.worlds[MAIN_WORLD];\n    } else if (contextPayload.name === UTILITY_WORLD_NAME && !frame.worlds[PUPPETEER_WORLD].hasContext()) {\n      // In case of multiple sessions to the same target, there's a race between\n      // connections so we might end up creating multiple isolated worlds.\n      // We can use either.\n      world = frame.worlds[PUPPETEER_WORLD];\n    }\n  }\n  const context = new ExecutionContext((frame === null || frame === void 0 ? void 0 : frame._client()) || __classPrivateFieldGet(this, _FrameManager_client, \"f\"), contextPayload, world);\n  if (world) {\n    world.setContext(context);\n  }\n  const key = `${session.id()}:${contextPayload.id}`;\n  __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").set(key, context);\n}, _FrameManager_onExecutionContextDestroyed = function _FrameManager_onExecutionContextDestroyed(executionContextId, session) {\n  const key = `${session.id()}:${executionContextId}`;\n  const context = __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(key);\n  if (!context) {\n    return;\n  }\n  __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n  if (context._world) {\n    context._world.clearContext();\n  }\n}, _FrameManager_onExecutionContextsCleared = function _FrameManager_onExecutionContextsCleared(session) {\n  for (const [key, context] of __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").entries()) {\n    // Make sure to only clear execution contexts that belong\n    // to the current session.\n    if (context._client !== session) {\n      continue;\n    }\n    if (context._world) {\n      context._world.clearContext();\n    }\n    __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n  }\n}, _FrameManager_removeFramesRecursively = function _FrameManager_removeFramesRecursively(frame) {\n  for (const child of frame.childFrames()) {\n    __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n  }\n  frame._detach();\n  this._frameTree.removeFrame(frame);\n  this.emit(FrameManagerEmittedEvents.FrameDetached, frame);\n};","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_FrameManager_instances","_FrameManager_page","_FrameManager_networkManager","_FrameManager_timeoutSettings","_FrameManager_contextIdToContext","_FrameManager_isolatedWorlds","_FrameManager_client","_FrameManager_frameNavigatedReceived","_FrameManager_deviceRequestPromptManagerMap","_FrameManager_onLifecycleEvent","_FrameManager_onFrameStartedLoading","_FrameManager_onFrameStoppedLoading","_FrameManager_handleFrameTree","_FrameManager_onFrameAttached","_FrameManager_onFrameNavigated","_FrameManager_createIsolatedWorld","_FrameManager_onFrameNavigatedWithinDocument","_FrameManager_onFrameDetached","_FrameManager_onExecutionContextCreated","_FrameManager_onExecutionContextDestroyed","_FrameManager_onExecutionContextsCleared","_FrameManager_removeFramesRecursively","assert","isErrorLike","isTargetClosedError","DeviceRequestPromptManager","EventEmitter","EVALUATION_SCRIPT_URL","ExecutionContext","Frame","FrameTree","MAIN_WORLD","PUPPETEER_WORLD","NetworkManager","debugError","UTILITY_WORLD_NAME","FrameManagerEmittedEvents","FrameAttached","Symbol","FrameNavigated","FrameDetached","FrameSwapped","LifecycleEvent","FrameNavigatedWithinDocument","ExecutionContextCreated","ExecutionContextDestroyed","FrameManager","timeoutSettings","networkManager","client","constructor","page","ignoreHTTPSErrors","add","Map","Set","_frameTree","WeakMap","setupEventListeners","session","on","event","frameId","parentFrameId","frame","id","url","reason","context","executionContextId","initialize","result","Promise","all","send","frameTree","enabled","then","resolve","error","executionContextById","contextId","getExecutionContextById","mainFrame","getMainFrame","frames","Array","from","getById","onAttachedToTarget","target","_getTargetInfo","type","targetId","updateClient","_session","_deviceRequestPromptManager","manager","undefined","WeakSet","_onLifecycleEvent","loaderId","name","emit","_onLoadingStarted","_onLoadingStopped","parentId","delete","childFrames","child","isOOPFrame","addFrame","framePayload","isMainFrame","removeFrame","_id","waitForFrame","_navigated","key","source","worldName","filter","_client","map","grantUniveralAccess","catch","_navigatedWithinDocument","contextPayload","auxData","world","worlds","hasContext","setContext","_world","clearContext","entries","_detach"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/FrameManager.js"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrameManager_instances, _FrameManager_page, _FrameManager_networkManager, _FrameManager_timeoutSettings, _FrameManager_contextIdToContext, _FrameManager_isolatedWorlds, _FrameManager_client, _FrameManager_frameNavigatedReceived, _FrameManager_deviceRequestPromptManagerMap, _FrameManager_onLifecycleEvent, _FrameManager_onFrameStartedLoading, _FrameManager_onFrameStoppedLoading, _FrameManager_handleFrameTree, _FrameManager_onFrameAttached, _FrameManager_onFrameNavigated, _FrameManager_createIsolatedWorld, _FrameManager_onFrameNavigatedWithinDocument, _FrameManager_onFrameDetached, _FrameManager_onExecutionContextCreated, _FrameManager_onExecutionContextDestroyed, _FrameManager_onExecutionContextsCleared, _FrameManager_removeFramesRecursively;\nimport { assert } from '../util/assert.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { isTargetClosedError } from './Connection.js';\nimport { DeviceRequestPromptManager } from './DeviceRequestPrompt.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { EVALUATION_SCRIPT_URL, ExecutionContext } from './ExecutionContext.js';\nimport { Frame } from './Frame.js';\nimport { FrameTree } from './FrameTree.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { NetworkManager } from './NetworkManager.js';\nimport { debugError } from './util.js';\nconst UTILITY_WORLD_NAME = '__puppeteer_utility_world__';\n/**\n * We use symbols to prevent external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nexport const FrameManagerEmittedEvents = {\n    FrameAttached: Symbol('FrameManager.FrameAttached'),\n    FrameNavigated: Symbol('FrameManager.FrameNavigated'),\n    FrameDetached: Symbol('FrameManager.FrameDetached'),\n    FrameSwapped: Symbol('FrameManager.FrameSwapped'),\n    LifecycleEvent: Symbol('FrameManager.LifecycleEvent'),\n    FrameNavigatedWithinDocument: Symbol('FrameManager.FrameNavigatedWithinDocument'),\n    ExecutionContextCreated: Symbol('FrameManager.ExecutionContextCreated'),\n    ExecutionContextDestroyed: Symbol('FrameManager.ExecutionContextDestroyed'),\n};\n/**\n * A frame manager manages the frames for a given {@link Page | page}.\n *\n * @internal\n */\nexport class FrameManager extends EventEmitter {\n    get timeoutSettings() {\n        return __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\");\n    }\n    get networkManager() {\n        return __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\");\n    }\n    get client() {\n        return __classPrivateFieldGet(this, _FrameManager_client, \"f\");\n    }\n    constructor(client, page, ignoreHTTPSErrors, timeoutSettings) {\n        super();\n        _FrameManager_instances.add(this);\n        _FrameManager_page.set(this, void 0);\n        _FrameManager_networkManager.set(this, void 0);\n        _FrameManager_timeoutSettings.set(this, void 0);\n        _FrameManager_contextIdToContext.set(this, new Map());\n        _FrameManager_isolatedWorlds.set(this, new Set());\n        _FrameManager_client.set(this, void 0);\n        /**\n         * @internal\n         */\n        this._frameTree = new FrameTree();\n        /**\n         * Set of frame IDs stored to indicate if a frame has received a\n         * frameNavigated event so that frame tree responses could be ignored as the\n         * frameNavigated event usually contains the latest information.\n         */\n        _FrameManager_frameNavigatedReceived.set(this, new Set());\n        _FrameManager_deviceRequestPromptManagerMap.set(this, new WeakMap());\n        __classPrivateFieldSet(this, _FrameManager_client, client, \"f\");\n        __classPrivateFieldSet(this, _FrameManager_page, page, \"f\");\n        __classPrivateFieldSet(this, _FrameManager_networkManager, new NetworkManager(client, ignoreHTTPSErrors, this), \"f\");\n        __classPrivateFieldSet(this, _FrameManager_timeoutSettings, timeoutSettings, \"f\");\n        this.setupEventListeners(__classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n    }\n    setupEventListeners(session) {\n        session.on('Page.frameAttached', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, event.frameId, event.parentFrameId);\n        });\n        session.on('Page.frameNavigated', event => {\n            __classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").add(event.frame.id);\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, event.frame);\n        });\n        session.on('Page.navigatedWithinDocument', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigatedWithinDocument).call(this, event.frameId, event.url);\n        });\n        session.on('Page.frameDetached', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameDetached).call(this, event.frameId, event.reason);\n        });\n        session.on('Page.frameStartedLoading', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStartedLoading).call(this, event.frameId);\n        });\n        session.on('Page.frameStoppedLoading', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStoppedLoading).call(this, event.frameId);\n        });\n        session.on('Runtime.executionContextCreated', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextCreated).call(this, event.context, session);\n        });\n        session.on('Runtime.executionContextDestroyed', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextDestroyed).call(this, event.executionContextId, session);\n        });\n        session.on('Runtime.executionContextsCleared', () => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextsCleared).call(this, session);\n        });\n        session.on('Page.lifecycleEvent', event => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onLifecycleEvent).call(this, event);\n        });\n    }\n    async initialize(client = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n        try {\n            const result = await Promise.all([\n                client.send('Page.enable'),\n                client.send('Page.getFrameTree'),\n            ]);\n            const { frameTree } = result[1];\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(this, client, frameTree);\n            await Promise.all([\n                client.send('Page.setLifecycleEventsEnabled', { enabled: true }),\n                client.send('Runtime.enable').then(() => {\n                    return __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_createIsolatedWorld).call(this, client, UTILITY_WORLD_NAME);\n                }),\n                // TODO: Network manager is not aware of OOP iframes yet.\n                client === __classPrivateFieldGet(this, _FrameManager_client, \"f\")\n                    ? __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\").initialize()\n                    : Promise.resolve(),\n            ]);\n        }\n        catch (error) {\n            // The target might have been closed before the initialization finished.\n            if (isErrorLike(error) && isTargetClosedError(error)) {\n                return;\n            }\n            throw error;\n        }\n    }\n    executionContextById(contextId, session = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n        const context = this.getExecutionContextById(contextId, session);\n        assert(context, 'INTERNAL ERROR: missing context with id = ' + contextId);\n        return context;\n    }\n    getExecutionContextById(contextId, session = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n        return __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(`${session.id()}:${contextId}`);\n    }\n    page() {\n        return __classPrivateFieldGet(this, _FrameManager_page, \"f\");\n    }\n    mainFrame() {\n        const mainFrame = this._frameTree.getMainFrame();\n        assert(mainFrame, 'Requesting main frame too early!');\n        return mainFrame;\n    }\n    frames() {\n        return Array.from(this._frameTree.frames());\n    }\n    frame(frameId) {\n        return this._frameTree.getById(frameId) || null;\n    }\n    onAttachedToTarget(target) {\n        if (target._getTargetInfo().type !== 'iframe') {\n            return;\n        }\n        const frame = this.frame(target._getTargetInfo().targetId);\n        if (frame) {\n            frame.updateClient(target._session());\n        }\n        this.setupEventListeners(target._session());\n        this.initialize(target._session());\n    }\n    /**\n     * @internal\n     */\n    _deviceRequestPromptManager(client) {\n        let manager = __classPrivateFieldGet(this, _FrameManager_deviceRequestPromptManagerMap, \"f\").get(client);\n        if (manager === undefined) {\n            manager = new DeviceRequestPromptManager(client, __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\"));\n            __classPrivateFieldGet(this, _FrameManager_deviceRequestPromptManagerMap, \"f\").set(client, manager);\n        }\n        return manager;\n    }\n}\n_FrameManager_page = new WeakMap(), _FrameManager_networkManager = new WeakMap(), _FrameManager_timeoutSettings = new WeakMap(), _FrameManager_contextIdToContext = new WeakMap(), _FrameManager_isolatedWorlds = new WeakMap(), _FrameManager_client = new WeakMap(), _FrameManager_frameNavigatedReceived = new WeakMap(), _FrameManager_deviceRequestPromptManagerMap = new WeakMap(), _FrameManager_instances = new WeakSet(), _FrameManager_onLifecycleEvent = function _FrameManager_onLifecycleEvent(event) {\n    const frame = this.frame(event.frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLifecycleEvent(event.loaderId, event.name);\n    this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_onFrameStartedLoading = function _FrameManager_onFrameStartedLoading(frameId) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLoadingStarted();\n}, _FrameManager_onFrameStoppedLoading = function _FrameManager_onFrameStoppedLoading(frameId) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLoadingStopped();\n    this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_handleFrameTree = function _FrameManager_handleFrameTree(session, frameTree) {\n    if (frameTree.frame.parentId) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, frameTree.frame.id, frameTree.frame.parentId);\n    }\n    if (!__classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").has(frameTree.frame.id)) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, frameTree.frame);\n    }\n    else {\n        __classPrivateFieldGet(this, _FrameManager_frameNavigatedReceived, \"f\").delete(frameTree.frame.id);\n    }\n    if (!frameTree.childFrames) {\n        return;\n    }\n    for (const child of frameTree.childFrames) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(this, session, child);\n    }\n}, _FrameManager_onFrameAttached = function _FrameManager_onFrameAttached(session, frameId, parentFrameId) {\n    let frame = this.frame(frameId);\n    if (frame) {\n        if (session && frame.isOOPFrame()) {\n            // If an OOP iframes becomes a normal iframe again\n            // it is first attached to the parent page before\n            // the target is removed.\n            frame.updateClient(session);\n        }\n        return;\n    }\n    frame = new Frame(this, frameId, parentFrameId, session);\n    this._frameTree.addFrame(frame);\n    this.emit(FrameManagerEmittedEvents.FrameAttached, frame);\n}, _FrameManager_onFrameNavigated = async function _FrameManager_onFrameNavigated(framePayload) {\n    const frameId = framePayload.id;\n    const isMainFrame = !framePayload.parentId;\n    let frame = this._frameTree.getById(frameId);\n    // Detach all child frames first.\n    if (frame) {\n        for (const child of frame.childFrames()) {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n        }\n    }\n    // Update or create main frame.\n    if (isMainFrame) {\n        if (frame) {\n            // Update frame id to retain frame identity on cross-process navigation.\n            this._frameTree.removeFrame(frame);\n            frame._id = frameId;\n        }\n        else {\n            // Initial main frame navigation.\n            frame = new Frame(this, frameId, undefined, __classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n        }\n        this._frameTree.addFrame(frame);\n    }\n    frame = await this._frameTree.waitForFrame(frameId);\n    frame._navigated(framePayload);\n    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n}, _FrameManager_createIsolatedWorld = async function _FrameManager_createIsolatedWorld(session, name) {\n    const key = `${session.id()}:${name}`;\n    if (__classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").has(key)) {\n        return;\n    }\n    await session.send('Page.addScriptToEvaluateOnNewDocument', {\n        source: `//# sourceURL=${EVALUATION_SCRIPT_URL}`,\n        worldName: name,\n    });\n    await Promise.all(this.frames()\n        .filter(frame => {\n        return frame._client() === session;\n    })\n        .map(frame => {\n        // Frames might be removed before we send this, so we don't want to\n        // throw an error.\n        return session\n            .send('Page.createIsolatedWorld', {\n            frameId: frame._id,\n            worldName: name,\n            grantUniveralAccess: true,\n        })\n            .catch(debugError);\n    }));\n    __classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").add(key);\n}, _FrameManager_onFrameNavigatedWithinDocument = function _FrameManager_onFrameNavigatedWithinDocument(frameId, url) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._navigatedWithinDocument(url);\n    this.emit(FrameManagerEmittedEvents.FrameNavigatedWithinDocument, frame);\n    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n}, _FrameManager_onFrameDetached = function _FrameManager_onFrameDetached(frameId, reason) {\n    const frame = this.frame(frameId);\n    if (reason === 'remove') {\n        // Only remove the frame if the reason for the detached event is\n        // an actual removement of the frame.\n        // For frames that become OOP iframes, the reason would be 'swap'.\n        if (frame) {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, frame);\n        }\n    }\n    else if (reason === 'swap') {\n        this.emit(FrameManagerEmittedEvents.FrameSwapped, frame);\n    }\n}, _FrameManager_onExecutionContextCreated = function _FrameManager_onExecutionContextCreated(contextPayload, session) {\n    const auxData = contextPayload.auxData;\n    const frameId = auxData && auxData.frameId;\n    const frame = typeof frameId === 'string' ? this.frame(frameId) : undefined;\n    let world;\n    if (frame) {\n        // Only care about execution contexts created for the current session.\n        if (frame._client() !== session) {\n            return;\n        }\n        if (contextPayload.auxData && contextPayload.auxData['isDefault']) {\n            world = frame.worlds[MAIN_WORLD];\n        }\n        else if (contextPayload.name === UTILITY_WORLD_NAME &&\n            !frame.worlds[PUPPETEER_WORLD].hasContext()) {\n            // In case of multiple sessions to the same target, there's a race between\n            // connections so we might end up creating multiple isolated worlds.\n            // We can use either.\n            world = frame.worlds[PUPPETEER_WORLD];\n        }\n    }\n    const context = new ExecutionContext((frame === null || frame === void 0 ? void 0 : frame._client()) || __classPrivateFieldGet(this, _FrameManager_client, \"f\"), contextPayload, world);\n    if (world) {\n        world.setContext(context);\n    }\n    const key = `${session.id()}:${contextPayload.id}`;\n    __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").set(key, context);\n}, _FrameManager_onExecutionContextDestroyed = function _FrameManager_onExecutionContextDestroyed(executionContextId, session) {\n    const key = `${session.id()}:${executionContextId}`;\n    const context = __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(key);\n    if (!context) {\n        return;\n    }\n    __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n    if (context._world) {\n        context._world.clearContext();\n    }\n}, _FrameManager_onExecutionContextsCleared = function _FrameManager_onExecutionContextsCleared(session) {\n    for (const [key, context] of __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").entries()) {\n        // Make sure to only clear execution contexts that belong\n        // to the current session.\n        if (context._client !== session) {\n            continue;\n        }\n        if (context._world) {\n            context._world.clearContext();\n        }\n        __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n    }\n}, _FrameManager_removeFramesRecursively = function _FrameManager_removeFramesRecursively(frame) {\n    for (const child of frame.childFrames()) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n    }\n    frame._detach();\n    this._frameTree.removeFrame(frame);\n    this.emit(FrameManagerEmittedEvents.FrameDetached, frame);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}