{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform } from './types.js';\nfunction archive(platform) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'chromedriver_linux64';\n    case BrowserPlatform.MAC_ARM:\n      return 'chromedriver_mac_arm64';\n    case BrowserPlatform.MAC:\n      return 'chromedriver_mac64';\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return 'chromedriver_win32';\n  }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://chromedriver.storage.googleapis.com') {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n  return [buildId, `${archive(platform)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.LINUX:\n      return 'chromedriver';\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return 'chromedriver.exe';\n  }\n}\nexport function resolveBuildId() {\n  return _resolveBuildId.apply(this, arguments);\n}\nfunction _resolveBuildId() {\n  _resolveBuildId = _asyncToGenerator(function* (_channel = 'latest') {\n    return new Promise((resolve, reject) => {\n      const request = httpRequest(new URL(`https://chromedriver.storage.googleapis.com/LATEST_RELEASE`), 'GET', response => {\n        let data = '';\n        if (response.statusCode && response.statusCode >= 400) {\n          return reject(new Error(`Got status code ${response.statusCode}`));\n        }\n        response.on('data', chunk => {\n          data += chunk;\n        });\n        response.on('end', () => {\n          try {\n            return resolve(String(data));\n          } catch {\n            return reject(new Error('Chrome version not found'));\n          }\n        });\n      }, false);\n      request.on('error', err => {\n        reject(err);\n      });\n    });\n  });\n  return _resolveBuildId.apply(this, arguments);\n}","map":{"version":3,"names":["httpRequest","BrowserPlatform","archive","platform","LINUX","MAC_ARM","MAC","WIN32","WIN64","resolveDownloadUrl","buildId","baseUrl","resolveDownloadPath","join","relativeExecutablePath","_buildId","resolveBuildId","_channel","Promise","resolve","reject","request","URL","response","data","statusCode","Error","on","chunk","String","err"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@puppeteer/browsers/lib/esm/browser-data/chromedriver.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform } from './types.js';\nfunction archive(platform) {\n    switch (platform) {\n        case BrowserPlatform.LINUX:\n            return 'chromedriver_linux64';\n        case BrowserPlatform.MAC_ARM:\n            return 'chromedriver_mac_arm64';\n        case BrowserPlatform.MAC:\n            return 'chromedriver_mac64';\n        case BrowserPlatform.WIN32:\n        case BrowserPlatform.WIN64:\n            return 'chromedriver_win32';\n    }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://chromedriver.storage.googleapis.com') {\n    return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n    return [buildId, `${archive(platform)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n    switch (platform) {\n        case BrowserPlatform.MAC:\n        case BrowserPlatform.MAC_ARM:\n        case BrowserPlatform.LINUX:\n            return 'chromedriver';\n        case BrowserPlatform.WIN32:\n        case BrowserPlatform.WIN64:\n            return 'chromedriver.exe';\n    }\n}\nexport async function resolveBuildId(_channel = 'latest') {\n    return new Promise((resolve, reject) => {\n        const request = httpRequest(new URL(`https://chromedriver.storage.googleapis.com/LATEST_RELEASE`), 'GET', response => {\n            let data = '';\n            if (response.statusCode && response.statusCode >= 400) {\n                return reject(new Error(`Got status code ${response.statusCode}`));\n            }\n            response.on('data', chunk => {\n                data += chunk;\n            });\n            response.on('end', () => {\n                try {\n                    return resolve(String(data));\n                }\n                catch {\n                    return reject(new Error('Chrome version not found'));\n                }\n            });\n        }, false);\n        request.on('error', err => {\n            reject(err);\n        });\n    });\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,OAAO,CAACC,QAAQ,EAAE;EACvB,QAAQA,QAAQ;IACZ,KAAKF,eAAe,CAACG,KAAK;MACtB,OAAO,sBAAsB;IACjC,KAAKH,eAAe,CAACI,OAAO;MACxB,OAAO,wBAAwB;IACnC,KAAKJ,eAAe,CAACK,GAAG;MACpB,OAAO,oBAAoB;IAC/B,KAAKL,eAAe,CAACM,KAAK;IAC1B,KAAKN,eAAe,CAACO,KAAK;MACtB,OAAO,oBAAoB;EAAC;AAExC;AACA,OAAO,SAASC,kBAAkB,CAACN,QAAQ,EAAEO,OAAO,EAAEC,OAAO,GAAG,6CAA6C,EAAE;EAC3G,OAAQ,GAAEA,OAAQ,IAAGC,mBAAmB,CAACT,QAAQ,EAAEO,OAAO,CAAC,CAACG,IAAI,CAAC,GAAG,CAAE,EAAC;AAC3E;AACA,OAAO,SAASD,mBAAmB,CAACT,QAAQ,EAAEO,OAAO,EAAE;EACnD,OAAO,CAACA,OAAO,EAAG,GAAER,OAAO,CAACC,QAAQ,CAAE,MAAK,CAAC;AAChD;AACA,OAAO,SAASW,sBAAsB,CAACX,QAAQ,EAAEY,QAAQ,EAAE;EACvD,QAAQZ,QAAQ;IACZ,KAAKF,eAAe,CAACK,GAAG;IACxB,KAAKL,eAAe,CAACI,OAAO;IAC5B,KAAKJ,eAAe,CAACG,KAAK;MACtB,OAAO,cAAc;IACzB,KAAKH,eAAe,CAACM,KAAK;IAC1B,KAAKN,eAAe,CAACO,KAAK;MACtB,OAAO,kBAAkB;EAAC;AAEtC;AACA,gBAAsBQ,cAAc;EAAA;AAAA;AAuBnC;EAAA,oCAvBM,WAA8BC,QAAQ,GAAG,QAAQ,EAAE;IACtD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,MAAMC,OAAO,GAAGrB,WAAW,CAAC,IAAIsB,GAAG,CAAE,4DAA2D,CAAC,EAAE,KAAK,EAAEC,QAAQ,IAAI;QAClH,IAAIC,IAAI,GAAG,EAAE;QACb,IAAID,QAAQ,CAACE,UAAU,IAAIF,QAAQ,CAACE,UAAU,IAAI,GAAG,EAAE;UACnD,OAAOL,MAAM,CAAC,IAAIM,KAAK,CAAE,mBAAkBH,QAAQ,CAACE,UAAW,EAAC,CAAC,CAAC;QACtE;QACAF,QAAQ,CAACI,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;UACzBJ,IAAI,IAAII,KAAK;QACjB,CAAC,CAAC;QACFL,QAAQ,CAACI,EAAE,CAAC,KAAK,EAAE,MAAM;UACrB,IAAI;YACA,OAAOR,OAAO,CAACU,MAAM,CAACL,IAAI,CAAC,CAAC;UAChC,CAAC,CACD,MAAM;YACF,OAAOJ,MAAM,CAAC,IAAIM,KAAK,CAAC,0BAA0B,CAAC,CAAC;UACxD;QACJ,CAAC,CAAC;MACN,CAAC,EAAE,KAAK,CAAC;MACTL,OAAO,CAACM,EAAE,CAAC,OAAO,EAAEG,GAAG,IAAI;QACvBV,MAAM,CAACU,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}