{"ast":null,"code":"import { Component, Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class DiskComponent {\n  constructor(authService, route) {\n    this.authService = authService;\n    this.route = route;\n    this.usuario = \"\";\n    this.apiUrl = 'https://api.spotify.com/v1/me';\n    this.spotifyApi = this.authService.getApi();\n  }\n  ngOnInit() {\n    const tieneError = this.route.snapshot.queryParams['error'] !== undefined;\n    if (!tieneError) {\n      // @ts-ignore\n      const token = this.route.snapshot.fragment.split('&').find(fragment => fragment.includes('access_token')).split('=')[1];\n      // Guardar el token de acceso en el servicio de autenticación\n      this.authService.setAccessToken(token);\n      this.getMe();\n      this.getMyTracks();\n    } else {\n      this.logout();\n    }\n  }\n  getMe() {\n    var a = this.authService.getApi().getMe();\n    a.then(data => {\n      const elemento = document.getElementById('nombreCliente');\n      if (data.display_name) {\n        elemento.outerHTML = data.display_name;\n      } else {\n        elemento.outerHTML = data.id;\n      }\n    });\n  }\n  abrir(link) {\n    window.open(link, '_blank');\n  }\n  ponerFoto(link) {\n    const album = document.getElementById('fotoAlbum');\n    album.style.backgroundImage = `url('${link}')`;\n  }\n  getMyTracks() {\n    this.authService.getApi().getMyTopTracks({\n      time_range: `medium_term`,\n      limit: 10\n    }).then(response => {\n      this.ponerFoto(response.items[0].album.images[0].url);\n      for (let i = 0; i < response.items.length; i++) {\n        const cancion = document.getElementById(`cancion${i + 1}`);\n        cancion.innerHTML = `${i + 1}. ${response.items[i].name}`;\n        cancion.className = 'cursor';\n        cancion.addEventListener('click', () => {\n          this.abrir(response.items[i].uri);\n        });\n      }\n    }, err => {\n      this.logout();\n    });\n  }\n  logout() {\n    this.authService.logout();\n  }\n}\nDiskComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DiskComponent,\n  factory: DiskComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Component","Injectable","DiskComponent","constructor","authService","route","spotifyApi","getApi","ngOnInit","tieneError","snapshot","queryParams","undefined","token","fragment","split","find","includes","setAccessToken","getMe","getMyTracks","logout","a","then","data","elemento","document","getElementById","display_name","outerHTML","id","abrir","link","window","open","ponerFoto","album","style","backgroundImage","getMyTopTracks","time_range","limit","response","items","images","url","i","length","cancion","innerHTML","name","className","addEventListener","uri","err","factory","providedIn"],"sourceRoot":"","sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/src/app/disk/disk.component.ts"],"sourcesContent":["import {Component, Injectable, OnInit} from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { ActivatedRoute } from '@angular/router';\nimport { from } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n@Component({\n  selector: 'app-disk',\n  templateUrl: './disk.component.html',\n  styleUrls: ['./disk.component.css']\n})\nexport class DiskComponent implements OnInit{\n  private spotifyApi: SpotifyWebApi.SpotifyWebApiJs;\n  usuario: string | undefined = \"\";\n  private apiUrl = 'https://api.spotify.com/v1/me';\n  constructor(private authService: AuthService, private route: ActivatedRoute) {\n    this.spotifyApi = this.authService.getApi();\n  }\n  \n  ngOnInit(): void {\n    const tieneError = this.route.snapshot.queryParams['error'] !== undefined;\n    if(!tieneError){\n      // @ts-ignore\n      const token = this.route.snapshot.fragment.split('&')\n          .find(fragment => fragment.includes('access_token'))\n          .split('=')[1];\n      // Guardar el token de acceso en el servicio de autenticación\n      this.authService.setAccessToken(token);\n      this.getMe();\n      this.getMyTracks();\n    }\n    else{\n      this.logout();\n    }\n  }\n  \n  getMe(){\n   var a = this.authService.getApi().getMe()\n   a.then((data) =>{\n     const elemento = document.getElementById('nombreCliente') as HTMLInputElement\n     if(data.display_name){\n       elemento.outerHTML = data.display_name;\n     }\n     else{\n       elemento.outerHTML = data.id;\n     }\n    })\n  }\n  \n  abrir(link:string){\n    window.open(link, '_blank');\n  }\n  \n  ponerFoto(link:string){\n    const album = document.getElementById('fotoAlbum') as HTMLInputElement\n    album.style.backgroundImage = `url('${link}')`\n  }\n  getMyTracks(){\n    this.authService.getApi().getMyTopTracks({\n      time_range: `medium_term`,\n      limit:10,\n    }).then((response) => {\n      this.ponerFoto(response.items[0].album.images[0].url)\n      for (let i = 0; i < response.items.length; i++) {\n        const cancion = document.getElementById(`cancion${i+1}`) as HTMLInputElement\n        cancion.innerHTML = `${i+1}. ${response.items[i].name}`;\n        cancion.className = 'cursor';\n        cancion.addEventListener('click', () => {\n          this.abrir(response.items[i].uri);\n        });\n      }\n    }, (err) =>{\n      this.logout();\n    })\n  }\n  \n  logout(){\n    this.authService.logout()\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}