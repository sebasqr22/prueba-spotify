{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _connectToCDPBrowser } from './BrowserConnector.js';\nimport { customQueryHandlers } from './CustomQueryHandler.js';\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n *\n * @public\n */\nexport class Puppeteer {\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is only\n   * allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```\n   * puppeteer.registerCustomQueryHandler('text', { … });\n   * const aHandle = await page.$('text/…');\n   * ```\n   *\n   * @param name - The name that the custom query handler will be registered\n   * under.\n   * @param queryHandler - The {@link CustomQueryHandler | custom query handler}\n   * to register.\n   *\n   * @public\n   */\n  static registerCustomQueryHandler(name, queryHandler) {\n    return this.customQueryHandlers.register(name, queryHandler);\n  }\n  /**\n   * Unregisters a custom query handler for a given name.\n   */\n  static unregisterCustomQueryHandler(name) {\n    return this.customQueryHandlers.unregister(name);\n  }\n  /**\n   * Gets the names of all custom query handlers.\n   */\n  static customQueryHandlerNames() {\n    return this.customQueryHandlers.names();\n  }\n  /**\n   * Unregisters all custom query handlers.\n   */\n  static clearCustomQueryHandlers() {\n    return this.customQueryHandlers.clear();\n  }\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    /**\n     * @internal\n     */\n    this._changedProduct = false;\n    this._isPuppeteerCore = settings.isPuppeteerCore;\n    this.connect = this.connect.bind(this);\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @remarks\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return _connectToCDPBrowser(options);\n  }\n}\n/**\n * Operations for {@link CustomQueryHandler | custom query handlers}. See\n * {@link CustomQueryHandlerRegistry}.\n *\n * @internal\n */\nPuppeteer.customQueryHandlers = customQueryHandlers;","map":{"version":3,"names":["_connectToCDPBrowser","customQueryHandlers","Puppeteer","registerCustomQueryHandler","name","queryHandler","register","unregisterCustomQueryHandler","unregister","customQueryHandlerNames","names","clearCustomQueryHandlers","clear","constructor","settings","_changedProduct","_isPuppeteerCore","isPuppeteerCore","connect","bind","options"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Puppeteer.js"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _connectToCDPBrowser, } from './BrowserConnector.js';\nimport { customQueryHandlers } from './CustomQueryHandler.js';\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n *\n * @public\n */\nexport class Puppeteer {\n    /**\n     * Registers a {@link CustomQueryHandler | custom query handler}.\n     *\n     * @remarks\n     * After registration, the handler can be used everywhere where a selector is\n     * expected by prepending the selection string with `<name>/`. The name is only\n     * allowed to consist of lower- and upper case latin letters.\n     *\n     * @example\n     *\n     * ```\n     * puppeteer.registerCustomQueryHandler('text', { … });\n     * const aHandle = await page.$('text/…');\n     * ```\n     *\n     * @param name - The name that the custom query handler will be registered\n     * under.\n     * @param queryHandler - The {@link CustomQueryHandler | custom query handler}\n     * to register.\n     *\n     * @public\n     */\n    static registerCustomQueryHandler(name, queryHandler) {\n        return this.customQueryHandlers.register(name, queryHandler);\n    }\n    /**\n     * Unregisters a custom query handler for a given name.\n     */\n    static unregisterCustomQueryHandler(name) {\n        return this.customQueryHandlers.unregister(name);\n    }\n    /**\n     * Gets the names of all custom query handlers.\n     */\n    static customQueryHandlerNames() {\n        return this.customQueryHandlers.names();\n    }\n    /**\n     * Unregisters all custom query handlers.\n     */\n    static clearCustomQueryHandlers() {\n        return this.customQueryHandlers.clear();\n    }\n    /**\n     * @internal\n     */\n    constructor(settings) {\n        /**\n         * @internal\n         */\n        this._changedProduct = false;\n        this._isPuppeteerCore = settings.isPuppeteerCore;\n        this.connect = this.connect.bind(this);\n    }\n    /**\n     * This method attaches Puppeteer to an existing browser instance.\n     *\n     * @remarks\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    connect(options) {\n        return _connectToCDPBrowser(options);\n    }\n}\n/**\n * Operations for {@link CustomQueryHandler | custom query handlers}. See\n * {@link CustomQueryHandlerRegistry}.\n *\n * @internal\n */\nPuppeteer.customQueryHandlers = customQueryHandlers;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoB,QAAS,uBAAuB;AAC7D,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,0BAA0B,CAACC,IAAI,EAAEC,YAAY,EAAE;IAClD,OAAO,IAAI,CAACJ,mBAAmB,CAACK,QAAQ,CAACF,IAAI,EAAEC,YAAY,CAAC;EAChE;EACA;AACJ;AACA;EACI,OAAOE,4BAA4B,CAACH,IAAI,EAAE;IACtC,OAAO,IAAI,CAACH,mBAAmB,CAACO,UAAU,CAACJ,IAAI,CAAC;EACpD;EACA;AACJ;AACA;EACI,OAAOK,uBAAuB,GAAG;IAC7B,OAAO,IAAI,CAACR,mBAAmB,CAACS,KAAK,EAAE;EAC3C;EACA;AACJ;AACA;EACI,OAAOC,wBAAwB,GAAG;IAC9B,OAAO,IAAI,CAACV,mBAAmB,CAACW,KAAK,EAAE;EAC3C;EACA;AACJ;AACA;EACIC,WAAW,CAACC,QAAQ,EAAE;IAClB;AACR;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,gBAAgB,GAAGF,QAAQ,CAACG,eAAe;IAChD,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACID,OAAO,CAACE,OAAO,EAAE;IACb,OAAOpB,oBAAoB,CAACoB,OAAO,CAAC;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,SAAS,CAACD,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}