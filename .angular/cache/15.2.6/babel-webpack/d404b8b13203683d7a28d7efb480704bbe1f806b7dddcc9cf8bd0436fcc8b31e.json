{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport path from 'path';\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform } from './types.js';\nexport { resolveSystemExecutablePath } from './chrome.js';\nfunction archive(platform, buildId) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'chrome-linux';\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.MAC:\n      return 'chrome-mac';\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      // Windows archive name changed at r591479.\n      return parseInt(buildId, 10) > 591479 ? 'chrome-win' : 'chrome-win32';\n  }\n}\nfunction folder(platform) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'Linux_x64';\n    case BrowserPlatform.MAC_ARM:\n      return 'Mac_Arm';\n    case BrowserPlatform.MAC:\n      return 'Mac';\n    case BrowserPlatform.WIN32:\n      return 'Win';\n    case BrowserPlatform.WIN64:\n      return 'Win_x64';\n  }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://storage.googleapis.com/chromium-browser-snapshots') {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n  return [folder(platform), buildId, `${archive(platform, buildId)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n      return path.join('chrome-mac', 'Chromium.app', 'Contents', 'MacOS', 'Chromium');\n    case BrowserPlatform.LINUX:\n      return path.join('chrome-linux', 'chrome');\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return path.join('chrome-win', 'chrome.exe');\n  }\n}\nexport function resolveBuildId(_x) {\n  return _resolveBuildId.apply(this, arguments);\n}\nfunction _resolveBuildId() {\n  _resolveBuildId = _asyncToGenerator(function* (platform,\n  // We will need it for other channels/keywords.\n  _channel = 'latest') {\n    return new Promise((resolve, reject) => {\n      const request = httpRequest(new URL(`https://storage.googleapis.com/chromium-browser-snapshots/${folder(platform)}/LAST_CHANGE`), 'GET', response => {\n        let data = '';\n        if (response.statusCode && response.statusCode >= 400) {\n          return reject(new Error(`Got status code ${response.statusCode}`));\n        }\n        response.on('data', chunk => {\n          data += chunk;\n        });\n        response.on('end', () => {\n          try {\n            return resolve(String(data));\n          } catch {\n            return reject(new Error('Chrome version not found'));\n          }\n        });\n      }, false);\n      request.on('error', err => {\n        reject(err);\n      });\n    });\n  });\n  return _resolveBuildId.apply(this, arguments);\n}","map":{"version":3,"names":["path","httpRequest","BrowserPlatform","resolveSystemExecutablePath","archive","platform","buildId","LINUX","MAC_ARM","MAC","WIN32","WIN64","parseInt","folder","resolveDownloadUrl","baseUrl","resolveDownloadPath","join","relativeExecutablePath","_buildId","resolveBuildId","_channel","Promise","resolve","reject","request","URL","response","data","statusCode","Error","on","chunk","String","err"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@puppeteer/browsers/lib/esm/browser-data/chromium.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport path from 'path';\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform } from './types.js';\nexport { resolveSystemExecutablePath } from './chrome.js';\nfunction archive(platform, buildId) {\n    switch (platform) {\n        case BrowserPlatform.LINUX:\n            return 'chrome-linux';\n        case BrowserPlatform.MAC_ARM:\n        case BrowserPlatform.MAC:\n            return 'chrome-mac';\n        case BrowserPlatform.WIN32:\n        case BrowserPlatform.WIN64:\n            // Windows archive name changed at r591479.\n            return parseInt(buildId, 10) > 591479 ? 'chrome-win' : 'chrome-win32';\n    }\n}\nfunction folder(platform) {\n    switch (platform) {\n        case BrowserPlatform.LINUX:\n            return 'Linux_x64';\n        case BrowserPlatform.MAC_ARM:\n            return 'Mac_Arm';\n        case BrowserPlatform.MAC:\n            return 'Mac';\n        case BrowserPlatform.WIN32:\n            return 'Win';\n        case BrowserPlatform.WIN64:\n            return 'Win_x64';\n    }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://storage.googleapis.com/chromium-browser-snapshots') {\n    return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n    return [folder(platform), buildId, `${archive(platform, buildId)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n    switch (platform) {\n        case BrowserPlatform.MAC:\n        case BrowserPlatform.MAC_ARM:\n            return path.join('chrome-mac', 'Chromium.app', 'Contents', 'MacOS', 'Chromium');\n        case BrowserPlatform.LINUX:\n            return path.join('chrome-linux', 'chrome');\n        case BrowserPlatform.WIN32:\n        case BrowserPlatform.WIN64:\n            return path.join('chrome-win', 'chrome.exe');\n    }\n}\nexport async function resolveBuildId(platform, \n// We will need it for other channels/keywords.\n_channel = 'latest') {\n    return new Promise((resolve, reject) => {\n        const request = httpRequest(new URL(`https://storage.googleapis.com/chromium-browser-snapshots/${folder(platform)}/LAST_CHANGE`), 'GET', response => {\n            let data = '';\n            if (response.statusCode && response.statusCode >= 400) {\n                return reject(new Error(`Got status code ${response.statusCode}`));\n            }\n            response.on('data', chunk => {\n                data += chunk;\n            });\n            response.on('end', () => {\n                try {\n                    return resolve(String(data));\n                }\n                catch {\n                    return reject(new Error('Chrome version not found'));\n                }\n            });\n        }, false);\n        request.on('error', err => {\n            reject(err);\n        });\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}