{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Binding_name, _Binding_fn;\nimport { JSHandle } from '../api/JSHandle.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { debugError } from './util.js';\n/**\n * @internal\n */\nexport class Binding {\n  constructor(name, fn) {\n    _Binding_name.set(this, void 0);\n    _Binding_fn.set(this, void 0);\n    __classPrivateFieldSet(this, _Binding_name, name, \"f\");\n    __classPrivateFieldSet(this, _Binding_fn, fn, \"f\");\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _Binding_name, \"f\");\n  }\n  /**\n   * @param context - Context to run the binding in; the context should have\n   * the binding added to it beforehand.\n   * @param id - ID of the call. This should come from the CDP\n   * `onBindingCalled` response.\n   * @param args - Plain arguments from CDP.\n   */\n  run(context, id, args, isTrivial) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const garbage = [];\n      try {\n        if (!isTrivial) {\n          // Getting non-trivial arguments.\n          const handles = yield context.evaluateHandle((name, seq) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            return globalThis[name].args.get(seq);\n          }, __classPrivateFieldGet(_this, _Binding_name, \"f\"), id);\n          try {\n            const properties = yield handles.getProperties();\n            for (const [index, handle] of properties) {\n              // This is not straight-forward since some arguments can stringify, but\n              // aren't plain objects so add subtypes when the use-case arises.\n              if (index in args) {\n                switch (handle.remoteObject().subtype) {\n                  case 'node':\n                    args[+index] = handle;\n                    break;\n                  default:\n                    garbage.push(handle.dispose());\n                }\n              } else {\n                garbage.push(handle.dispose());\n              }\n            }\n          } finally {\n            yield handles.dispose();\n          }\n        }\n        yield context.evaluate((name, seq, result) => {\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).resolve(result);\n          callbacks.delete(seq);\n        }, __classPrivateFieldGet(_this, _Binding_name, \"f\"), id, yield __classPrivateFieldGet(_this, _Binding_fn, \"f\").call(_this, ...args));\n        for (const arg of args) {\n          if (arg instanceof JSHandle) {\n            garbage.push(arg.dispose());\n          }\n        }\n      } catch (error) {\n        if (isErrorLike(error)) {\n          yield context.evaluate((name, seq, message, stack) => {\n            const error = new Error(message);\n            error.stack = stack;\n            // @ts-expect-error Code is evaluated in a different context.\n            const callbacks = globalThis[name].callbacks;\n            callbacks.get(seq).reject(error);\n            callbacks.delete(seq);\n          }, __classPrivateFieldGet(_this, _Binding_name, \"f\"), id, error.message, error.stack).catch(debugError);\n        } else {\n          yield context.evaluate((name, seq, error) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            const callbacks = globalThis[name].callbacks;\n            callbacks.get(seq).reject(error);\n            callbacks.delete(seq);\n          }, __classPrivateFieldGet(_this, _Binding_name, \"f\"), id, error).catch(debugError);\n        }\n      } finally {\n        yield Promise.all(garbage);\n      }\n    })();\n  }\n}\n_Binding_name = new WeakMap(), _Binding_fn = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Binding_name","_Binding_fn","JSHandle","isErrorLike","debugError","Binding","constructor","name","fn","run","context","id","args","isTrivial","garbage","handles","evaluateHandle","seq","globalThis","properties","getProperties","index","handle","remoteObject","subtype","push","dispose","evaluate","result","callbacks","resolve","delete","arg","error","message","stack","Error","reject","catch","Promise","all","WeakMap"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Binding.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Binding_name, _Binding_fn;\nimport { JSHandle } from '../api/JSHandle.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { debugError } from './util.js';\n/**\n * @internal\n */\nexport class Binding {\n    constructor(name, fn) {\n        _Binding_name.set(this, void 0);\n        _Binding_fn.set(this, void 0);\n        __classPrivateFieldSet(this, _Binding_name, name, \"f\");\n        __classPrivateFieldSet(this, _Binding_fn, fn, \"f\");\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _Binding_name, \"f\");\n    }\n    /**\n     * @param context - Context to run the binding in; the context should have\n     * the binding added to it beforehand.\n     * @param id - ID of the call. This should come from the CDP\n     * `onBindingCalled` response.\n     * @param args - Plain arguments from CDP.\n     */\n    async run(context, id, args, isTrivial) {\n        const garbage = [];\n        try {\n            if (!isTrivial) {\n                // Getting non-trivial arguments.\n                const handles = await context.evaluateHandle((name, seq) => {\n                    // @ts-expect-error Code is evaluated in a different context.\n                    return globalThis[name].args.get(seq);\n                }, __classPrivateFieldGet(this, _Binding_name, \"f\"), id);\n                try {\n                    const properties = await handles.getProperties();\n                    for (const [index, handle] of properties) {\n                        // This is not straight-forward since some arguments can stringify, but\n                        // aren't plain objects so add subtypes when the use-case arises.\n                        if (index in args) {\n                            switch (handle.remoteObject().subtype) {\n                                case 'node':\n                                    args[+index] = handle;\n                                    break;\n                                default:\n                                    garbage.push(handle.dispose());\n                            }\n                        }\n                        else {\n                            garbage.push(handle.dispose());\n                        }\n                    }\n                }\n                finally {\n                    await handles.dispose();\n                }\n            }\n            await context.evaluate((name, seq, result) => {\n                // @ts-expect-error Code is evaluated in a different context.\n                const callbacks = globalThis[name].callbacks;\n                callbacks.get(seq).resolve(result);\n                callbacks.delete(seq);\n            }, __classPrivateFieldGet(this, _Binding_name, \"f\"), id, await __classPrivateFieldGet(this, _Binding_fn, \"f\").call(this, ...args));\n            for (const arg of args) {\n                if (arg instanceof JSHandle) {\n                    garbage.push(arg.dispose());\n                }\n            }\n        }\n        catch (error) {\n            if (isErrorLike(error)) {\n                await context\n                    .evaluate((name, seq, message, stack) => {\n                    const error = new Error(message);\n                    error.stack = stack;\n                    // @ts-expect-error Code is evaluated in a different context.\n                    const callbacks = globalThis[name].callbacks;\n                    callbacks.get(seq).reject(error);\n                    callbacks.delete(seq);\n                }, __classPrivateFieldGet(this, _Binding_name, \"f\"), id, error.message, error.stack)\n                    .catch(debugError);\n            }\n            else {\n                await context\n                    .evaluate((name, seq, error) => {\n                    // @ts-expect-error Code is evaluated in a different context.\n                    const callbacks = globalThis[name].callbacks;\n                    callbacks.get(seq).reject(error);\n                    callbacks.delete(seq);\n                }, __classPrivateFieldGet(this, _Binding_name, \"f\"), id, error)\n                    .catch(debugError);\n            }\n        }\n        finally {\n            await Promise.all(garbage);\n        }\n    }\n}\n_Binding_name = new WeakMap(), _Binding_fn = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}