{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport path from 'path';\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform, ChromeReleaseChannel } from './types.js';\nfunction folder(platform) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'linux64';\n    case BrowserPlatform.MAC_ARM:\n      return 'mac-arm64';\n    case BrowserPlatform.MAC:\n      return 'mac-x64';\n    case BrowserPlatform.WIN32:\n      return 'win32';\n    case BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\nfunction chromiumDashPlatform(platform) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'linux';\n    case BrowserPlatform.MAC_ARM:\n      return 'mac';\n    case BrowserPlatform.MAC:\n      return 'mac';\n    case BrowserPlatform.WIN32:\n      return 'win';\n    case BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing') {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n  return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n      return path.join('chrome-' + folder(platform), 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');\n    case BrowserPlatform.LINUX:\n      return path.join('chrome-linux64', 'chrome');\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return path.join('chrome-' + folder(platform), 'chrome.exe');\n  }\n}\nexport function resolveBuildId(_x) {\n  return _resolveBuildId.apply(this, arguments);\n}\nfunction _resolveBuildId() {\n  _resolveBuildId = _asyncToGenerator(function* (platform, channel = 'beta') {\n    return new Promise((resolve, reject) => {\n      const request = httpRequest(new URL(`https://chromiumdash.appspot.com/fetch_releases?platform=${chromiumDashPlatform(platform)}&channel=${channel}`), 'GET', response => {\n        let data = '';\n        if (response.statusCode && response.statusCode >= 400) {\n          return reject(new Error(`Got status code ${response.statusCode}`));\n        }\n        response.on('data', chunk => {\n          data += chunk;\n        });\n        response.on('end', () => {\n          try {\n            const response = JSON.parse(String(data));\n            return resolve(response[0].version);\n          } catch {\n            return reject(new Error('Chrome version not found'));\n          }\n        });\n      }, false);\n      request.on('error', err => {\n        reject(err);\n      });\n    });\n  });\n  return _resolveBuildId.apply(this, arguments);\n}\nexport function resolveSystemExecutablePath(platform, channel) {\n  switch (platform) {\n    case BrowserPlatform.WIN64:\n    case BrowserPlatform.WIN32:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.BETA:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.CANARY:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.DEV:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n      }\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.MAC:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n        case ChromeReleaseChannel.CANARY:\n          return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n        case ChromeReleaseChannel.DEV:\n          return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n      }\n    case BrowserPlatform.LINUX:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/opt/google/chrome/chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/opt/google/chrome-beta/chrome';\n        case ChromeReleaseChannel.DEV:\n          return '/opt/google/chrome-unstable/chrome';\n      }\n  }\n  throw new Error(`Unable to detect browser executable path for '${channel}' on ${platform}.`);\n}","map":{"version":3,"names":["path","httpRequest","BrowserPlatform","ChromeReleaseChannel","folder","platform","LINUX","MAC_ARM","MAC","WIN32","WIN64","chromiumDashPlatform","resolveDownloadUrl","buildId","baseUrl","resolveDownloadPath","join","relativeExecutablePath","_buildId","resolveBuildId","channel","Promise","resolve","reject","request","URL","response","data","statusCode","Error","on","chunk","JSON","parse","String","version","err","resolveSystemExecutablePath","STABLE","process","env","BETA","CANARY","DEV"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@puppeteer/browsers/lib/esm/browser-data/chrome.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport path from 'path';\nimport { httpRequest } from '../httpUtil.js';\nimport { BrowserPlatform, ChromeReleaseChannel } from './types.js';\nfunction folder(platform) {\n    switch (platform) {\n        case BrowserPlatform.LINUX:\n            return 'linux64';\n        case BrowserPlatform.MAC_ARM:\n            return 'mac-arm64';\n        case BrowserPlatform.MAC:\n            return 'mac-x64';\n        case BrowserPlatform.WIN32:\n            return 'win32';\n        case BrowserPlatform.WIN64:\n            return 'win64';\n    }\n}\nfunction chromiumDashPlatform(platform) {\n    switch (platform) {\n        case BrowserPlatform.LINUX:\n            return 'linux';\n        case BrowserPlatform.MAC_ARM:\n            return 'mac';\n        case BrowserPlatform.MAC:\n            return 'mac';\n        case BrowserPlatform.WIN32:\n            return 'win';\n        case BrowserPlatform.WIN64:\n            return 'win64';\n    }\n}\nexport function resolveDownloadUrl(platform, buildId, baseUrl = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing') {\n    return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n    return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n    switch (platform) {\n        case BrowserPlatform.MAC:\n        case BrowserPlatform.MAC_ARM:\n            return path.join('chrome-' + folder(platform), 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');\n        case BrowserPlatform.LINUX:\n            return path.join('chrome-linux64', 'chrome');\n        case BrowserPlatform.WIN32:\n        case BrowserPlatform.WIN64:\n            return path.join('chrome-' + folder(platform), 'chrome.exe');\n    }\n}\nexport async function resolveBuildId(platform, channel = 'beta') {\n    return new Promise((resolve, reject) => {\n        const request = httpRequest(new URL(`https://chromiumdash.appspot.com/fetch_releases?platform=${chromiumDashPlatform(platform)}&channel=${channel}`), 'GET', response => {\n            let data = '';\n            if (response.statusCode && response.statusCode >= 400) {\n                return reject(new Error(`Got status code ${response.statusCode}`));\n            }\n            response.on('data', chunk => {\n                data += chunk;\n            });\n            response.on('end', () => {\n                try {\n                    const response = JSON.parse(String(data));\n                    return resolve(response[0].version);\n                }\n                catch {\n                    return reject(new Error('Chrome version not found'));\n                }\n            });\n        }, false);\n        request.on('error', err => {\n            reject(err);\n        });\n    });\n}\nexport function resolveSystemExecutablePath(platform, channel) {\n    switch (platform) {\n        case BrowserPlatform.WIN64:\n        case BrowserPlatform.WIN32:\n            switch (channel) {\n                case ChromeReleaseChannel.STABLE:\n                    return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n                case ChromeReleaseChannel.BETA:\n                    return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n                case ChromeReleaseChannel.CANARY:\n                    return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n                case ChromeReleaseChannel.DEV:\n                    return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n            }\n        case BrowserPlatform.MAC_ARM:\n        case BrowserPlatform.MAC:\n            switch (channel) {\n                case ChromeReleaseChannel.STABLE:\n                    return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n                case ChromeReleaseChannel.BETA:\n                    return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n                case ChromeReleaseChannel.CANARY:\n                    return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n                case ChromeReleaseChannel.DEV:\n                    return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n            }\n        case BrowserPlatform.LINUX:\n            switch (channel) {\n                case ChromeReleaseChannel.STABLE:\n                    return '/opt/google/chrome/chrome';\n                case ChromeReleaseChannel.BETA:\n                    return '/opt/google/chrome-beta/chrome';\n                case ChromeReleaseChannel.DEV:\n                    return '/opt/google/chrome-unstable/chrome';\n            }\n    }\n    throw new Error(`Unable to detect browser executable path for '${channel}' on ${platform}.`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}