{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChromeTargetManager_instances, _ChromeTargetManager_connection, _ChromeTargetManager_discoveredTargetsByTargetId, _ChromeTargetManager_attachedTargetsByTargetId, _ChromeTargetManager_attachedTargetsBySessionId, _ChromeTargetManager_ignoredTargets, _ChromeTargetManager_targetFilterCallback, _ChromeTargetManager_targetFactory, _ChromeTargetManager_targetInterceptors, _ChromeTargetManager_attachedToTargetListenersBySession, _ChromeTargetManager_detachedFromTargetListenersBySession, _ChromeTargetManager_initializeCallback, _ChromeTargetManager_initializePromise, _ChromeTargetManager_targetsIdsForInit, _ChromeTargetManager_storeExistingTargetsForInit, _ChromeTargetManager_setupAttachmentListeners, _ChromeTargetManager_removeAttachmentListeners, _ChromeTargetManager_onSessionDetached, _ChromeTargetManager_onTargetCreated, _ChromeTargetManager_onTargetDestroyed, _ChromeTargetManager_onTargetInfoChanged, _ChromeTargetManager_onAttachedToTarget, _ChromeTargetManager_finishInitializationIfReady, _ChromeTargetManager_onDetachedFromTarget;\nimport { assert } from '../util/assert.js';\nimport { Connection } from './Connection.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { debugError } from './util.js';\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager extends EventEmitter {\n  constructor(connection, targetFactory, targetFilterCallback) {\n    var _this;\n    super();\n    _this = this;\n    _ChromeTargetManager_instances.add(this);\n    _ChromeTargetManager_connection.set(this, void 0);\n    /**\n     * Keeps track of the following events: 'Target.targetCreated',\n     * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n     *\n     * A target becomes discovered when 'Target.targetCreated' is received.\n     * A target is removed from this map once 'Target.targetDestroyed' is\n     * received.\n     *\n     * `targetFilterCallback` has no effect on this map.\n     */\n    _ChromeTargetManager_discoveredTargetsByTargetId.set(this, new Map());\n    /**\n     * A target is added to this map once ChromeTargetManager has created\n     * a Target and attached at least once to it.\n     */\n    _ChromeTargetManager_attachedTargetsByTargetId.set(this, new Map());\n    /**\n     * Tracks which sessions attach to which target.\n     */\n    _ChromeTargetManager_attachedTargetsBySessionId.set(this, new Map());\n    /**\n     * If a target was filtered out by `targetFilterCallback`, we still receive\n     * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n     */\n    _ChromeTargetManager_ignoredTargets.set(this, new Set());\n    _ChromeTargetManager_targetFilterCallback.set(this, void 0);\n    _ChromeTargetManager_targetFactory.set(this, void 0);\n    _ChromeTargetManager_targetInterceptors.set(this, new WeakMap());\n    _ChromeTargetManager_attachedToTargetListenersBySession.set(this, new WeakMap());\n    _ChromeTargetManager_detachedFromTargetListenersBySession.set(this, new WeakMap());\n    _ChromeTargetManager_initializeCallback.set(this, () => {});\n    _ChromeTargetManager_initializePromise.set(this, new Promise(resolve => {\n      __classPrivateFieldSet(this, _ChromeTargetManager_initializeCallback, resolve, \"f\");\n    }));\n    _ChromeTargetManager_targetsIdsForInit.set(this, new Set());\n    _ChromeTargetManager_storeExistingTargetsForInit.set(this, () => {\n      for (const [targetId, targetInfo] of __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").entries()) {\n        if ((!__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\") || __classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\").call(this, targetInfo)) && targetInfo.type !== 'browser') {\n          __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").add(targetId);\n        }\n      }\n    });\n    _ChromeTargetManager_onSessionDetached.set(this, session => {\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, session);\n      __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").delete(session);\n    });\n    _ChromeTargetManager_onTargetCreated.set(this, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        __classPrivateFieldGet(_this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n        _this.emit(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, event.targetInfo);\n        // The connection is already attached to the browser target implicitly,\n        // therefore, no new CDPSession is created and we have special handling\n        // here.\n        if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n          if (__classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId)) {\n            return;\n          }\n          const target = __classPrivateFieldGet(_this, _ChromeTargetManager_targetFactory, \"f\").call(_this, event.targetInfo, undefined);\n          __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(event.targetInfo.targetId, target);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _ChromeTargetManager_onTargetDestroyed.set(this, event => {\n      const targetInfo = __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").get(event.targetId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").delete(event.targetId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, event.targetId);\n      if ((targetInfo === null || targetInfo === void 0 ? void 0 : targetInfo.type) === 'service_worker' && __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetId)) {\n        // Special case for service workers: report TargetGone event when\n        // the worker is destroyed.\n        const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetId);\n        this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(event.targetId);\n      }\n    });\n    _ChromeTargetManager_onTargetInfoChanged.set(this, event => {\n      __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n      if (__classPrivateFieldGet(this, _ChromeTargetManager_ignoredTargets, \"f\").has(event.targetInfo.targetId) || !__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId) || !event.targetInfo.attached) {\n        return;\n      }\n      const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetInfo.targetId);\n      this.emit(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, {\n        target: target,\n        targetInfo: event.targetInfo\n      });\n    });\n    _ChromeTargetManager_onAttachedToTarget.set(this, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (parentSession, event) {\n        const targetInfo = event.targetInfo;\n        const session = __classPrivateFieldGet(_this, _ChromeTargetManager_connection, \"f\").session(event.sessionId);\n        if (!session) {\n          throw new Error(`Session ${event.sessionId} was not created.`);\n        }\n        const silentDetach = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* () {\n            yield session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n            // We don't use `session.detach()` because that dispatches all commands on\n            // the connection instead of the parent session.\n            yield parentSession.send('Target.detachFromTarget', {\n              sessionId: session.id()\n            }).catch(debugError);\n          });\n          return function silentDetach() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n        if (!__classPrivateFieldGet(_this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n          return;\n        }\n        // Special case for service workers: being attached to service workers will\n        // prevent them from ever being destroyed. Therefore, we silently detach\n        // from service workers unless the connection was manually created via\n        // `page.worker()`. To determine this, we use\n        // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n        // should determine if a target is auto-attached or not with the help of\n        // CDP.\n        if (targetInfo.type === 'service_worker' && __classPrivateFieldGet(_this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n          __classPrivateFieldGet(_this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(_this, targetInfo.targetId);\n          yield silentDetach();\n          if (__classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId)) {\n            return;\n          }\n          const target = __classPrivateFieldGet(_this, _ChromeTargetManager_targetFactory, \"f\").call(_this, targetInfo);\n          __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n          _this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n          return;\n        }\n        if (__classPrivateFieldGet(_this, _ChromeTargetManager_targetFilterCallback, \"f\") && !__classPrivateFieldGet(_this, _ChromeTargetManager_targetFilterCallback, \"f\").call(_this, targetInfo)) {\n          __classPrivateFieldGet(_this, _ChromeTargetManager_ignoredTargets, \"f\").add(targetInfo.targetId);\n          __classPrivateFieldGet(_this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(_this, targetInfo.targetId);\n          yield silentDetach();\n          return;\n        }\n        const existingTarget = __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId);\n        const target = existingTarget ? __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId) : __classPrivateFieldGet(_this, _ChromeTargetManager_targetFactory, \"f\").call(_this, targetInfo, session);\n        __classPrivateFieldGet(_this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(_this, session);\n        if (existingTarget) {\n          __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId));\n        } else {\n          __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n          __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), target);\n        }\n        for (const interceptor of __classPrivateFieldGet(_this, _ChromeTargetManager_targetInterceptors, \"f\").get(parentSession) || []) {\n          if (!(parentSession instanceof Connection)) {\n            // Sanity check: if parent session is not a connection, it should be\n            // present in #attachedTargetsBySessionId.\n            assert(__classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").has(parentSession.id()));\n          }\n          interceptor(target, parentSession instanceof Connection ? null : __classPrivateFieldGet(_this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(parentSession.id()));\n        }\n        __classPrivateFieldGet(_this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(target._targetId);\n        if (!existingTarget) {\n          _this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n        }\n        __classPrivateFieldGet(_this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(_this);\n        // TODO: the browser might be shutting down here. What do we do with the\n        // error?\n        yield Promise.all([session.send('Target.setAutoAttach', {\n          waitForDebuggerOnStart: true,\n          flatten: true,\n          autoAttach: true\n        }), session.send('Runtime.runIfWaitingForDebugger')]).catch(debugError);\n      });\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _ChromeTargetManager_onDetachedFromTarget.set(this, (_parentSession, event) => {\n      const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(event.sessionId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").delete(event.sessionId);\n      if (!target) {\n        return;\n      }\n      __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(target._targetId);\n      this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n    });\n    __classPrivateFieldSet(this, _ChromeTargetManager_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _ChromeTargetManager_targetFilterCallback, targetFilterCallback, \"f\");\n    __classPrivateFieldSet(this, _ChromeTargetManager_targetFactory, targetFactory, \"f\");\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{\n        type: 'tab',\n        exclude: true\n      }, {}]\n    }).then(__classPrivateFieldGet(this, _ChromeTargetManager_storeExistingTargetsForInit, \"f\")).catch(debugError);\n  }\n  initialize() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this2, _ChromeTargetManager_connection, \"f\").send('Target.setAutoAttach', {\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        autoAttach: true\n      });\n      __classPrivateFieldGet(_this2, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(_this2);\n      yield __classPrivateFieldGet(_this2, _ChromeTargetManager_initializePromise, \"f\");\n    })();\n  }\n  dispose() {\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n  }\n  getAvailableTargets() {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\");\n  }\n  addTargetInterceptor(session, interceptor) {\n    const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(session) || [];\n    interceptors.push(interceptor);\n    __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(session, interceptors);\n  }\n  removeTargetInterceptor(client, interceptor) {\n    const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(client) || [];\n    __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(client, interceptors.filter(currentInterceptor => {\n      return currentInterceptor !== interceptor;\n    }));\n  }\n}\n_ChromeTargetManager_connection = new WeakMap(), _ChromeTargetManager_discoveredTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsBySessionId = new WeakMap(), _ChromeTargetManager_ignoredTargets = new WeakMap(), _ChromeTargetManager_targetFilterCallback = new WeakMap(), _ChromeTargetManager_targetFactory = new WeakMap(), _ChromeTargetManager_targetInterceptors = new WeakMap(), _ChromeTargetManager_attachedToTargetListenersBySession = new WeakMap(), _ChromeTargetManager_detachedFromTargetListenersBySession = new WeakMap(), _ChromeTargetManager_initializeCallback = new WeakMap(), _ChromeTargetManager_initializePromise = new WeakMap(), _ChromeTargetManager_targetsIdsForInit = new WeakMap(), _ChromeTargetManager_storeExistingTargetsForInit = new WeakMap(), _ChromeTargetManager_onSessionDetached = new WeakMap(), _ChromeTargetManager_onTargetCreated = new WeakMap(), _ChromeTargetManager_onTargetDestroyed = new WeakMap(), _ChromeTargetManager_onTargetInfoChanged = new WeakMap(), _ChromeTargetManager_onAttachedToTarget = new WeakMap(), _ChromeTargetManager_onDetachedFromTarget = new WeakMap(), _ChromeTargetManager_instances = new WeakSet(), _ChromeTargetManager_setupAttachmentListeners = function _ChromeTargetManager_setupAttachmentListeners(session) {\n  const listener = event => {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_onAttachedToTarget, \"f\").call(this, session, event);\n  };\n  assert(!__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session));\n  __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").set(session, listener);\n  session.on('Target.attachedToTarget', listener);\n  const detachedListener = event => {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_onDetachedFromTarget, \"f\").call(this, session, event);\n  };\n  assert(!__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session));\n  __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").set(session, detachedListener);\n  session.on('Target.detachedFromTarget', detachedListener);\n}, _ChromeTargetManager_removeAttachmentListeners = function _ChromeTargetManager_removeAttachmentListeners(session) {\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session)) {\n    session.off('Target.attachedToTarget', __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").get(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").delete(session);\n  }\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session)) {\n    session.off('Target.detachedFromTarget', __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").get(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").delete(session);\n  }\n}, _ChromeTargetManager_finishInitializationIfReady = function _ChromeTargetManager_finishInitializationIfReady(targetId) {\n  targetId !== undefined && __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(targetId);\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").size === 0) {\n    __classPrivateFieldGet(this, _ChromeTargetManager_initializeCallback, \"f\").call(this);\n  }\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_ChromeTargetManager_instances","_ChromeTargetManager_connection","_ChromeTargetManager_discoveredTargetsByTargetId","_ChromeTargetManager_attachedTargetsByTargetId","_ChromeTargetManager_attachedTargetsBySessionId","_ChromeTargetManager_ignoredTargets","_ChromeTargetManager_targetFilterCallback","_ChromeTargetManager_targetFactory","_ChromeTargetManager_targetInterceptors","_ChromeTargetManager_attachedToTargetListenersBySession","_ChromeTargetManager_detachedFromTargetListenersBySession","_ChromeTargetManager_initializeCallback","_ChromeTargetManager_initializePromise","_ChromeTargetManager_targetsIdsForInit","_ChromeTargetManager_storeExistingTargetsForInit","_ChromeTargetManager_setupAttachmentListeners","_ChromeTargetManager_removeAttachmentListeners","_ChromeTargetManager_onSessionDetached","_ChromeTargetManager_onTargetCreated","_ChromeTargetManager_onTargetDestroyed","_ChromeTargetManager_onTargetInfoChanged","_ChromeTargetManager_onAttachedToTarget","_ChromeTargetManager_finishInitializationIfReady","_ChromeTargetManager_onDetachedFromTarget","assert","Connection","EventEmitter","debugError","ChromeTargetManager","constructor","connection","targetFactory","targetFilterCallback","add","Map","Set","WeakMap","Promise","resolve","targetId","targetInfo","entries","type","session","delete","event","emit","attached","target","undefined","parentSession","sessionId","Error","silentDetach","send","catch","id","isAutoAttached","existingTarget","interceptor","_targetId","all","waitForDebuggerOnStart","flatten","autoAttach","_parentSession","on","discover","filter","exclude","then","initialize","dispose","off","getAvailableTargets","addTargetInterceptor","interceptors","push","removeTargetInterceptor","client","currentInterceptor","WeakSet","listener","detachedListener","size"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/ChromeTargetManager.js"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChromeTargetManager_instances, _ChromeTargetManager_connection, _ChromeTargetManager_discoveredTargetsByTargetId, _ChromeTargetManager_attachedTargetsByTargetId, _ChromeTargetManager_attachedTargetsBySessionId, _ChromeTargetManager_ignoredTargets, _ChromeTargetManager_targetFilterCallback, _ChromeTargetManager_targetFactory, _ChromeTargetManager_targetInterceptors, _ChromeTargetManager_attachedToTargetListenersBySession, _ChromeTargetManager_detachedFromTargetListenersBySession, _ChromeTargetManager_initializeCallback, _ChromeTargetManager_initializePromise, _ChromeTargetManager_targetsIdsForInit, _ChromeTargetManager_storeExistingTargetsForInit, _ChromeTargetManager_setupAttachmentListeners, _ChromeTargetManager_removeAttachmentListeners, _ChromeTargetManager_onSessionDetached, _ChromeTargetManager_onTargetCreated, _ChromeTargetManager_onTargetDestroyed, _ChromeTargetManager_onTargetInfoChanged, _ChromeTargetManager_onAttachedToTarget, _ChromeTargetManager_finishInitializationIfReady, _ChromeTargetManager_onDetachedFromTarget;\nimport { assert } from '../util/assert.js';\nimport { Connection } from './Connection.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { debugError } from './util.js';\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager extends EventEmitter {\n    constructor(connection, targetFactory, targetFilterCallback) {\n        super();\n        _ChromeTargetManager_instances.add(this);\n        _ChromeTargetManager_connection.set(this, void 0);\n        /**\n         * Keeps track of the following events: 'Target.targetCreated',\n         * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n         *\n         * A target becomes discovered when 'Target.targetCreated' is received.\n         * A target is removed from this map once 'Target.targetDestroyed' is\n         * received.\n         *\n         * `targetFilterCallback` has no effect on this map.\n         */\n        _ChromeTargetManager_discoveredTargetsByTargetId.set(this, new Map());\n        /**\n         * A target is added to this map once ChromeTargetManager has created\n         * a Target and attached at least once to it.\n         */\n        _ChromeTargetManager_attachedTargetsByTargetId.set(this, new Map());\n        /**\n         * Tracks which sessions attach to which target.\n         */\n        _ChromeTargetManager_attachedTargetsBySessionId.set(this, new Map());\n        /**\n         * If a target was filtered out by `targetFilterCallback`, we still receive\n         * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n         */\n        _ChromeTargetManager_ignoredTargets.set(this, new Set());\n        _ChromeTargetManager_targetFilterCallback.set(this, void 0);\n        _ChromeTargetManager_targetFactory.set(this, void 0);\n        _ChromeTargetManager_targetInterceptors.set(this, new WeakMap());\n        _ChromeTargetManager_attachedToTargetListenersBySession.set(this, new WeakMap());\n        _ChromeTargetManager_detachedFromTargetListenersBySession.set(this, new WeakMap());\n        _ChromeTargetManager_initializeCallback.set(this, () => { });\n        _ChromeTargetManager_initializePromise.set(this, new Promise(resolve => {\n            __classPrivateFieldSet(this, _ChromeTargetManager_initializeCallback, resolve, \"f\");\n        }));\n        _ChromeTargetManager_targetsIdsForInit.set(this, new Set());\n        _ChromeTargetManager_storeExistingTargetsForInit.set(this, () => {\n            for (const [targetId, targetInfo,] of __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").entries()) {\n                if ((!__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\") ||\n                    __classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\").call(this, targetInfo)) &&\n                    targetInfo.type !== 'browser') {\n                    __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").add(targetId);\n                }\n            }\n        });\n        _ChromeTargetManager_onSessionDetached.set(this, (session) => {\n            __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, session);\n            __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").delete(session);\n        });\n        _ChromeTargetManager_onTargetCreated.set(this, async (event) => {\n            __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n            this.emit(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, event.targetInfo);\n            // The connection is already attached to the browser target implicitly,\n            // therefore, no new CDPSession is created and we have special handling\n            // here.\n            if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n                if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId)) {\n                    return;\n                }\n                const target = __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, event.targetInfo, undefined);\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(event.targetInfo.targetId, target);\n            }\n        });\n        _ChromeTargetManager_onTargetDestroyed.set(this, (event) => {\n            const targetInfo = __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").get(event.targetId);\n            __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").delete(event.targetId);\n            __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, event.targetId);\n            if ((targetInfo === null || targetInfo === void 0 ? void 0 : targetInfo.type) === 'service_worker' &&\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetId)) {\n                // Special case for service workers: report TargetGone event when\n                // the worker is destroyed.\n                const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetId);\n                this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(event.targetId);\n            }\n        });\n        _ChromeTargetManager_onTargetInfoChanged.set(this, (event) => {\n            __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n            if (__classPrivateFieldGet(this, _ChromeTargetManager_ignoredTargets, \"f\").has(event.targetInfo.targetId) ||\n                !__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId) ||\n                !event.targetInfo.attached) {\n                return;\n            }\n            const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetInfo.targetId);\n            this.emit(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, {\n                target: target,\n                targetInfo: event.targetInfo,\n            });\n        });\n        _ChromeTargetManager_onAttachedToTarget.set(this, async (parentSession, event) => {\n            const targetInfo = event.targetInfo;\n            const session = __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").session(event.sessionId);\n            if (!session) {\n                throw new Error(`Session ${event.sessionId} was not created.`);\n            }\n            const silentDetach = async () => {\n                await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n                // We don't use `session.detach()` because that dispatches all commands on\n                // the connection instead of the parent session.\n                await parentSession\n                    .send('Target.detachFromTarget', {\n                    sessionId: session.id(),\n                })\n                    .catch(debugError);\n            };\n            if (!__classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n                return;\n            }\n            // Special case for service workers: being attached to service workers will\n            // prevent them from ever being destroyed. Therefore, we silently detach\n            // from service workers unless the connection was manually created via\n            // `page.worker()`. To determine this, we use\n            // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n            // should determine if a target is auto-attached or not with the help of\n            // CDP.\n            if (targetInfo.type === 'service_worker' &&\n                __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n                __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, targetInfo.targetId);\n                await silentDetach();\n                if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId)) {\n                    return;\n                }\n                const target = __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, targetInfo);\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n                this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n                return;\n            }\n            if (__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\") && !__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\").call(this, targetInfo)) {\n                __classPrivateFieldGet(this, _ChromeTargetManager_ignoredTargets, \"f\").add(targetInfo.targetId);\n                __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, targetInfo.targetId);\n                await silentDetach();\n                return;\n            }\n            const existingTarget = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId);\n            const target = existingTarget\n                ? __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId)\n                : __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, targetInfo, session);\n            __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(this, session);\n            if (existingTarget) {\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId));\n            }\n            else {\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n                __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), target);\n            }\n            for (const interceptor of __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(parentSession) ||\n                []) {\n                if (!(parentSession instanceof Connection)) {\n                    // Sanity check: if parent session is not a connection, it should be\n                    // present in #attachedTargetsBySessionId.\n                    assert(__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").has(parentSession.id()));\n                }\n                interceptor(target, parentSession instanceof Connection\n                    ? null\n                    : __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(parentSession.id()));\n            }\n            __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(target._targetId);\n            if (!existingTarget) {\n                this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n            }\n            __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this);\n            // TODO: the browser might be shutting down here. What do we do with the\n            // error?\n            await Promise.all([\n                session.send('Target.setAutoAttach', {\n                    waitForDebuggerOnStart: true,\n                    flatten: true,\n                    autoAttach: true,\n                }),\n                session.send('Runtime.runIfWaitingForDebugger'),\n            ]).catch(debugError);\n        });\n        _ChromeTargetManager_onDetachedFromTarget.set(this, (_parentSession, event) => {\n            const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(event.sessionId);\n            __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").delete(event.sessionId);\n            if (!target) {\n                return;\n            }\n            __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(target._targetId);\n            this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n        });\n        __classPrivateFieldSet(this, _ChromeTargetManager_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _ChromeTargetManager_targetFilterCallback, targetFilterCallback, \"f\");\n        __classPrivateFieldSet(this, _ChromeTargetManager_targetFactory, targetFactory, \"f\");\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\")\n            .send('Target.setDiscoverTargets', {\n            discover: true,\n            filter: [{ type: 'tab', exclude: true }, {}],\n        })\n            .then(__classPrivateFieldGet(this, _ChromeTargetManager_storeExistingTargetsForInit, \"f\"))\n            .catch(debugError);\n    }\n    async initialize() {\n        await __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").send('Target.setAutoAttach', {\n            waitForDebuggerOnStart: true,\n            flatten: true,\n            autoAttach: true,\n        });\n        __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this);\n        await __classPrivateFieldGet(this, _ChromeTargetManager_initializePromise, \"f\");\n    }\n    dispose() {\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n        __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n    }\n    getAvailableTargets() {\n        return __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\");\n    }\n    addTargetInterceptor(session, interceptor) {\n        const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(session) || [];\n        interceptors.push(interceptor);\n        __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(session, interceptors);\n    }\n    removeTargetInterceptor(client, interceptor) {\n        const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(client) || [];\n        __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(client, interceptors.filter(currentInterceptor => {\n            return currentInterceptor !== interceptor;\n        }));\n    }\n}\n_ChromeTargetManager_connection = new WeakMap(), _ChromeTargetManager_discoveredTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsBySessionId = new WeakMap(), _ChromeTargetManager_ignoredTargets = new WeakMap(), _ChromeTargetManager_targetFilterCallback = new WeakMap(), _ChromeTargetManager_targetFactory = new WeakMap(), _ChromeTargetManager_targetInterceptors = new WeakMap(), _ChromeTargetManager_attachedToTargetListenersBySession = new WeakMap(), _ChromeTargetManager_detachedFromTargetListenersBySession = new WeakMap(), _ChromeTargetManager_initializeCallback = new WeakMap(), _ChromeTargetManager_initializePromise = new WeakMap(), _ChromeTargetManager_targetsIdsForInit = new WeakMap(), _ChromeTargetManager_storeExistingTargetsForInit = new WeakMap(), _ChromeTargetManager_onSessionDetached = new WeakMap(), _ChromeTargetManager_onTargetCreated = new WeakMap(), _ChromeTargetManager_onTargetDestroyed = new WeakMap(), _ChromeTargetManager_onTargetInfoChanged = new WeakMap(), _ChromeTargetManager_onAttachedToTarget = new WeakMap(), _ChromeTargetManager_onDetachedFromTarget = new WeakMap(), _ChromeTargetManager_instances = new WeakSet(), _ChromeTargetManager_setupAttachmentListeners = function _ChromeTargetManager_setupAttachmentListeners(session) {\n    const listener = (event) => {\n        return __classPrivateFieldGet(this, _ChromeTargetManager_onAttachedToTarget, \"f\").call(this, session, event);\n    };\n    assert(!__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n    const detachedListener = (event) => {\n        return __classPrivateFieldGet(this, _ChromeTargetManager_onDetachedFromTarget, \"f\").call(this, session, event);\n    };\n    assert(!__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").set(session, detachedListener);\n    session.on('Target.detachedFromTarget', detachedListener);\n}, _ChromeTargetManager_removeAttachmentListeners = function _ChromeTargetManager_removeAttachmentListeners(session) {\n    if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session)) {\n        session.off('Target.attachedToTarget', __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").get(session));\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").delete(session);\n    }\n    if (__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session)) {\n        session.off('Target.detachedFromTarget', __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").get(session));\n        __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").delete(session);\n    }\n}, _ChromeTargetManager_finishInitializationIfReady = function _ChromeTargetManager_finishInitializationIfReady(targetId) {\n    targetId !== undefined && __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(targetId);\n    if (__classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").size === 0) {\n        __classPrivateFieldGet(this, _ChromeTargetManager_initializeCallback, \"f\").call(this);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}