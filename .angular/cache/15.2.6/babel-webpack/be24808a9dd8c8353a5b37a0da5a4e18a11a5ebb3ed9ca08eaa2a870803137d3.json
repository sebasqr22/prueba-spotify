{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerBase = void 0;\nexports.getExtensionDescription = getExtensionDescription;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _getPropertyByPath = require(\"./getPropertyByPath\");\nvar _loaders = require(\"./loaders\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass ExplorerBase {\n  constructor(options) {\n    if (options.cache) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n    this.config = options;\n    this.validateConfig();\n  }\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n  validateConfig() {\n    const config = this.config;\n    config.searchPlaces.forEach(place => {\n      const loaderKey = _path.default.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n      if (!loader) {\n        throw new Error(`No loader specified for ${getExtensionDescription(place)}, so searchPlaces item \"${place}\" is invalid`);\n      }\n      if (typeof loader !== 'function') {\n        throw new Error(`loader for ${getExtensionDescription(place)} is not a function (type provided: \"${typeof loader}\"), so searchPlaces item \"${place}\" is invalid`);\n      }\n    });\n  }\n  shouldSearchStopWithResult(result) {\n    if (result === null) return false;\n    return !(result.isEmpty && this.config.ignoreEmptySearchPlaces);\n  }\n  nextDirectoryToSearch(currentDir, currentResult) {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n    const nextDir = nextDirUp(currentDir);\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n    return nextDir;\n  }\n  loadPackageProp(filepath, content) {\n    const parsedContent = _loaders.loaders.loadJson(filepath, content);\n    const packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(parsedContent, this.config.packageProp);\n    return packagePropValue || null;\n  }\n  getLoaderEntryForFile(filepath) {\n    if (_path.default.basename(filepath) === 'package.json') {\n      return this.loadPackageProp.bind(this);\n    }\n    const loaderKey = _path.default.extname(filepath) || 'noExt';\n    const loader = this.config.loaders[loaderKey];\n    if (!loader) {\n      throw new Error(`No loader specified for ${getExtensionDescription(filepath)}`);\n    }\n    return loader;\n  }\n  loadedContentToCosmiconfigResult(filepath, loadedContent, forceProp) {\n    if (loadedContent === null) {\n      return null;\n    }\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n    if (this.config.usePackagePropInConfigFiles || forceProp) {\n      loadedContent = (0, _getPropertyByPath.getPropertyByPath)(loadedContent, this.config.packageProp);\n    }\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n    return {\n      config: loadedContent,\n      filepath\n    };\n  }\n  validateFilePath(filepath) {\n    if (!filepath) {\n      throw new Error('load must pass a non-empty string');\n    }\n  }\n}\nexports.ExplorerBase = ExplorerBase;\nfunction nextDirUp(dir) {\n  return _path.default.dirname(dir);\n}\nfunction getExtensionDescription(filepath) {\n  const ext = _path.default.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ExplorerBase","getExtensionDescription","_path","_interopRequireDefault","require","_getPropertyByPath","_loaders","obj","__esModule","default","constructor","options","cache","loadCache","Map","searchCache","config","validateConfig","clearLoadCache","clear","clearSearchCache","clearCaches","searchPlaces","forEach","place","loaderKey","extname","loader","loaders","Error","shouldSearchStopWithResult","result","isEmpty","ignoreEmptySearchPlaces","nextDirectoryToSearch","currentDir","currentResult","nextDir","nextDirUp","stopDir","loadPackageProp","filepath","content","parsedContent","loadJson","packagePropValue","getPropertyByPath","packageProp","getLoaderEntryForFile","basename","bind","loadedContentToCosmiconfigResult","loadedContent","forceProp","undefined","usePackagePropInConfigFiles","validateFilePath","dir","dirname","ext"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer/node_modules/cosmiconfig/dist/ExplorerBase.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerBase = void 0;\nexports.getExtensionDescription = getExtensionDescription;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _getPropertyByPath = require(\"./getPropertyByPath\");\n\nvar _loaders = require(\"./loaders\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass ExplorerBase {\n  constructor(options) {\n    if (options.cache) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n\n    this.config = options;\n    this.validateConfig();\n  }\n\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  validateConfig() {\n    const config = this.config;\n    config.searchPlaces.forEach(place => {\n      const loaderKey = _path.default.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n\n      if (!loader) {\n        throw new Error(`No loader specified for ${getExtensionDescription(place)}, so searchPlaces item \"${place}\" is invalid`);\n      }\n\n      if (typeof loader !== 'function') {\n        throw new Error(`loader for ${getExtensionDescription(place)} is not a function (type provided: \"${typeof loader}\"), so searchPlaces item \"${place}\" is invalid`);\n      }\n    });\n  }\n\n  shouldSearchStopWithResult(result) {\n    if (result === null) return false;\n    return !(result.isEmpty && this.config.ignoreEmptySearchPlaces);\n  }\n\n  nextDirectoryToSearch(currentDir, currentResult) {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n\n    const nextDir = nextDirUp(currentDir);\n\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n\n    return nextDir;\n  }\n\n  loadPackageProp(filepath, content) {\n    const parsedContent = _loaders.loaders.loadJson(filepath, content);\n\n    const packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(parsedContent, this.config.packageProp);\n    return packagePropValue || null;\n  }\n\n  getLoaderEntryForFile(filepath) {\n    if (_path.default.basename(filepath) === 'package.json') {\n      return this.loadPackageProp.bind(this);\n    }\n\n    const loaderKey = _path.default.extname(filepath) || 'noExt';\n    const loader = this.config.loaders[loaderKey];\n\n    if (!loader) {\n      throw new Error(`No loader specified for ${getExtensionDescription(filepath)}`);\n    }\n\n    return loader;\n  }\n\n  loadedContentToCosmiconfigResult(filepath, loadedContent, forceProp) {\n    if (loadedContent === null) {\n      return null;\n    }\n\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n\n    if (this.config.usePackagePropInConfigFiles || forceProp) {\n      loadedContent = (0, _getPropertyByPath.getPropertyByPath)(loadedContent, this.config.packageProp);\n    }\n\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n\n    return {\n      config: loadedContent,\n      filepath\n    };\n  }\n\n  validateFilePath(filepath) {\n    if (!filepath) {\n      throw new Error('load must pass a non-empty string');\n    }\n  }\n\n}\n\nexports.ExplorerBase = ExplorerBase;\n\nfunction nextDirUp(dir) {\n  return _path.default.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath) {\n  const ext = _path.default.extname(filepath);\n\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}