{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BATCH_SIZE = 20;\n/**\n * This will transpose an iterator JSHandle into a fast, Puppeteer-side iterator\n * of JSHandles.\n *\n * @param size - The number of elements to transpose. This should be something\n * reasonable.\n */\nfunction fastTransposeIteratorHandle(_x, _x2) {\n  return _fastTransposeIteratorHandle.apply(this, arguments);\n}\n/**\n * This will transpose an iterator JSHandle in batches based on the default size\n * of {@link fastTransposeIteratorHandle}.\n */\nfunction _fastTransposeIteratorHandle() {\n  _fastTransposeIteratorHandle = _wrapAsyncGenerator(function* (iterator, size) {\n    const array = yield _awaitAsyncGenerator(iterator.evaluateHandle( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (iterator, size) {\n        const results = [];\n        while (results.length < size) {\n          const result = yield iterator.next();\n          if (result.done) {\n            break;\n          }\n          results.push(result.value);\n        }\n        return results;\n      });\n      return function (_x5, _x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), size));\n    const properties = yield _awaitAsyncGenerator(array.getProperties());\n    yield _awaitAsyncGenerator(array.dispose());\n    yield* _asyncGeneratorDelegate(_asyncIterator(properties.values()), _awaitAsyncGenerator);\n    return properties.size === 0;\n  });\n  return _fastTransposeIteratorHandle.apply(this, arguments);\n}\nfunction transposeIteratorHandle(_x3) {\n  return _transposeIteratorHandle.apply(this, arguments);\n}\n/**\n * @internal\n */\nfunction _transposeIteratorHandle() {\n  _transposeIteratorHandle = _wrapAsyncGenerator(function* (iterator) {\n    let size = DEFAULT_BATCH_SIZE;\n    try {\n      while (!(yield* _asyncGeneratorDelegate(_asyncIterator(fastTransposeIteratorHandle(iterator, size)), _awaitAsyncGenerator))) {\n        size <<= 1;\n      }\n    } finally {\n      yield _awaitAsyncGenerator(iterator.dispose());\n    }\n  });\n  return _transposeIteratorHandle.apply(this, arguments);\n}\nexport function transposeIterableHandle(_x4) {\n  return _transposeIterableHandle.apply(this, arguments);\n}\nfunction _transposeIterableHandle() {\n  _transposeIterableHandle = _wrapAsyncGenerator(function* (handle) {\n    yield* _asyncGeneratorDelegate(_asyncIterator(transposeIteratorHandle(yield _awaitAsyncGenerator(handle.evaluateHandle(iterable => {\n      return _wrapAsyncGenerator(function* () {\n        yield* _asyncGeneratorDelegate(_asyncIterator(iterable), _awaitAsyncGenerator);\n      })();\n    })))), _awaitAsyncGenerator);\n  });\n  return _transposeIterableHandle.apply(this, arguments);\n}","map":{"version":3,"names":["DEFAULT_BATCH_SIZE","fastTransposeIteratorHandle","iterator","size","array","evaluateHandle","results","length","result","next","done","push","value","properties","getProperties","dispose","values","transposeIteratorHandle","transposeIterableHandle","handle","iterable"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/HandleIterator.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BATCH_SIZE = 20;\n/**\n * This will transpose an iterator JSHandle into a fast, Puppeteer-side iterator\n * of JSHandles.\n *\n * @param size - The number of elements to transpose. This should be something\n * reasonable.\n */\nasync function* fastTransposeIteratorHandle(iterator, size) {\n    const array = await iterator.evaluateHandle(async (iterator, size) => {\n        const results = [];\n        while (results.length < size) {\n            const result = await iterator.next();\n            if (result.done) {\n                break;\n            }\n            results.push(result.value);\n        }\n        return results;\n    }, size);\n    const properties = (await array.getProperties());\n    await array.dispose();\n    yield* properties.values();\n    return properties.size === 0;\n}\n/**\n * This will transpose an iterator JSHandle in batches based on the default size\n * of {@link fastTransposeIteratorHandle}.\n */\nasync function* transposeIteratorHandle(iterator) {\n    let size = DEFAULT_BATCH_SIZE;\n    try {\n        while (!(yield* fastTransposeIteratorHandle(iterator, size))) {\n            size <<= 1;\n        }\n    }\n    finally {\n        await iterator.dispose();\n    }\n}\n/**\n * @internal\n */\nexport async function* transposeIterableHandle(handle) {\n    yield* transposeIteratorHandle(await handle.evaluateHandle(iterable => {\n        return (async function* () {\n            yield* iterable;\n        })();\n    }));\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAG,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAOgBC,2BAA2B;EAAA;AAAA;AAiB3C;AACA;AACA;AACA;AAHA;EAAA,mDAjBA,WAA4CC,QAAQ,EAAEC,IAAI,EAAE;IACxD,MAAMC,KAAK,8BAASF,QAAQ,CAACG,cAAc;MAAA,8BAAC,WAAOH,QAAQ,EAAEC,IAAI,EAAK;QAClE,MAAMG,OAAO,GAAG,EAAE;QAClB,OAAOA,OAAO,CAACC,MAAM,GAAGJ,IAAI,EAAE;UAC1B,MAAMK,MAAM,SAASN,QAAQ,CAACO,IAAI,EAAE;UACpC,IAAID,MAAM,CAACE,IAAI,EAAE;YACb;UACJ;UACAJ,OAAO,CAACK,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC;QAC9B;QACA,OAAON,OAAO;MAClB,CAAC;MAAA;QAAA;MAAA;IAAA,KAAEH,IAAI,CAAC;IACR,MAAMU,UAAU,8BAAUT,KAAK,CAACU,aAAa,EAAE,CAAC;IAChD,2BAAMV,KAAK,CAACW,OAAO,EAAE;IACrB,8CAAOF,UAAU,CAACG,MAAM,EAAE;IAC1B,OAAOH,UAAU,CAACV,IAAI,KAAK,CAAC;EAChC,CAAC;EAAA;AAAA;AAAA,SAKec,uBAAuB;EAAA;AAAA;AAWvC;AACA;AACA;AAFA;EAAA,+CAXA,WAAwCf,QAAQ,EAAE;IAC9C,IAAIC,IAAI,GAAGH,kBAAkB;IAC7B,IAAI;MACA,OAAO,EAAE,8CAAOC,2BAA2B,CAACC,QAAQ,EAAEC,IAAI,CAAC,yBAAC,EAAE;QAC1DA,IAAI,KAAK,CAAC;MACd;IACJ,CAAC,SACO;MACJ,2BAAMD,QAAQ,CAACa,OAAO,EAAE;IAC5B;EACJ,CAAC;EAAA;AAAA;AAID,gBAAuBG,uBAAuB;EAAA;AAAA;AAM7C;EAAA,+CANM,WAAwCC,MAAM,EAAE;IACnD,8CAAOF,uBAAuB,4BAAOE,MAAM,CAACd,cAAc,CAACe,QAAQ,IAAI;MACnE,OAAO,oBAAC,aAAmB;QACvB,8CAAOA,QAAQ;MACnB,CAAC,GAAG;IACR,CAAC,CAAC,EAAC;EACP,CAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}