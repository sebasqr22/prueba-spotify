{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmiconfig = cosmiconfig;\nexports.cosmiconfigSync = cosmiconfigSync;\nexports.metaSearchPlaces = exports.defaultLoaders = void 0;\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _Explorer = require(\"./Explorer\");\nvar _ExplorerSync = require(\"./ExplorerSync\");\nvar _loaders = require(\"./loaders\");\nvar _types = require(\"./types\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nconst metaSearchPlaces = ['package.json', '.config.json', '.config.yaml', '.config.yml', '.config.js', '.config.cjs']; // do not allow mutation of default loaders. Make sure it is set inside options\n\nexports.metaSearchPlaces = metaSearchPlaces;\nconst defaultLoaders = Object.freeze({\n  '.cjs': _loaders.loaders.loadJs,\n  '.js': _loaders.loaders.loadJs,\n  '.json': _loaders.loaders.loadJson,\n  '.yaml': _loaders.loaders.loadYaml,\n  '.yml': _loaders.loaders.loadYaml,\n  noExt: _loaders.loaders.loadYaml\n});\nexports.defaultLoaders = defaultLoaders;\nconst identity = function identity(x) {\n  return x;\n};\nfunction replaceMetaPlaceholders(paths, moduleName) {\n  return paths.map(path => path.replace('{name}', moduleName));\n}\nfunction getExplorerOptions(moduleName, options) {\n  var _metaConfig$config;\n  const metaExplorer = new _ExplorerSync.ExplorerSync({\n    packageProp: 'cosmiconfig',\n    stopDir: process.cwd(),\n    searchPlaces: metaSearchPlaces,\n    ignoreEmptySearchPlaces: false,\n    usePackagePropInConfigFiles: true,\n    loaders: defaultLoaders,\n    transform: identity,\n    cache: true,\n    metaConfigFilePath: null\n  });\n  const metaConfig = metaExplorer.searchSync();\n  if (!metaConfig) {\n    return normalizeOptions(moduleName, options);\n  }\n  if ((_metaConfig$config = metaConfig.config) !== null && _metaConfig$config !== void 0 && _metaConfig$config.loaders) {\n    throw new Error('Can not specify loaders in meta config file');\n  }\n  const overrideOptions = metaConfig.config ?? {};\n  if (overrideOptions.searchPlaces) {\n    overrideOptions.searchPlaces = replaceMetaPlaceholders(overrideOptions.searchPlaces, moduleName);\n  }\n  overrideOptions.metaConfigFilePath = metaConfig.filepath;\n  const mergedOptions = {\n    ...options,\n    ...overrideOptions\n  };\n  return normalizeOptions(moduleName, mergedOptions);\n}\nfunction cosmiconfig(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorer = new _Explorer.Explorer(normalizedOptions);\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nfunction cosmiconfigSync(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync)\n  };\n}\nfunction normalizeOptions(moduleName, options) {\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `.${moduleName}rc.cjs`, `.config/${moduleName}rc`, `.config/${moduleName}rc.json`, `.config/${moduleName}rc.yaml`, `.config/${moduleName}rc.yml`, `.config/${moduleName}rc.js`, `.config/${moduleName}rc.cjs`, `${moduleName}.config.js`, `${moduleName}.config.cjs`],\n    ignoreEmptySearchPlaces: true,\n    stopDir: _os.default.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n    metaConfigFilePath: null\n  };\n  let loaders = {\n    ...defaults.loaders\n  };\n  if (options.loaders) {\n    Object.assign(loaders, options.loaders);\n  }\n  return {\n    ...defaults,\n    ...options,\n    loaders\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","cosmiconfig","cosmiconfigSync","metaSearchPlaces","defaultLoaders","_os","_interopRequireDefault","require","_Explorer","_ExplorerSync","_loaders","_types","obj","__esModule","default","freeze","loaders","loadJs","loadJson","loadYaml","noExt","identity","x","replaceMetaPlaceholders","paths","moduleName","map","path","replace","getExplorerOptions","options","_metaConfig$config","metaExplorer","ExplorerSync","packageProp","stopDir","process","cwd","searchPlaces","ignoreEmptySearchPlaces","usePackagePropInConfigFiles","transform","cache","metaConfigFilePath","metaConfig","searchSync","normalizeOptions","config","Error","overrideOptions","filepath","mergedOptions","normalizedOptions","explorer","Explorer","search","bind","load","clearLoadCache","clearSearchCache","clearCaches","explorerSync","loadSync","defaults","homedir","assign"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer/node_modules/cosmiconfig/dist/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmiconfig = cosmiconfig;\nexports.cosmiconfigSync = cosmiconfigSync;\nexports.metaSearchPlaces = exports.defaultLoaders = void 0;\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _Explorer = require(\"./Explorer\");\n\nvar _ExplorerSync = require(\"./ExplorerSync\");\n\nvar _loaders = require(\"./loaders\");\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nconst metaSearchPlaces = ['package.json', '.config.json', '.config.yaml', '.config.yml', '.config.js', '.config.cjs']; // do not allow mutation of default loaders. Make sure it is set inside options\n\nexports.metaSearchPlaces = metaSearchPlaces;\nconst defaultLoaders = Object.freeze({\n  '.cjs': _loaders.loaders.loadJs,\n  '.js': _loaders.loaders.loadJs,\n  '.json': _loaders.loaders.loadJson,\n  '.yaml': _loaders.loaders.loadYaml,\n  '.yml': _loaders.loaders.loadYaml,\n  noExt: _loaders.loaders.loadYaml\n});\nexports.defaultLoaders = defaultLoaders;\n\nconst identity = function identity(x) {\n  return x;\n};\n\nfunction replaceMetaPlaceholders(paths, moduleName) {\n  return paths.map(path => path.replace('{name}', moduleName));\n}\n\nfunction getExplorerOptions(moduleName, options) {\n  var _metaConfig$config;\n\n  const metaExplorer = new _ExplorerSync.ExplorerSync({\n    packageProp: 'cosmiconfig',\n    stopDir: process.cwd(),\n    searchPlaces: metaSearchPlaces,\n    ignoreEmptySearchPlaces: false,\n    usePackagePropInConfigFiles: true,\n    loaders: defaultLoaders,\n    transform: identity,\n    cache: true,\n    metaConfigFilePath: null\n  });\n  const metaConfig = metaExplorer.searchSync();\n\n  if (!metaConfig) {\n    return normalizeOptions(moduleName, options);\n  }\n\n  if ((_metaConfig$config = metaConfig.config) !== null && _metaConfig$config !== void 0 && _metaConfig$config.loaders) {\n    throw new Error('Can not specify loaders in meta config file');\n  }\n\n  const overrideOptions = metaConfig.config ?? {};\n\n  if (overrideOptions.searchPlaces) {\n    overrideOptions.searchPlaces = replaceMetaPlaceholders(overrideOptions.searchPlaces, moduleName);\n  }\n\n  overrideOptions.metaConfigFilePath = metaConfig.filepath;\n  const mergedOptions = { ...options,\n    ...overrideOptions\n  };\n  return normalizeOptions(moduleName, mergedOptions);\n}\n\nfunction cosmiconfig(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorer = new _Explorer.Explorer(normalizedOptions);\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n\nfunction cosmiconfigSync(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync)\n  };\n}\n\nfunction normalizeOptions(moduleName, options) {\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `.${moduleName}rc.cjs`, `.config/${moduleName}rc`, `.config/${moduleName}rc.json`, `.config/${moduleName}rc.yaml`, `.config/${moduleName}rc.yml`, `.config/${moduleName}rc.js`, `.config/${moduleName}rc.cjs`, `${moduleName}.config.js`, `${moduleName}.config.cjs`],\n    ignoreEmptySearchPlaces: true,\n    stopDir: _os.default.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n    metaConfigFilePath: null\n  };\n  let loaders = { ...defaults.loaders\n  };\n\n  if (options.loaders) {\n    Object.assign(loaders, options.loaders);\n  }\n\n  return { ...defaults,\n    ...options,\n    loaders\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}