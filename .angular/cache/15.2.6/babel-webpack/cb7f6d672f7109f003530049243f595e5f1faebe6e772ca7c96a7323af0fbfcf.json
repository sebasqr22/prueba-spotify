{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport mitt from '../../third_party/mitt/index.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    this.eventsMap = new Map();\n    this.emitter = mitt(this.eventsMap);\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param event - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(event, handler) {\n    this.emitter.on(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param event - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(event, handler) {\n    this.emitter.off(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener.\n   * @deprecated please use {@link EventEmitter.off} instead.\n   */\n  removeListener(event, handler) {\n    this.off(event, handler);\n    return this;\n  }\n  /**\n   * Add an event listener.\n   * @deprecated please use {@link EventEmitter.on} instead.\n   */\n  addListener(event, handler) {\n    this.on(event, handler);\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param event - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(event, eventData) {\n    this.emitter.emit(event, eventData);\n    return this.eventListenersCount(event) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param event - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(event, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(event, onceHandler);\n    };\n    return this.on(event, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param event - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(event) {\n    return this.eventListenersCount(event);\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   * @param event - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.eventsMap.delete(event);\n    } else {\n      this.eventsMap.clear();\n    }\n    return this;\n  }\n  eventListenersCount(event) {\n    var _a;\n    return ((_a = this.eventsMap.get(event)) === null || _a === void 0 ? void 0 : _a.length) || 0;\n  }\n}","map":{"version":3,"names":["mitt","EventEmitter","constructor","eventsMap","Map","emitter","on","event","handler","off","removeListener","addListener","emit","eventData","eventListenersCount","once","onceHandler","listenerCount","removeAllListeners","delete","clear","_a","get","length"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/EventEmitter.js"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport mitt from '../../third_party/mitt/index.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter {\n    /**\n     * @internal\n     */\n    constructor() {\n        this.eventsMap = new Map();\n        this.emitter = mitt(this.eventsMap);\n    }\n    /**\n     * Bind an event listener to fire when an event occurs.\n     * @param event - the event type you'd like to listen to. Can be a string or symbol.\n     * @param handler - the function to be called when the event occurs.\n     * @returns `this` to enable you to chain method calls.\n     */\n    on(event, handler) {\n        this.emitter.on(event, handler);\n        return this;\n    }\n    /**\n     * Remove an event listener from firing.\n     * @param event - the event type you'd like to stop listening to.\n     * @param handler - the function that should be removed.\n     * @returns `this` to enable you to chain method calls.\n     */\n    off(event, handler) {\n        this.emitter.off(event, handler);\n        return this;\n    }\n    /**\n     * Remove an event listener.\n     * @deprecated please use {@link EventEmitter.off} instead.\n     */\n    removeListener(event, handler) {\n        this.off(event, handler);\n        return this;\n    }\n    /**\n     * Add an event listener.\n     * @deprecated please use {@link EventEmitter.on} instead.\n     */\n    addListener(event, handler) {\n        this.on(event, handler);\n        return this;\n    }\n    /**\n     * Emit an event and call any associated listeners.\n     *\n     * @param event - the event you'd like to emit\n     * @param eventData - any data you'd like to emit with the event\n     * @returns `true` if there are any listeners, `false` if there are not.\n     */\n    emit(event, eventData) {\n        this.emitter.emit(event, eventData);\n        return this.eventListenersCount(event) > 0;\n    }\n    /**\n     * Like `on` but the listener will only be fired once and then it will be removed.\n     * @param event - the event you'd like to listen to\n     * @param handler - the handler function to run when the event occurs\n     * @returns `this` to enable you to chain method calls.\n     */\n    once(event, handler) {\n        const onceHandler = eventData => {\n            handler(eventData);\n            this.off(event, onceHandler);\n        };\n        return this.on(event, onceHandler);\n    }\n    /**\n     * Gets the number of listeners for a given event.\n     *\n     * @param event - the event to get the listener count for\n     * @returns the number of listeners bound to the given event\n     */\n    listenerCount(event) {\n        return this.eventListenersCount(event);\n    }\n    /**\n     * Removes all listeners. If given an event argument, it will remove only\n     * listeners for that event.\n     * @param event - the event to remove listeners for.\n     * @returns `this` to enable you to chain method calls.\n     */\n    removeAllListeners(event) {\n        if (event) {\n            this.eventsMap.delete(event);\n        }\n        else {\n            this.eventsMap.clear();\n        }\n        return this;\n    }\n    eventListenersCount(event) {\n        var _a;\n        return ((_a = this.eventsMap.get(event)) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,CAAC;EACtB;AACJ;AACA;EACIC,WAAW,GAAG;IACV,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAI,CAACC,OAAO,GAAGL,IAAI,CAAC,IAAI,CAACG,SAAS,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,EAAE,CAACC,KAAK,EAAEC,OAAO,EAAE;IACf,IAAI,CAACH,OAAO,CAACC,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IAC/B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,GAAG,CAACF,KAAK,EAAEC,OAAO,EAAE;IAChB,IAAI,CAACH,OAAO,CAACI,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IAChC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,cAAc,CAACH,KAAK,EAAEC,OAAO,EAAE;IAC3B,IAAI,CAACC,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IACxB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIG,WAAW,CAACJ,KAAK,EAAEC,OAAO,EAAE;IACxB,IAAI,CAACF,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IACvB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,IAAI,CAACL,KAAK,EAAEM,SAAS,EAAE;IACnB,IAAI,CAACR,OAAO,CAACO,IAAI,CAACL,KAAK,EAAEM,SAAS,CAAC;IACnC,OAAO,IAAI,CAACC,mBAAmB,CAACP,KAAK,CAAC,GAAG,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIQ,IAAI,CAACR,KAAK,EAAEC,OAAO,EAAE;IACjB,MAAMQ,WAAW,GAAGH,SAAS,IAAI;MAC7BL,OAAO,CAACK,SAAS,CAAC;MAClB,IAAI,CAACJ,GAAG,CAACF,KAAK,EAAES,WAAW,CAAC;IAChC,CAAC;IACD,OAAO,IAAI,CAACV,EAAE,CAACC,KAAK,EAAES,WAAW,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAa,CAACV,KAAK,EAAE;IACjB,OAAO,IAAI,CAACO,mBAAmB,CAACP,KAAK,CAAC;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIW,kBAAkB,CAACX,KAAK,EAAE;IACtB,IAAIA,KAAK,EAAE;MACP,IAAI,CAACJ,SAAS,CAACgB,MAAM,CAACZ,KAAK,CAAC;IAChC,CAAC,MACI;MACD,IAAI,CAACJ,SAAS,CAACiB,KAAK,EAAE;IAC1B;IACA,OAAO,IAAI;EACf;EACAN,mBAAmB,CAACP,KAAK,EAAE;IACvB,IAAIc,EAAE;IACN,OAAO,CAAC,CAACA,EAAE,GAAG,IAAI,CAAClB,SAAS,CAACmB,GAAG,CAACf,KAAK,CAAC,MAAM,IAAI,IAAIc,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,KAAK,CAAC;EACjG;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}