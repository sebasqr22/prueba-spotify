{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst createdFunctions = new Map();\n/**\n * Creates a function from a string.\n *\n * @internal\n */\nexport const createFunction = functionValue => {\n  let fn = createdFunctions.get(functionValue);\n  if (fn) {\n    return fn;\n  }\n  fn = new Function(`return ${functionValue}`)();\n  createdFunctions.set(functionValue, fn);\n  return fn;\n};\n/**\n * @internal\n */\nexport function stringifyFunction(fn) {\n  let value = fn.toString();\n  try {\n    new Function(`(${value})`);\n  } catch {\n    // This means we might have a function shorthand (e.g. `test(){}`). Let's\n    // try prefixing.\n    let prefix = 'function ';\n    if (value.startsWith('async ')) {\n      prefix = `async ${prefix}`;\n      value = value.substring('async '.length);\n    }\n    value = `${prefix}${value}`;\n    try {\n      new Function(`(${value})`);\n    } catch {\n      // We tried hard to serialize, but there's a weird beast here.\n      throw new Error('Passed function cannot be serialized!');\n    }\n  }\n  return value;\n}\n/**\n * Replaces `PLACEHOLDER`s with the given replacements.\n *\n * All replacements must be valid JS code.\n *\n * @example\n *\n * ```ts\n * interpolateFunction(() => PLACEHOLDER('test'), {test: 'void 0'});\n * // Equivalent to () => void 0\n * ```\n *\n * @internal\n */\nexport const interpolateFunction = (fn, replacements) => {\n  let value = stringifyFunction(fn);\n  for (const [name, jsValue] of Object.entries(replacements)) {\n    value = value.replace(new RegExp(`PLACEHOLDER\\\\(\\\\s*(?:'${name}'|\"${name}\")\\\\s*\\\\)`, 'g'), jsValue);\n  }\n  return createFunction(value);\n};","map":{"version":3,"names":["createdFunctions","Map","createFunction","functionValue","fn","get","Function","set","stringifyFunction","value","toString","prefix","startsWith","substring","length","Error","interpolateFunction","replacements","name","jsValue","Object","entries","replace","RegExp"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/util/Function.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst createdFunctions = new Map();\n/**\n * Creates a function from a string.\n *\n * @internal\n */\nexport const createFunction = (functionValue) => {\n    let fn = createdFunctions.get(functionValue);\n    if (fn) {\n        return fn;\n    }\n    fn = new Function(`return ${functionValue}`)();\n    createdFunctions.set(functionValue, fn);\n    return fn;\n};\n/**\n * @internal\n */\nexport function stringifyFunction(fn) {\n    let value = fn.toString();\n    try {\n        new Function(`(${value})`);\n    }\n    catch {\n        // This means we might have a function shorthand (e.g. `test(){}`). Let's\n        // try prefixing.\n        let prefix = 'function ';\n        if (value.startsWith('async ')) {\n            prefix = `async ${prefix}`;\n            value = value.substring('async '.length);\n        }\n        value = `${prefix}${value}`;\n        try {\n            new Function(`(${value})`);\n        }\n        catch {\n            // We tried hard to serialize, but there's a weird beast here.\n            throw new Error('Passed function cannot be serialized!');\n        }\n    }\n    return value;\n}\n/**\n * Replaces `PLACEHOLDER`s with the given replacements.\n *\n * All replacements must be valid JS code.\n *\n * @example\n *\n * ```ts\n * interpolateFunction(() => PLACEHOLDER('test'), {test: 'void 0'});\n * // Equivalent to () => void 0\n * ```\n *\n * @internal\n */\nexport const interpolateFunction = (fn, replacements) => {\n    let value = stringifyFunction(fn);\n    for (const [name, jsValue] of Object.entries(replacements)) {\n        value = value.replace(new RegExp(`PLACEHOLDER\\\\(\\\\s*(?:'${name}'|\"${name}\")\\\\s*\\\\)`, 'g'), jsValue);\n    }\n    return createFunction(value);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG,IAAIC,GAAG,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,aAAa,IAAK;EAC7C,IAAIC,EAAE,GAAGJ,gBAAgB,CAACK,GAAG,CAACF,aAAa,CAAC;EAC5C,IAAIC,EAAE,EAAE;IACJ,OAAOA,EAAE;EACb;EACAA,EAAE,GAAG,IAAIE,QAAQ,CAAE,UAASH,aAAc,EAAC,CAAC,EAAE;EAC9CH,gBAAgB,CAACO,GAAG,CAACJ,aAAa,EAAEC,EAAE,CAAC;EACvC,OAAOA,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA,OAAO,SAASI,iBAAiB,CAACJ,EAAE,EAAE;EAClC,IAAIK,KAAK,GAAGL,EAAE,CAACM,QAAQ,EAAE;EACzB,IAAI;IACA,IAAIJ,QAAQ,CAAE,IAAGG,KAAM,GAAE,CAAC;EAC9B,CAAC,CACD,MAAM;IACF;IACA;IACA,IAAIE,MAAM,GAAG,WAAW;IACxB,IAAIF,KAAK,CAACG,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC5BD,MAAM,GAAI,SAAQA,MAAO,EAAC;MAC1BF,KAAK,GAAGA,KAAK,CAACI,SAAS,CAAC,QAAQ,CAACC,MAAM,CAAC;IAC5C;IACAL,KAAK,GAAI,GAAEE,MAAO,GAAEF,KAAM,EAAC;IAC3B,IAAI;MACA,IAAIH,QAAQ,CAAE,IAAGG,KAAM,GAAE,CAAC;IAC9B,CAAC,CACD,MAAM;MACF;MACA,MAAM,IAAIM,KAAK,CAAC,uCAAuC,CAAC;IAC5D;EACJ;EACA,OAAON,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,mBAAmB,GAAG,CAACZ,EAAE,EAAEa,YAAY,KAAK;EACrD,IAAIR,KAAK,GAAGD,iBAAiB,CAACJ,EAAE,CAAC;EACjC,KAAK,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,YAAY,CAAC,EAAE;IACxDR,KAAK,GAAGA,KAAK,CAACa,OAAO,CAAC,IAAIC,MAAM,CAAE,yBAAwBL,IAAK,MAAKA,IAAK,WAAU,EAAE,GAAG,CAAC,EAAEC,OAAO,CAAC;EACvG;EACA,OAAOjB,cAAc,CAACO,KAAK,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}