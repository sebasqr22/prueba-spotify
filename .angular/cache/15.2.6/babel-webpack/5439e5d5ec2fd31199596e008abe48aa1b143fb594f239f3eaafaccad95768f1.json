{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Accessibility_client, _AXNode_instances, _AXNode_richlyEditable, _AXNode_editable, _AXNode_focusable, _AXNode_hidden, _AXNode_name, _AXNode_role, _AXNode_ignored, _AXNode_cachedHasFocusableChild, _AXNode_isPlainTextField, _AXNode_isTextOnlyObject, _AXNode_hasFocusableChild;\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nexport class Accessibility {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Accessibility_client.set(this, void 0);\n    __classPrivateFieldSet(this, _Accessibility_client, client, \"f\");\n  }\n  /**\n   * Captures the current state of the accessibility tree.\n   * The returned object represents the root accessible node of the page.\n   *\n   * @remarks\n   *\n   * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n   * most platforms and by most screen readers. Puppeteer will discard them as\n   * well for an easier to process tree, unless `interestingOnly` is set to\n   * `false`.\n   *\n   * @example\n   * An example of dumping the entire accessibility tree:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * console.log(snapshot);\n   * ```\n   *\n   * @example\n   * An example of logging the focused node's name:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * const node = findFocusedNode(snapshot);\n   * console.log(node && node.name);\n   *\n   * function findFocusedNode(node) {\n   *   if (node.focused) return node;\n   *   for (const child of node.children || []) {\n   *     const foundNode = findFocusedNode(child);\n   *     return foundNode;\n   *   }\n   *   return null;\n   * }\n   * ```\n   *\n   * @returns An AXNode object representing the snapshot.\n   */\n  snapshot(options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n      const {\n        interestingOnly = true,\n        root = null\n      } = options;\n      const {\n        nodes\n      } = yield __classPrivateFieldGet(_this, _Accessibility_client, \"f\").send('Accessibility.getFullAXTree');\n      let backendNodeId;\n      if (root) {\n        const {\n          node\n        } = yield __classPrivateFieldGet(_this, _Accessibility_client, \"f\").send('DOM.describeNode', {\n          objectId: root.id\n        });\n        backendNodeId = node.backendNodeId;\n      }\n      const defaultRoot = AXNode.createTree(nodes);\n      let needle = defaultRoot;\n      if (backendNodeId) {\n        needle = defaultRoot.find(node => {\n          return node.payload.backendDOMNodeId === backendNodeId;\n        });\n        if (!needle) {\n          return null;\n        }\n      }\n      if (!interestingOnly) {\n        return (_a = _this.serializeTree(needle)[0]) !== null && _a !== void 0 ? _a : null;\n      }\n      const interestingNodes = new Set();\n      _this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n      if (!interestingNodes.has(needle)) {\n        return null;\n      }\n      return (_b = _this.serializeTree(needle, interestingNodes)[0]) !== null && _b !== void 0 ? _b : null;\n    })();\n  }\n  serializeTree(node, interestingNodes) {\n    const children = [];\n    for (const child of node.children) {\n      children.push(...this.serializeTree(child, interestingNodes));\n    }\n    if (interestingNodes && !interestingNodes.has(node)) {\n      return children;\n    }\n    const serializedNode = node.serialize();\n    if (children.length) {\n      serializedNode.children = children;\n    }\n    return [serializedNode];\n  }\n  collectInterestingNodes(collection, node, insideControl) {\n    if (node.isInteresting(insideControl)) {\n      collection.add(node);\n    }\n    if (node.isLeafNode()) {\n      return;\n    }\n    insideControl = insideControl || node.isControl();\n    for (const child of node.children) {\n      this.collectInterestingNodes(collection, child, insideControl);\n    }\n  }\n}\n_Accessibility_client = new WeakMap();\nclass AXNode {\n  constructor(payload) {\n    _AXNode_instances.add(this);\n    this.children = [];\n    _AXNode_richlyEditable.set(this, false);\n    _AXNode_editable.set(this, false);\n    _AXNode_focusable.set(this, false);\n    _AXNode_hidden.set(this, false);\n    _AXNode_name.set(this, void 0);\n    _AXNode_role.set(this, void 0);\n    _AXNode_ignored.set(this, void 0);\n    _AXNode_cachedHasFocusableChild.set(this, void 0);\n    this.payload = payload;\n    __classPrivateFieldSet(this, _AXNode_name, this.payload.name ? this.payload.name.value : '', \"f\");\n    __classPrivateFieldSet(this, _AXNode_role, this.payload.role ? this.payload.role.value : 'Unknown', \"f\");\n    __classPrivateFieldSet(this, _AXNode_ignored, this.payload.ignored, \"f\");\n    for (const property of this.payload.properties || []) {\n      if (property.name === 'editable') {\n        __classPrivateFieldSet(this, _AXNode_richlyEditable, property.value.value === 'richtext', \"f\");\n        __classPrivateFieldSet(this, _AXNode_editable, true, \"f\");\n      }\n      if (property.name === 'focusable') {\n        __classPrivateFieldSet(this, _AXNode_focusable, property.value.value, \"f\");\n      }\n      if (property.name === 'hidden') {\n        __classPrivateFieldSet(this, _AXNode_hidden, property.value.value, \"f\");\n      }\n    }\n  }\n  find(predicate) {\n    if (predicate(this)) {\n      return this;\n    }\n    for (const child of this.children) {\n      const result = child.find(predicate);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  isLeafNode() {\n    if (!this.children.length) {\n      return true;\n    }\n    // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n    if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isPlainTextField).call(this) || __classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isTextOnlyObject).call(this)) {\n      return true;\n    }\n    // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n    switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n      default:\n        break;\n    }\n    // Here and below: Android heuristics\n    if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(this)) {\n      return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n      return true;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_role, \"f\") === 'heading' && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n      return true;\n    }\n    return false;\n  }\n  isControl() {\n    switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n      case 'treeitem':\n        return true;\n      default:\n        return false;\n    }\n  }\n  isInteresting(insideControl) {\n    const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n    if (role === 'Ignored' || __classPrivateFieldGet(this, _AXNode_hidden, \"f\") || __classPrivateFieldGet(this, _AXNode_ignored, \"f\")) {\n      return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") || __classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n      return true;\n    }\n    // If it's not focusable but has a control role, then it's interesting.\n    if (this.isControl()) {\n      return true;\n    }\n    // A non focusable child of a control is not interesting\n    if (insideControl) {\n      return false;\n    }\n    return this.isLeafNode() && !!__classPrivateFieldGet(this, _AXNode_name, \"f\");\n  }\n  serialize() {\n    const properties = new Map();\n    for (const property of this.payload.properties || []) {\n      properties.set(property.name.toLowerCase(), property.value.value);\n    }\n    if (this.payload.name) {\n      properties.set('name', this.payload.name.value);\n    }\n    if (this.payload.value) {\n      properties.set('value', this.payload.value.value);\n    }\n    if (this.payload.description) {\n      properties.set('description', this.payload.description.value);\n    }\n    const node = {\n      role: __classPrivateFieldGet(this, _AXNode_role, \"f\")\n    };\n    const userStringProperties = ['name', 'value', 'description', 'keyshortcuts', 'roledescription', 'valuetext'];\n    const getUserStringPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty)) {\n        continue;\n      }\n      node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n    }\n    const booleanProperties = ['disabled', 'expanded', 'focused', 'modal', 'multiline', 'multiselectable', 'readonly', 'required', 'selected'];\n    const getBooleanPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const booleanProperty of booleanProperties) {\n      // RootWebArea's treat focus differently than other nodes. They report whether\n      // their frame  has focus, not whether focus is specifically on the root\n      // node.\n      if (booleanProperty === 'focused' && __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'RootWebArea') {\n        continue;\n      }\n      const value = getBooleanPropertyValue(booleanProperty);\n      if (!value) {\n        continue;\n      }\n      node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n    }\n    const tristateProperties = ['checked', 'pressed'];\n    for (const tristateProperty of tristateProperties) {\n      if (!properties.has(tristateProperty)) {\n        continue;\n      }\n      const value = properties.get(tristateProperty);\n      node[tristateProperty] = value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n    }\n    const numericalProperties = ['level', 'valuemax', 'valuemin'];\n    const getNumericalPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty)) {\n        continue;\n      }\n      node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n    }\n    const tokenProperties = ['autocomplete', 'haspopup', 'invalid', 'orientation'];\n    const getTokenPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const tokenProperty of tokenProperties) {\n      const value = getTokenPropertyValue(tokenProperty);\n      if (!value || value === 'false') {\n        continue;\n      }\n      node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n    }\n    return node;\n  }\n  static createTree(payloads) {\n    const nodeById = new Map();\n    for (const payload of payloads) {\n      nodeById.set(payload.nodeId, new AXNode(payload));\n    }\n    for (const node of nodeById.values()) {\n      for (const childId of node.payload.childIds || []) {\n        const child = nodeById.get(childId);\n        if (child) {\n          node.children.push(child);\n        }\n      }\n    }\n    return nodeById.values().next().value;\n  }\n}\n_AXNode_richlyEditable = new WeakMap(), _AXNode_editable = new WeakMap(), _AXNode_focusable = new WeakMap(), _AXNode_hidden = new WeakMap(), _AXNode_name = new WeakMap(), _AXNode_role = new WeakMap(), _AXNode_ignored = new WeakMap(), _AXNode_cachedHasFocusableChild = new WeakMap(), _AXNode_instances = new WeakSet(), _AXNode_isPlainTextField = function _AXNode_isPlainTextField() {\n  if (__classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n    return false;\n  }\n  if (__classPrivateFieldGet(this, _AXNode_editable, \"f\")) {\n    return true;\n  }\n  return __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'textbox' || __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'searchbox';\n}, _AXNode_isTextOnlyObject = function _AXNode_isTextOnlyObject() {\n  const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n  return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n}, _AXNode_hasFocusableChild = function _AXNode_hasFocusableChild() {\n  if (__classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\") === undefined) {\n    __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, false, \"f\");\n    for (const child of this.children) {\n      if (__classPrivateFieldGet(child, _AXNode_focusable, \"f\") || __classPrivateFieldGet(child, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(child)) {\n        __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, true, \"f\");\n        break;\n      }\n    }\n  }\n  return __classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\");\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Accessibility_client","_AXNode_instances","_AXNode_richlyEditable","_AXNode_editable","_AXNode_focusable","_AXNode_hidden","_AXNode_name","_AXNode_role","_AXNode_ignored","_AXNode_cachedHasFocusableChild","_AXNode_isPlainTextField","_AXNode_isTextOnlyObject","_AXNode_hasFocusableChild","Accessibility","constructor","client","snapshot","options","_a","_b","interestingOnly","root","nodes","send","backendNodeId","node","objectId","id","defaultRoot","AXNode","createTree","needle","find","payload","backendDOMNodeId","serializeTree","interestingNodes","Set","collectInterestingNodes","children","child","push","serializedNode","serialize","length","collection","insideControl","isInteresting","add","isLeafNode","isControl","WeakMap","name","role","ignored","property","properties","predicate","result","Map","toLowerCase","description","userStringProperties","getUserStringPropertyValue","key","userStringProperty","booleanProperties","getBooleanPropertyValue","booleanProperty","tristateProperties","tristateProperty","numericalProperties","getNumericalPropertyValue","numericalProperty","tokenProperties","getTokenPropertyValue","tokenProperty","payloads","nodeById","nodeId","values","childId","childIds","next","WeakSet","undefined"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Accessibility.js"],"sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Accessibility_client, _AXNode_instances, _AXNode_richlyEditable, _AXNode_editable, _AXNode_focusable, _AXNode_hidden, _AXNode_name, _AXNode_role, _AXNode_ignored, _AXNode_cachedHasFocusableChild, _AXNode_isPlainTextField, _AXNode_isTextOnlyObject, _AXNode_hasFocusableChild;\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nexport class Accessibility {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        _Accessibility_client.set(this, void 0);\n        __classPrivateFieldSet(this, _Accessibility_client, client, \"f\");\n    }\n    /**\n     * Captures the current state of the accessibility tree.\n     * The returned object represents the root accessible node of the page.\n     *\n     * @remarks\n     *\n     * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n     * most platforms and by most screen readers. Puppeteer will discard them as\n     * well for an easier to process tree, unless `interestingOnly` is set to\n     * `false`.\n     *\n     * @example\n     * An example of dumping the entire accessibility tree:\n     *\n     * ```ts\n     * const snapshot = await page.accessibility.snapshot();\n     * console.log(snapshot);\n     * ```\n     *\n     * @example\n     * An example of logging the focused node's name:\n     *\n     * ```ts\n     * const snapshot = await page.accessibility.snapshot();\n     * const node = findFocusedNode(snapshot);\n     * console.log(node && node.name);\n     *\n     * function findFocusedNode(node) {\n     *   if (node.focused) return node;\n     *   for (const child of node.children || []) {\n     *     const foundNode = findFocusedNode(child);\n     *     return foundNode;\n     *   }\n     *   return null;\n     * }\n     * ```\n     *\n     * @returns An AXNode object representing the snapshot.\n     */\n    async snapshot(options = {}) {\n        var _a, _b;\n        const { interestingOnly = true, root = null } = options;\n        const { nodes } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('Accessibility.getFullAXTree');\n        let backendNodeId;\n        if (root) {\n            const { node } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('DOM.describeNode', {\n                objectId: root.id,\n            });\n            backendNodeId = node.backendNodeId;\n        }\n        const defaultRoot = AXNode.createTree(nodes);\n        let needle = defaultRoot;\n        if (backendNodeId) {\n            needle = defaultRoot.find(node => {\n                return node.payload.backendDOMNodeId === backendNodeId;\n            });\n            if (!needle) {\n                return null;\n            }\n        }\n        if (!interestingOnly) {\n            return (_a = this.serializeTree(needle)[0]) !== null && _a !== void 0 ? _a : null;\n        }\n        const interestingNodes = new Set();\n        this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n        if (!interestingNodes.has(needle)) {\n            return null;\n        }\n        return (_b = this.serializeTree(needle, interestingNodes)[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    serializeTree(node, interestingNodes) {\n        const children = [];\n        for (const child of node.children) {\n            children.push(...this.serializeTree(child, interestingNodes));\n        }\n        if (interestingNodes && !interestingNodes.has(node)) {\n            return children;\n        }\n        const serializedNode = node.serialize();\n        if (children.length) {\n            serializedNode.children = children;\n        }\n        return [serializedNode];\n    }\n    collectInterestingNodes(collection, node, insideControl) {\n        if (node.isInteresting(insideControl)) {\n            collection.add(node);\n        }\n        if (node.isLeafNode()) {\n            return;\n        }\n        insideControl = insideControl || node.isControl();\n        for (const child of node.children) {\n            this.collectInterestingNodes(collection, child, insideControl);\n        }\n    }\n}\n_Accessibility_client = new WeakMap();\nclass AXNode {\n    constructor(payload) {\n        _AXNode_instances.add(this);\n        this.children = [];\n        _AXNode_richlyEditable.set(this, false);\n        _AXNode_editable.set(this, false);\n        _AXNode_focusable.set(this, false);\n        _AXNode_hidden.set(this, false);\n        _AXNode_name.set(this, void 0);\n        _AXNode_role.set(this, void 0);\n        _AXNode_ignored.set(this, void 0);\n        _AXNode_cachedHasFocusableChild.set(this, void 0);\n        this.payload = payload;\n        __classPrivateFieldSet(this, _AXNode_name, this.payload.name ? this.payload.name.value : '', \"f\");\n        __classPrivateFieldSet(this, _AXNode_role, this.payload.role ? this.payload.role.value : 'Unknown', \"f\");\n        __classPrivateFieldSet(this, _AXNode_ignored, this.payload.ignored, \"f\");\n        for (const property of this.payload.properties || []) {\n            if (property.name === 'editable') {\n                __classPrivateFieldSet(this, _AXNode_richlyEditable, property.value.value === 'richtext', \"f\");\n                __classPrivateFieldSet(this, _AXNode_editable, true, \"f\");\n            }\n            if (property.name === 'focusable') {\n                __classPrivateFieldSet(this, _AXNode_focusable, property.value.value, \"f\");\n            }\n            if (property.name === 'hidden') {\n                __classPrivateFieldSet(this, _AXNode_hidden, property.value.value, \"f\");\n            }\n        }\n    }\n    find(predicate) {\n        if (predicate(this)) {\n            return this;\n        }\n        for (const child of this.children) {\n            const result = child.find(predicate);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    isLeafNode() {\n        if (!this.children.length) {\n            return true;\n        }\n        // These types of objects may have children that we use as internal\n        // implementation details, but we want to expose them as leaves to platform\n        // accessibility APIs because screen readers might be confused if they find\n        // any children.\n        if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isPlainTextField).call(this) || __classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isTextOnlyObject).call(this)) {\n            return true;\n        }\n        // Roles whose children are only presentational according to the ARIA and\n        // HTML5 Specs should be hidden from screen readers.\n        // (Note that whilst ARIA buttons can have only presentational children, HTML5\n        // buttons are allowed to have content.)\n        switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n            case 'doc-cover':\n            case 'graphics-symbol':\n            case 'img':\n            case 'Meter':\n            case 'scrollbar':\n            case 'slider':\n            case 'separator':\n            case 'progressbar':\n                return true;\n            default:\n                break;\n        }\n        // Here and below: Android heuristics\n        if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(this)) {\n            return false;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n            return true;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_role, \"f\") === 'heading' && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n            return true;\n        }\n        return false;\n    }\n    isControl() {\n        switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n            case 'button':\n            case 'checkbox':\n            case 'ColorWell':\n            case 'combobox':\n            case 'DisclosureTriangle':\n            case 'listbox':\n            case 'menu':\n            case 'menubar':\n            case 'menuitem':\n            case 'menuitemcheckbox':\n            case 'menuitemradio':\n            case 'radio':\n            case 'scrollbar':\n            case 'searchbox':\n            case 'slider':\n            case 'spinbutton':\n            case 'switch':\n            case 'tab':\n            case 'textbox':\n            case 'tree':\n            case 'treeitem':\n                return true;\n            default:\n                return false;\n        }\n    }\n    isInteresting(insideControl) {\n        const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n        if (role === 'Ignored' || __classPrivateFieldGet(this, _AXNode_hidden, \"f\") || __classPrivateFieldGet(this, _AXNode_ignored, \"f\")) {\n            return false;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") || __classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n            return true;\n        }\n        // If it's not focusable but has a control role, then it's interesting.\n        if (this.isControl()) {\n            return true;\n        }\n        // A non focusable child of a control is not interesting\n        if (insideControl) {\n            return false;\n        }\n        return this.isLeafNode() && !!__classPrivateFieldGet(this, _AXNode_name, \"f\");\n    }\n    serialize() {\n        const properties = new Map();\n        for (const property of this.payload.properties || []) {\n            properties.set(property.name.toLowerCase(), property.value.value);\n        }\n        if (this.payload.name) {\n            properties.set('name', this.payload.name.value);\n        }\n        if (this.payload.value) {\n            properties.set('value', this.payload.value.value);\n        }\n        if (this.payload.description) {\n            properties.set('description', this.payload.description.value);\n        }\n        const node = {\n            role: __classPrivateFieldGet(this, _AXNode_role, \"f\"),\n        };\n        const userStringProperties = [\n            'name',\n            'value',\n            'description',\n            'keyshortcuts',\n            'roledescription',\n            'valuetext',\n        ];\n        const getUserStringPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const userStringProperty of userStringProperties) {\n            if (!properties.has(userStringProperty)) {\n                continue;\n            }\n            node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n        }\n        const booleanProperties = [\n            'disabled',\n            'expanded',\n            'focused',\n            'modal',\n            'multiline',\n            'multiselectable',\n            'readonly',\n            'required',\n            'selected',\n        ];\n        const getBooleanPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const booleanProperty of booleanProperties) {\n            // RootWebArea's treat focus differently than other nodes. They report whether\n            // their frame  has focus, not whether focus is specifically on the root\n            // node.\n            if (booleanProperty === 'focused' && __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'RootWebArea') {\n                continue;\n            }\n            const value = getBooleanPropertyValue(booleanProperty);\n            if (!value) {\n                continue;\n            }\n            node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n        }\n        const tristateProperties = ['checked', 'pressed'];\n        for (const tristateProperty of tristateProperties) {\n            if (!properties.has(tristateProperty)) {\n                continue;\n            }\n            const value = properties.get(tristateProperty);\n            node[tristateProperty] =\n                value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n        }\n        const numericalProperties = [\n            'level',\n            'valuemax',\n            'valuemin',\n        ];\n        const getNumericalPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const numericalProperty of numericalProperties) {\n            if (!properties.has(numericalProperty)) {\n                continue;\n            }\n            node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n        }\n        const tokenProperties = [\n            'autocomplete',\n            'haspopup',\n            'invalid',\n            'orientation',\n        ];\n        const getTokenPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const tokenProperty of tokenProperties) {\n            const value = getTokenPropertyValue(tokenProperty);\n            if (!value || value === 'false') {\n                continue;\n            }\n            node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n        }\n        return node;\n    }\n    static createTree(payloads) {\n        const nodeById = new Map();\n        for (const payload of payloads) {\n            nodeById.set(payload.nodeId, new AXNode(payload));\n        }\n        for (const node of nodeById.values()) {\n            for (const childId of node.payload.childIds || []) {\n                const child = nodeById.get(childId);\n                if (child) {\n                    node.children.push(child);\n                }\n            }\n        }\n        return nodeById.values().next().value;\n    }\n}\n_AXNode_richlyEditable = new WeakMap(), _AXNode_editable = new WeakMap(), _AXNode_focusable = new WeakMap(), _AXNode_hidden = new WeakMap(), _AXNode_name = new WeakMap(), _AXNode_role = new WeakMap(), _AXNode_ignored = new WeakMap(), _AXNode_cachedHasFocusableChild = new WeakMap(), _AXNode_instances = new WeakSet(), _AXNode_isPlainTextField = function _AXNode_isPlainTextField() {\n    if (__classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n        return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_editable, \"f\")) {\n        return true;\n    }\n    return __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'textbox' || __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'searchbox';\n}, _AXNode_isTextOnlyObject = function _AXNode_isTextOnlyObject() {\n    const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n    return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n}, _AXNode_hasFocusableChild = function _AXNode_hasFocusableChild() {\n    if (__classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\") === undefined) {\n        __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, false, \"f\");\n        for (const child of this.children) {\n            if (__classPrivateFieldGet(child, _AXNode_focusable, \"f\") || __classPrivateFieldGet(child, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(child)) {\n                __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, true, \"f\");\n                break;\n            }\n        }\n    }\n    return __classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\");\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}