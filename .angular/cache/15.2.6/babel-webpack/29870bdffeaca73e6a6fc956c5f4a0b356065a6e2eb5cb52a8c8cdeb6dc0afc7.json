{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DiskComponent = class DiskComponent {\n  constructor(http, authService, cookieService) {\n    this.http = http;\n    this.authService = authService;\n    this.cookieService = cookieService;\n    this.accessToken = null;\n    const urlParams = new URLSearchParams(window.location.hash.substring(1));\n    this.accessToken = urlParams.get('access_token');\n  }\n  ngOnInit() {\n    if (typeof this.accessToken === \"string\") {\n      localStorage.setItem('access_token', this.accessToken);\n      console.log(jwtDecode(this.accessToken));\n    }\n    this.setToken(this.accessToken);\n    this.getTopTracks();\n  }\n  setToken(token) {\n    // establece la cookie con el nombre 'spotify_token' y un valor de 'token'\n    if (token != null) {\n      this.cookieService.set('spotify_token', token, undefined, '/');\n    }\n  }\n  getTopTracks() {\n    // Obtener el token de acceso del servicio AuthService\n    const accessToken = this.accessToken;\n  }\n};\nDiskComponent = __decorate([Injectable({\n  providedIn: 'root'\n}), Component({\n  selector: 'app-disk',\n  templateUrl: './disk.component.html',\n  styleUrls: ['./disk.component.css']\n})], DiskComponent);\nexport { DiskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAGxBC,YAAoBC,IAAgB,EAAUC,WAAwB,EAAUC,aAA4B;IAAxF,SAAI,GAAJF,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAF7F,gBAAW,GAAkB,IAAI;IAG/B,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxE,IAAI,CAACC,WAAW,GAAGN,SAAS,CAACO,GAAG,CAAC,cAAc,CAAC;EAClD;EACAC,QAAQ;IACN,IAAI,OAAO,IAAI,CAACF,WAAW,KAAK,QAAQ,EAAE;MACxCG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAE,IAAI,CAACJ,WAAW,CAAC;MACtDK,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC,IAAI,CAACP,WAAW,CAAC,CAAC;;IAG1C,IAAI,CAACQ,QAAQ,CAAC,IAAI,CAACR,WAAW,CAAC;IAC/B,IAAI,CAACS,YAAY,EAAE;EACrB;EAEAD,QAAQ,CAACE,KAAoB;IAC3B;IACA,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAC,eAAe,EAAED,KAAK,EAAEE,SAAS,EAAE,GAAG,CAAC;;EAElE;EACAH,YAAY;IACV;IACA,MAAMT,WAAW,GAAG,IAAI,CAACA,WAAW;EAGtC;CAGD;AA/BYX,aAAa,eARzBwB,UAAU,CAAC;EACVC,UAAU,EAAE;CACb,CAAC,EACD1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW5B,aAAa,CA+BzB;SA/BYA,aAAa","names":["Component","DiskComponent","constructor","http","authService","cookieService","urlParams","URLSearchParams","window","location","hash","substring","accessToken","get","ngOnInit","localStorage","setItem","console","log","jwtDecode","setToken","getTopTracks","token","set","undefined","Injectable","providedIn","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/src/app/disk/disk.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport * as SpotifyWebApi from 'spotify-web-api-js';\n@Injectable({\n  providedIn: 'root'\n})\n@Component({\n  selector: 'app-disk',\n  templateUrl: './disk.component.html',\n  styleUrls: ['./disk.component.css']\n})\nexport class DiskComponent implements OnInit{\n  accessToken: string | null = null;\n\n  constructor(private http: HttpClient, private authService: AuthService, private cookieService: CookieService) {\n    const urlParams = new URLSearchParams(window.location.hash.substring(1));\n    this.accessToken = urlParams.get('access_token');\n  }\n  ngOnInit() {\n    if (typeof this.accessToken === \"string\") {\n      localStorage.setItem('access_token', this.accessToken);\n      console.log(jwtDecode(this.accessToken))\n      \n    }\n    this.setToken(this.accessToken);\n    this.getTopTracks();\n  }\n\n  setToken(token: null | string) {\n    // establece la cookie con el nombre 'spotify_token' y un valor de 'token'\n    if (token != null) {\n      this.cookieService.set('spotify_token', token, undefined, '/');\n    }\n  }\n  getTopTracks() {\n    // Obtener el token de acceso del servicio AuthService\n    const accessToken = this.accessToken;\n    \n  \n  }\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}