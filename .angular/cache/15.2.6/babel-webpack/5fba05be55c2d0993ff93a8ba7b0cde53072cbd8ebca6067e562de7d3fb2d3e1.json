{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _HTTPRequest_instances, _HTTPRequest_client, _HTTPRequest_isNavigationRequest, _HTTPRequest_allowInterception, _HTTPRequest_interceptionHandled, _HTTPRequest_url, _HTTPRequest_resourceType, _HTTPRequest_method, _HTTPRequest_postData, _HTTPRequest_headers, _HTTPRequest_frame, _HTTPRequest_continueRequestOverrides, _HTTPRequest_responseForRequest, _HTTPRequest_abortErrorReason, _HTTPRequest_interceptResolutionState, _HTTPRequest_interceptHandlers, _HTTPRequest_initiator, _HTTPRequest_continue, _HTTPRequest_respond, _HTTPRequest_abort;\nimport { headersArray, HTTPRequest as BaseHTTPRequest, InterceptResolutionAction, STATUS_TEXTS } from '../api/HTTPRequest.js';\nimport { assert } from '../util/assert.js';\nimport { debugError, isString } from './util.js';\n/**\n * @internal\n */\nexport class HTTPRequest extends BaseHTTPRequest {\n  get client() {\n    return __classPrivateFieldGet(this, _HTTPRequest_client, \"f\");\n  }\n  constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n    super();\n    _HTTPRequest_instances.add(this);\n    this._failureText = null;\n    this._response = null;\n    this._fromMemoryCache = false;\n    _HTTPRequest_client.set(this, void 0);\n    _HTTPRequest_isNavigationRequest.set(this, void 0);\n    _HTTPRequest_allowInterception.set(this, void 0);\n    _HTTPRequest_interceptionHandled.set(this, false);\n    _HTTPRequest_url.set(this, void 0);\n    _HTTPRequest_resourceType.set(this, void 0);\n    _HTTPRequest_method.set(this, void 0);\n    _HTTPRequest_postData.set(this, void 0);\n    _HTTPRequest_headers.set(this, {});\n    _HTTPRequest_frame.set(this, void 0);\n    _HTTPRequest_continueRequestOverrides.set(this, void 0);\n    _HTTPRequest_responseForRequest.set(this, null);\n    _HTTPRequest_abortErrorReason.set(this, null);\n    _HTTPRequest_interceptResolutionState.set(this, {\n      action: InterceptResolutionAction.None\n    });\n    _HTTPRequest_interceptHandlers.set(this, void 0);\n    _HTTPRequest_initiator.set(this, void 0);\n    __classPrivateFieldSet(this, _HTTPRequest_client, client, \"f\");\n    this._requestId = event.requestId;\n    __classPrivateFieldSet(this, _HTTPRequest_isNavigationRequest, event.requestId === event.loaderId && event.type === 'Document', \"f\");\n    this._interceptionId = interceptionId;\n    __classPrivateFieldSet(this, _HTTPRequest_allowInterception, allowInterception, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_url, event.request.url, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_resourceType, (event.type || 'other').toLowerCase(), \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_method, event.request.method, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_postData, event.request.postData, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_frame, frame, \"f\");\n    this._redirectChain = redirectChain;\n    __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, {}, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_interceptHandlers, [], \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_initiator, event.initiator, \"f\");\n    for (const [key, value] of Object.entries(event.request.headers)) {\n      __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\")[key.toLowerCase()] = value;\n    }\n  }\n  url() {\n    return __classPrivateFieldGet(this, _HTTPRequest_url, \"f\");\n  }\n  continueRequestOverrides() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\");\n  }\n  responseForRequest() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\");\n  }\n  abortErrorReason() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\");\n  }\n  interceptResolutionState() {\n    if (!__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\")) {\n      return {\n        action: InterceptResolutionAction.Disabled\n      };\n    }\n    if (__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\")) {\n      return {\n        action: InterceptResolutionAction.AlreadyHandled\n      };\n    }\n    return {\n      ...__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\")\n    };\n  }\n  isInterceptResolutionHandled() {\n    return __classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\");\n  }\n  enqueueInterceptAction(pendingHandler) {\n    __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").push(pendingHandler);\n  }\n  finalizeInterceptions() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield __classPrivateFieldGet(_this, _HTTPRequest_interceptHandlers, \"f\").reduce((promiseChain, interceptAction) => {\n        return promiseChain.then(interceptAction);\n      }, Promise.resolve());\n      const {\n        action\n      } = _this.interceptResolutionState();\n      switch (action) {\n        case 'abort':\n          return __classPrivateFieldGet(_this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(_this, __classPrivateFieldGet(_this, _HTTPRequest_abortErrorReason, \"f\"));\n        case 'respond':\n          if (__classPrivateFieldGet(_this, _HTTPRequest_responseForRequest, \"f\") === null) {\n            throw new Error('Response is missing for the interception');\n          }\n          return __classPrivateFieldGet(_this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(_this, __classPrivateFieldGet(_this, _HTTPRequest_responseForRequest, \"f\"));\n        case 'continue':\n          return __classPrivateFieldGet(_this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(_this, __classPrivateFieldGet(_this, _HTTPRequest_continueRequestOverrides, \"f\"));\n      }\n    })();\n  }\n  resourceType() {\n    return __classPrivateFieldGet(this, _HTTPRequest_resourceType, \"f\");\n  }\n  method() {\n    return __classPrivateFieldGet(this, _HTTPRequest_method, \"f\");\n  }\n  postData() {\n    return __classPrivateFieldGet(this, _HTTPRequest_postData, \"f\");\n  }\n  headers() {\n    return __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\");\n  }\n  response() {\n    return this._response;\n  }\n  frame() {\n    return __classPrivateFieldGet(this, _HTTPRequest_frame, \"f\");\n  }\n  isNavigationRequest() {\n    return __classPrivateFieldGet(this, _HTTPRequest_isNavigationRequest, \"f\");\n  }\n  initiator() {\n    return __classPrivateFieldGet(this, _HTTPRequest_initiator, \"f\");\n  }\n  redirectChain() {\n    return this._redirectChain.slice();\n  }\n  failure() {\n    if (!this._failureText) {\n      return null;\n    }\n    return {\n      errorText: this._failureText\n    };\n  }\n  continue(overrides = {}, priority) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Request interception is not supported for data: urls.\n      if (__classPrivateFieldGet(_this2, _HTTPRequest_url, \"f\").startsWith('data:')) {\n        return;\n      }\n      assert(__classPrivateFieldGet(_this2, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n      assert(!__classPrivateFieldGet(_this2, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n      if (priority === undefined) {\n        return __classPrivateFieldGet(_this2, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(_this2, overrides);\n      }\n      __classPrivateFieldSet(_this2, _HTTPRequest_continueRequestOverrides, overrides, \"f\");\n      if (__classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority > __classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n        __classPrivateFieldSet(_this2, _HTTPRequest_interceptResolutionState, {\n          action: InterceptResolutionAction.Continue,\n          priority\n        }, \"f\");\n        return;\n      }\n      if (priority === __classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n        if (__classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort' || __classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").action === 'respond') {\n          return;\n        }\n        __classPrivateFieldGet(_this2, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Continue;\n      }\n      return;\n    })();\n  }\n  respond(response, priority) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Mocking responses for dataURL requests is not currently supported.\n      if (__classPrivateFieldGet(_this3, _HTTPRequest_url, \"f\").startsWith('data:')) {\n        return;\n      }\n      assert(__classPrivateFieldGet(_this3, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n      assert(!__classPrivateFieldGet(_this3, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n      if (priority === undefined) {\n        return __classPrivateFieldGet(_this3, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(_this3, response);\n      }\n      __classPrivateFieldSet(_this3, _HTTPRequest_responseForRequest, response, \"f\");\n      if (__classPrivateFieldGet(_this3, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority > __classPrivateFieldGet(_this3, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n        __classPrivateFieldSet(_this3, _HTTPRequest_interceptResolutionState, {\n          action: InterceptResolutionAction.Respond,\n          priority\n        }, \"f\");\n        return;\n      }\n      if (priority === __classPrivateFieldGet(_this3, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n        if (__classPrivateFieldGet(_this3, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort') {\n          return;\n        }\n        __classPrivateFieldGet(_this3, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Respond;\n      }\n    })();\n  }\n  abort(errorCode = 'failed', priority) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Request interception is not supported for data: urls.\n      if (__classPrivateFieldGet(_this4, _HTTPRequest_url, \"f\").startsWith('data:')) {\n        return;\n      }\n      const errorReason = errorReasons[errorCode];\n      assert(errorReason, 'Unknown error code: ' + errorCode);\n      assert(__classPrivateFieldGet(_this4, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n      assert(!__classPrivateFieldGet(_this4, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n      if (priority === undefined) {\n        return __classPrivateFieldGet(_this4, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(_this4, errorReason);\n      }\n      __classPrivateFieldSet(_this4, _HTTPRequest_abortErrorReason, errorReason, \"f\");\n      if (__classPrivateFieldGet(_this4, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority >= __classPrivateFieldGet(_this4, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n        __classPrivateFieldSet(_this4, _HTTPRequest_interceptResolutionState, {\n          action: InterceptResolutionAction.Abort,\n          priority\n        }, \"f\");\n        return;\n      }\n    })();\n  }\n}\n_HTTPRequest_client = new WeakMap(), _HTTPRequest_isNavigationRequest = new WeakMap(), _HTTPRequest_allowInterception = new WeakMap(), _HTTPRequest_interceptionHandled = new WeakMap(), _HTTPRequest_url = new WeakMap(), _HTTPRequest_resourceType = new WeakMap(), _HTTPRequest_method = new WeakMap(), _HTTPRequest_postData = new WeakMap(), _HTTPRequest_headers = new WeakMap(), _HTTPRequest_frame = new WeakMap(), _HTTPRequest_continueRequestOverrides = new WeakMap(), _HTTPRequest_responseForRequest = new WeakMap(), _HTTPRequest_abortErrorReason = new WeakMap(), _HTTPRequest_interceptResolutionState = new WeakMap(), _HTTPRequest_interceptHandlers = new WeakMap(), _HTTPRequest_initiator = new WeakMap(), _HTTPRequest_instances = new WeakSet(), _HTTPRequest_continue = /*#__PURE__*/function () {\n  var _HTTPRequest_continue2 = _asyncToGenerator(function* (overrides = {}) {\n    const {\n      url,\n      method,\n      postData,\n      headers\n    } = overrides;\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const postDataBinaryBase64 = postData ? Buffer.from(postData).toString('base64') : undefined;\n    if (this._interceptionId === undefined) {\n      throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.continueRequest');\n    }\n    yield __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.continueRequest', {\n      requestId: this._interceptionId,\n      url,\n      method,\n      postData: postDataBinaryBase64,\n      headers: headers ? headersArray(headers) : undefined\n    }).catch(error => {\n      __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n      return handleError(error);\n    });\n  });\n  function _HTTPRequest_continue() {\n    return _HTTPRequest_continue2.apply(this, arguments);\n  }\n  return _HTTPRequest_continue;\n}(), _HTTPRequest_respond = /*#__PURE__*/function () {\n  var _HTTPRequest_respond2 = _asyncToGenerator(function* (response) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const responseBody = response.body && isString(response.body) ? Buffer.from(response.body) : response.body || null;\n    const responseHeaders = {};\n    if (response.headers) {\n      for (const header of Object.keys(response.headers)) {\n        const value = response.headers[header];\n        responseHeaders[header.toLowerCase()] = Array.isArray(value) ? value.map(item => {\n          return String(item);\n        }) : String(value);\n      }\n    }\n    if (response.contentType) {\n      responseHeaders['content-type'] = response.contentType;\n    }\n    if (responseBody && !('content-length' in responseHeaders)) {\n      responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    }\n    const status = response.status || 200;\n    if (this._interceptionId === undefined) {\n      throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.fulfillRequest');\n    }\n    yield __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.fulfillRequest', {\n      requestId: this._interceptionId,\n      responseCode: status,\n      responsePhrase: STATUS_TEXTS[status],\n      responseHeaders: headersArray(responseHeaders),\n      body: responseBody ? responseBody.toString('base64') : undefined\n    }).catch(error => {\n      __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n      return handleError(error);\n    });\n  });\n  function _HTTPRequest_respond(_x) {\n    return _HTTPRequest_respond2.apply(this, arguments);\n  }\n  return _HTTPRequest_respond;\n}(), _HTTPRequest_abort = /*#__PURE__*/function () {\n  var _HTTPRequest_abort2 = _asyncToGenerator(function* (errorReason) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    if (this._interceptionId === undefined) {\n      throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.failRequest');\n    }\n    yield __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.failRequest', {\n      requestId: this._interceptionId,\n      errorReason: errorReason || 'Failed'\n    }).catch(handleError);\n  });\n  function _HTTPRequest_abort(_x2) {\n    return _HTTPRequest_abort2.apply(this, arguments);\n  }\n  return _HTTPRequest_abort;\n}();\nconst errorReasons = {\n  aborted: 'Aborted',\n  accessdenied: 'AccessDenied',\n  addressunreachable: 'AddressUnreachable',\n  blockedbyclient: 'BlockedByClient',\n  blockedbyresponse: 'BlockedByResponse',\n  connectionaborted: 'ConnectionAborted',\n  connectionclosed: 'ConnectionClosed',\n  connectionfailed: 'ConnectionFailed',\n  connectionrefused: 'ConnectionRefused',\n  connectionreset: 'ConnectionReset',\n  internetdisconnected: 'InternetDisconnected',\n  namenotresolved: 'NameNotResolved',\n  timedout: 'TimedOut',\n  failed: 'Failed'\n};\nfunction handleError(_x3) {\n  return _handleError.apply(this, arguments);\n}\nfunction _handleError() {\n  _handleError = _asyncToGenerator(function* (error) {\n    if (['Invalid header'].includes(error.originalMessage)) {\n      throw error;\n    }\n    // In certain cases, protocol will return error if the request was\n    // already canceled or the page was closed. We should tolerate these\n    // errors.\n    debugError(error);\n  });\n  return _handleError.apply(this, arguments);\n}","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_HTTPRequest_instances","_HTTPRequest_client","_HTTPRequest_isNavigationRequest","_HTTPRequest_allowInterception","_HTTPRequest_interceptionHandled","_HTTPRequest_url","_HTTPRequest_resourceType","_HTTPRequest_method","_HTTPRequest_postData","_HTTPRequest_headers","_HTTPRequest_frame","_HTTPRequest_continueRequestOverrides","_HTTPRequest_responseForRequest","_HTTPRequest_abortErrorReason","_HTTPRequest_interceptResolutionState","_HTTPRequest_interceptHandlers","_HTTPRequest_initiator","_HTTPRequest_continue","_HTTPRequest_respond","_HTTPRequest_abort","headersArray","HTTPRequest","BaseHTTPRequest","InterceptResolutionAction","STATUS_TEXTS","assert","debugError","isString","client","constructor","frame","interceptionId","allowInterception","event","redirectChain","add","_failureText","_response","_fromMemoryCache","action","None","_requestId","requestId","loaderId","type","_interceptionId","request","url","toLowerCase","method","postData","_redirectChain","initiator","key","Object","entries","headers","continueRequestOverrides","responseForRequest","abortErrorReason","interceptResolutionState","Disabled","AlreadyHandled","isInterceptResolutionHandled","enqueueInterceptAction","pendingHandler","push","finalizeInterceptions","reduce","promiseChain","interceptAction","then","Promise","resolve","Error","resourceType","response","isNavigationRequest","slice","failure","errorText","continue","overrides","priority","startsWith","undefined","Continue","respond","Respond","abort","errorCode","errorReason","errorReasons","Abort","WeakMap","WeakSet","postDataBinaryBase64","Buffer","from","toString","send","catch","error","handleError","responseBody","body","responseHeaders","header","keys","Array","isArray","map","item","String","contentType","byteLength","status","responseCode","responsePhrase","aborted","accessdenied","addressunreachable","blockedbyclient","blockedbyresponse","connectionaborted","connectionclosed","connectionfailed","connectionrefused","connectionreset","internetdisconnected","namenotresolved","timedout","failed","includes","originalMessage"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/HTTPRequest.js"],"sourcesContent":["var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _HTTPRequest_instances, _HTTPRequest_client, _HTTPRequest_isNavigationRequest, _HTTPRequest_allowInterception, _HTTPRequest_interceptionHandled, _HTTPRequest_url, _HTTPRequest_resourceType, _HTTPRequest_method, _HTTPRequest_postData, _HTTPRequest_headers, _HTTPRequest_frame, _HTTPRequest_continueRequestOverrides, _HTTPRequest_responseForRequest, _HTTPRequest_abortErrorReason, _HTTPRequest_interceptResolutionState, _HTTPRequest_interceptHandlers, _HTTPRequest_initiator, _HTTPRequest_continue, _HTTPRequest_respond, _HTTPRequest_abort;\nimport { headersArray, HTTPRequest as BaseHTTPRequest, InterceptResolutionAction, STATUS_TEXTS, } from '../api/HTTPRequest.js';\nimport { assert } from '../util/assert.js';\nimport { debugError, isString } from './util.js';\n/**\n * @internal\n */\nexport class HTTPRequest extends BaseHTTPRequest {\n    get client() {\n        return __classPrivateFieldGet(this, _HTTPRequest_client, \"f\");\n    }\n    constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n        super();\n        _HTTPRequest_instances.add(this);\n        this._failureText = null;\n        this._response = null;\n        this._fromMemoryCache = false;\n        _HTTPRequest_client.set(this, void 0);\n        _HTTPRequest_isNavigationRequest.set(this, void 0);\n        _HTTPRequest_allowInterception.set(this, void 0);\n        _HTTPRequest_interceptionHandled.set(this, false);\n        _HTTPRequest_url.set(this, void 0);\n        _HTTPRequest_resourceType.set(this, void 0);\n        _HTTPRequest_method.set(this, void 0);\n        _HTTPRequest_postData.set(this, void 0);\n        _HTTPRequest_headers.set(this, {});\n        _HTTPRequest_frame.set(this, void 0);\n        _HTTPRequest_continueRequestOverrides.set(this, void 0);\n        _HTTPRequest_responseForRequest.set(this, null);\n        _HTTPRequest_abortErrorReason.set(this, null);\n        _HTTPRequest_interceptResolutionState.set(this, {\n            action: InterceptResolutionAction.None,\n        });\n        _HTTPRequest_interceptHandlers.set(this, void 0);\n        _HTTPRequest_initiator.set(this, void 0);\n        __classPrivateFieldSet(this, _HTTPRequest_client, client, \"f\");\n        this._requestId = event.requestId;\n        __classPrivateFieldSet(this, _HTTPRequest_isNavigationRequest, event.requestId === event.loaderId && event.type === 'Document', \"f\");\n        this._interceptionId = interceptionId;\n        __classPrivateFieldSet(this, _HTTPRequest_allowInterception, allowInterception, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_url, event.request.url, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_resourceType, (event.type || 'other').toLowerCase(), \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_method, event.request.method, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_postData, event.request.postData, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_frame, frame, \"f\");\n        this._redirectChain = redirectChain;\n        __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, {}, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_interceptHandlers, [], \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_initiator, event.initiator, \"f\");\n        for (const [key, value] of Object.entries(event.request.headers)) {\n            __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\")[key.toLowerCase()] = value;\n        }\n    }\n    url() {\n        return __classPrivateFieldGet(this, _HTTPRequest_url, \"f\");\n    }\n    continueRequestOverrides() {\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\");\n    }\n    responseForRequest() {\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\");\n    }\n    abortErrorReason() {\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\");\n    }\n    interceptResolutionState() {\n        if (!__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\")) {\n            return { action: InterceptResolutionAction.Disabled };\n        }\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\")) {\n            return { action: InterceptResolutionAction.AlreadyHandled };\n        }\n        return { ...__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\") };\n    }\n    isInterceptResolutionHandled() {\n        return __classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\");\n    }\n    enqueueInterceptAction(pendingHandler) {\n        __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").push(pendingHandler);\n    }\n    async finalizeInterceptions() {\n        await __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").reduce((promiseChain, interceptAction) => {\n            return promiseChain.then(interceptAction);\n        }, Promise.resolve());\n        const { action } = this.interceptResolutionState();\n        switch (action) {\n            case 'abort':\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\"));\n            case 'respond':\n                if (__classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\") === null) {\n                    throw new Error('Response is missing for the interception');\n                }\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\"));\n            case 'continue':\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\"));\n        }\n    }\n    resourceType() {\n        return __classPrivateFieldGet(this, _HTTPRequest_resourceType, \"f\");\n    }\n    method() {\n        return __classPrivateFieldGet(this, _HTTPRequest_method, \"f\");\n    }\n    postData() {\n        return __classPrivateFieldGet(this, _HTTPRequest_postData, \"f\");\n    }\n    headers() {\n        return __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\");\n    }\n    response() {\n        return this._response;\n    }\n    frame() {\n        return __classPrivateFieldGet(this, _HTTPRequest_frame, \"f\");\n    }\n    isNavigationRequest() {\n        return __classPrivateFieldGet(this, _HTTPRequest_isNavigationRequest, \"f\");\n    }\n    initiator() {\n        return __classPrivateFieldGet(this, _HTTPRequest_initiator, \"f\");\n    }\n    redirectChain() {\n        return this._redirectChain.slice();\n    }\n    failure() {\n        if (!this._failureText) {\n            return null;\n        }\n        return {\n            errorText: this._failureText,\n        };\n    }\n    async continue(overrides = {}, priority) {\n        // Request interception is not supported for data: urls.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, overrides);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, overrides, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Continue,\n                priority,\n            }, \"f\");\n            return;\n        }\n        if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort' ||\n                __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'respond') {\n                return;\n            }\n            __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action =\n                InterceptResolutionAction.Continue;\n        }\n        return;\n    }\n    async respond(response, priority) {\n        // Mocking responses for dataURL requests is not currently supported.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, response);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_responseForRequest, response, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Respond,\n                priority,\n            }, \"f\");\n            return;\n        }\n        if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort') {\n                return;\n            }\n            __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Respond;\n        }\n    }\n    async abort(errorCode = 'failed', priority) {\n        // Request interception is not supported for data: urls.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        const errorReason = errorReasons[errorCode];\n        assert(errorReason, 'Unknown error code: ' + errorCode);\n        assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, errorReason);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_abortErrorReason, errorReason, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority >= __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Abort,\n                priority,\n            }, \"f\");\n            return;\n        }\n    }\n}\n_HTTPRequest_client = new WeakMap(), _HTTPRequest_isNavigationRequest = new WeakMap(), _HTTPRequest_allowInterception = new WeakMap(), _HTTPRequest_interceptionHandled = new WeakMap(), _HTTPRequest_url = new WeakMap(), _HTTPRequest_resourceType = new WeakMap(), _HTTPRequest_method = new WeakMap(), _HTTPRequest_postData = new WeakMap(), _HTTPRequest_headers = new WeakMap(), _HTTPRequest_frame = new WeakMap(), _HTTPRequest_continueRequestOverrides = new WeakMap(), _HTTPRequest_responseForRequest = new WeakMap(), _HTTPRequest_abortErrorReason = new WeakMap(), _HTTPRequest_interceptResolutionState = new WeakMap(), _HTTPRequest_interceptHandlers = new WeakMap(), _HTTPRequest_initiator = new WeakMap(), _HTTPRequest_instances = new WeakSet(), _HTTPRequest_continue = async function _HTTPRequest_continue(overrides = {}) {\n    const { url, method, postData, headers } = overrides;\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const postDataBinaryBase64 = postData\n        ? Buffer.from(postData).toString('base64')\n        : undefined;\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.continueRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.continueRequest', {\n        requestId: this._interceptionId,\n        url,\n        method,\n        postData: postDataBinaryBase64,\n        headers: headers ? headersArray(headers) : undefined,\n    })\n        .catch(error => {\n        __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n        return handleError(error);\n    });\n}, _HTTPRequest_respond = async function _HTTPRequest_respond(response) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const responseBody = response.body && isString(response.body)\n        ? Buffer.from(response.body)\n        : response.body || null;\n    const responseHeaders = {};\n    if (response.headers) {\n        for (const header of Object.keys(response.headers)) {\n            const value = response.headers[header];\n            responseHeaders[header.toLowerCase()] = Array.isArray(value)\n                ? value.map(item => {\n                    return String(item);\n                })\n                : String(value);\n        }\n    }\n    if (response.contentType) {\n        responseHeaders['content-type'] = response.contentType;\n    }\n    if (responseBody && !('content-length' in responseHeaders)) {\n        responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    }\n    const status = response.status || 200;\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.fulfillRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.fulfillRequest', {\n        requestId: this._interceptionId,\n        responseCode: status,\n        responsePhrase: STATUS_TEXTS[status],\n        responseHeaders: headersArray(responseHeaders),\n        body: responseBody ? responseBody.toString('base64') : undefined,\n    })\n        .catch(error => {\n        __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n        return handleError(error);\n    });\n}, _HTTPRequest_abort = async function _HTTPRequest_abort(errorReason) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.failRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.failRequest', {\n        requestId: this._interceptionId,\n        errorReason: errorReason || 'Failed',\n    })\n        .catch(handleError);\n};\nconst errorReasons = {\n    aborted: 'Aborted',\n    accessdenied: 'AccessDenied',\n    addressunreachable: 'AddressUnreachable',\n    blockedbyclient: 'BlockedByClient',\n    blockedbyresponse: 'BlockedByResponse',\n    connectionaborted: 'ConnectionAborted',\n    connectionclosed: 'ConnectionClosed',\n    connectionfailed: 'ConnectionFailed',\n    connectionrefused: 'ConnectionRefused',\n    connectionreset: 'ConnectionReset',\n    internetdisconnected: 'InternetDisconnected',\n    namenotresolved: 'NameNotResolved',\n    timedout: 'TimedOut',\n    failed: 'Failed',\n};\nasync function handleError(error) {\n    if (['Invalid header'].includes(error.originalMessage)) {\n        throw error;\n    }\n    // In certain cases, protocol will return error if the request was\n    // already canceled or the page was closed. We should tolerate these\n    // errors.\n    debugError(error);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}