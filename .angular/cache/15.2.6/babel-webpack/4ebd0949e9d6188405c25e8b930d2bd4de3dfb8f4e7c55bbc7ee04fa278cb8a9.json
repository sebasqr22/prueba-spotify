{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AppComponent {\n  constructor() {\n    this.title = 'spotify';\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 0,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nvar express = require('express'); // Express web server framework\nvar request = require('request'); // \"Request\" library\nvar cors = require('cors');\nvar querystring = require('querystring');\nvar cookieParser = require('cookie-parser');\nvar client_id = 'CLIENT_ID'; // Your client id\nvar client_secret = 'CLIENT_SECRET'; // Your secret\nvar redirect_uri = 'REDIRECT_URI'; // Your redirect uri\n/**\n * Generates a random string containing numbers and letters\n * @param  {number} length The length of the string\n * @return {string} The generated string\n */\nvar generateRandomString = function (length) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\nvar stateKey = 'spotify_auth_state';\nvar app = express();\napp.use(express.static(__dirname + '/public')).use(cors()).use(cookieParser());\napp.get('/login', function (req, res) {\n  var state = generateRandomString(16);\n  res.cookie(stateKey, state);\n  // your application requests authorization\n  var scope = 'user-read-private user-read-email';\n  res.redirect('https://accounts.spotify.com/authorize?' + querystring.stringify({\n    response_type: 'code',\n    client_id: client_id,\n    scope: scope,\n    redirect_uri: redirect_uri,\n    state: state\n  }));\n});\napp.get('/callback', function (req, res) {\n  // your application requests refresh and access tokens\n  // after checking the state parameter\n  var code = req.query.code || null;\n  var state = req.query.state || null;\n  var storedState = req.cookies ? req.cookies[stateKey] : null;\n  if (state === null || state !== storedState) {\n    res.redirect('/#' + querystring.stringify({\n      error: 'state_mismatch'\n    }));\n  } else {\n    res.clearCookie(stateKey);\n    var authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      form: {\n        code: code,\n        redirect_uri: redirect_uri,\n        grant_type: 'authorization_code'\n      },\n      headers: {\n        'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n      },\n      json: true\n    };\n    request.post(authOptions, function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        var access_token = body.access_token,\n          refresh_token = body.refresh_token;\n        var options = {\n          url: 'https://api.spotify.com/v1/me',\n          headers: {\n            'Authorization': 'Bearer ' + access_token\n          },\n          json: true\n        };\n        // use the access token to access the Spotify Web API\n        request.get(options, function (error, response, body) {\n          console.log(body);\n        });\n        // we can also pass the token to the browser to make requests from there\n        res.redirect('/#' + querystring.stringify({\n          access_token: access_token,\n          refresh_token: refresh_token\n        }));\n      } else {\n        res.redirect('/#' + querystring.stringify({\n          error: 'invalid_token'\n        }));\n      }\n    });\n  }\n});\napp.get('/refresh_token', function (req, res) {\n  // requesting access token from refresh token\n  var refresh_token = req.query.refresh_token;\n  var authOptions = {\n    url: 'https://accounts.spotify.com/api/token',\n    headers: {\n      'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n    },\n    form: {\n      grant_type: 'refresh_token',\n      refresh_token: refresh_token\n    },\n    json: true\n  };\n  request.post(authOptions, function (error, response, body) {\n    if (!error && response.statusCode === 200) {\n      var access_token = body.access_token;\n      res.send({\n        'access_token': access_token\n      });\n    }\n  });\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","selectors","decls","vars","template","styles","express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send"],"sourceRoot":"","sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'spotify';\n  var express = require('express'); // Express web server framework\n  var request = require('request'); // \"Request\" library\n  var cors = require('cors');\n  var querystring = require('querystring');\n  var cookieParser = require('cookie-parser');\n\n  var client_id = 'CLIENT_ID'; // Your client id\n  var client_secret = 'CLIENT_SECRET'; // Your secret\n  var redirect_uri = 'REDIRECT_URI'; // Your redirect uri\n\n  /**\n   * Generates a random string containing numbers and letters\n   * @param  {number} length The length of the string\n   * @return {string} The generated string\n   */\n  var generateRandomString = function(length) {\n    var text = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  var stateKey = 'spotify_auth_state';\n\n  var app = express();\n\n  app.use(express.static(__dirname + '/public'))\n.use(cors())\n.use(cookieParser());\n\n  app.get('/login', function(req, res) {\n\n    var state = generateRandomString(16);\n    res.cookie(stateKey, state);\n\n    // your application requests authorization\n    var scope = 'user-read-private user-read-email';\n    res.redirect('https://accounts.spotify.com/authorize?' +\n        querystring.stringify({\n          response_type: 'code',\n          client_id: client_id,\n          scope: scope,\n          redirect_uri: redirect_uri,\n          state: state\n        }));\n  });\n\n  app.get('/callback', function(req, res) {\n\n    // your application requests refresh and access tokens\n    // after checking the state parameter\n\n    var code = req.query.code || null;\n    var state = req.query.state || null;\n    var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n    if (state === null || state !== storedState) {\n      res.redirect('/#' +\n          querystring.stringify({\n            error: 'state_mismatch'\n          }));\n    } else {\n      res.clearCookie(stateKey);\n      var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        form: {\n          code: code,\n          redirect_uri: redirect_uri,\n          grant_type: 'authorization_code'\n        },\n        headers: {\n          'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n        },\n        json: true\n      };\n\n      request.post(authOptions, function(error, response, body) {\n        if (!error && response.statusCode === 200) {\n\n          var access_token = body.access_token,\n              refresh_token = body.refresh_token;\n\n          var options = {\n            url: 'https://api.spotify.com/v1/me',\n            headers: { 'Authorization': 'Bearer ' + access_token },\n            json: true\n          };\n\n          // use the access token to access the Spotify Web API\n          request.get(options, function(error, response, body) {\n            console.log(body);\n          });\n\n          // we can also pass the token to the browser to make requests from there\n          res.redirect('/#' +\n              querystring.stringify({\n                access_token: access_token,\n                refresh_token: refresh_token\n              }));\n        } else {\n          res.redirect('/#' +\n              querystring.stringify({\n                error: 'invalid_token'\n              }));\n        }\n      });\n    }\n  });\n\n  app.get('/refresh_token', function(req, res) {\n\n    // requesting access token from refresh token\n    var refresh_token = req.query.refresh_token;\n    var authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },\n      form: {\n        grant_type: 'refresh_token',\n        refresh_token: refresh_token\n      },\n      json: true\n    };\n\n    request.post(authOptions, function(error, response, body) {\n      if (!error && response.statusCode === 200) {\n        var access_token = body.access_token;\n        res.send({\n          'access_token': access_token\n        });\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}