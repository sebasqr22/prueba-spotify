{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nexport class HTTPResponse {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * @internal\n   */\n  _resolveBody(_err) {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The IP address and port number used to connect to the remote\n   * server.\n   */\n  remoteAddress() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The URL of the response.\n   */\n  url() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was successful (status in the range 200-299).\n   */\n  ok() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The status code of the response (e.g., 200 for a success).\n   */\n  status() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The status text of the response (e.g. usually an \"OK\" for a\n   * success).\n   */\n  statusText() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * An object with HTTP headers associated with the response. All\n   * header names are lower-case.\n   */\n  headers() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * {@link SecurityDetails} if the response was received over the\n   * secure connection, or `null` otherwise.\n   */\n  securityDetails() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Timing information related to the response.\n   */\n  timing() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Promise which resolves to a buffer with response body.\n   */\n  buffer() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Promise which resolves to a text representation of response body.\n   */\n  text() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const content = yield _this.buffer();\n      return content.toString('utf8');\n    })();\n  }\n  /**\n   * Promise which resolves to a JSON representation of response body.\n   *\n   * @remarks\n   *\n   * This method will throw if the response body is not parsable via\n   * `JSON.parse`.\n   */\n  json() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const content = yield _this2.text();\n      return JSON.parse(content);\n    })();\n  }\n  /**\n   * A matching {@link HTTPRequest} object.\n   */\n  request() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was served from either the browser's disk\n   * cache or memory cache.\n   */\n  fromCache() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was served by a service worker.\n   */\n  fromServiceWorker() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * A {@link Frame} that initiated this response, or `null` if\n   * navigating to error pages.\n   */\n  frame() {\n    throw new Error('Not implemented');\n  }\n}","map":{"version":3,"names":["HTTPResponse","constructor","_resolveBody","_err","Error","remoteAddress","url","ok","status","statusText","headers","securityDetails","timing","buffer","text","content","toString","json","JSON","parse","request","fromCache","fromServiceWorker","frame"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/api/HTTPResponse.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nexport class HTTPResponse {\n    /**\n     * @internal\n     */\n    constructor() { }\n    /**\n     * @internal\n     */\n    _resolveBody(_err) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * The IP address and port number used to connect to the remote\n     * server.\n     */\n    remoteAddress() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * The URL of the response.\n     */\n    url() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * True if the response was successful (status in the range 200-299).\n     */\n    ok() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * The status code of the response (e.g., 200 for a success).\n     */\n    status() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * The status text of the response (e.g. usually an \"OK\" for a\n     * success).\n     */\n    statusText() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * An object with HTTP headers associated with the response. All\n     * header names are lower-case.\n     */\n    headers() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * {@link SecurityDetails} if the response was received over the\n     * secure connection, or `null` otherwise.\n     */\n    securityDetails() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Timing information related to the response.\n     */\n    timing() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Promise which resolves to a buffer with response body.\n     */\n    buffer() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Promise which resolves to a text representation of response body.\n     */\n    async text() {\n        const content = await this.buffer();\n        return content.toString('utf8');\n    }\n    /**\n     * Promise which resolves to a JSON representation of response body.\n     *\n     * @remarks\n     *\n     * This method will throw if the response body is not parsable via\n     * `JSON.parse`.\n     */\n    async json() {\n        const content = await this.text();\n        return JSON.parse(content);\n    }\n    /**\n     * A matching {@link HTTPRequest} object.\n     */\n    request() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * True if the response was served from either the browser's disk\n     * cache or memory cache.\n     */\n    fromCache() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * True if the response was served by a service worker.\n     */\n    fromServiceWorker() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * A {@link Frame} that initiated this response, or `null` if\n     * navigating to error pages.\n     */\n    frame() {\n        throw new Error('Not implemented');\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,CAAC;EACtB;AACJ;AACA;EACIC,WAAW,GAAG,CAAE;EAChB;AACJ;AACA;EACIC,YAAY,CAACC,IAAI,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIC,aAAa,GAAG;IACZ,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIE,GAAG,GAAG;IACF,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIG,EAAE,GAAG;IACD,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACII,MAAM,GAAG;IACL,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIK,UAAU,GAAG;IACT,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIM,OAAO,GAAG;IACN,MAAM,IAAIN,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIO,eAAe,GAAG;IACd,MAAM,IAAIP,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIQ,MAAM,GAAG;IACL,MAAM,IAAIR,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIS,MAAM,GAAG;IACL,MAAM,IAAIT,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACUU,IAAI,GAAG;IAAA;IAAA;MACT,MAAMC,OAAO,SAAS,KAAI,CAACF,MAAM,EAAE;MACnC,OAAOE,OAAO,CAACC,QAAQ,CAAC,MAAM,CAAC;IAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUC,IAAI,GAAG;IAAA;IAAA;MACT,MAAMF,OAAO,SAAS,MAAI,CAACD,IAAI,EAAE;MACjC,OAAOI,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;IAAC;EAC/B;EACA;AACJ;AACA;EACIK,OAAO,GAAG;IACN,MAAM,IAAIhB,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIiB,SAAS,GAAG;IACR,MAAM,IAAIjB,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIkB,iBAAiB,GAAG;IAChB,MAAM,IAAIlB,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACImB,KAAK,GAAG;IACJ,MAAM,IAAInB,KAAK,CAAC,iBAAiB,CAAC;EACtC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}