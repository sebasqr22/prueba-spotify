{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Frame_url, _Frame_detached, _Frame_client;\nimport { assert } from '../util/assert.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { getQueryHandlerAndSelector } from './GetQueryHandler.js';\nimport { IsolatedWorld } from './IsolatedWorld.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { LazyArg } from './LazyArg.js';\nimport { LifecycleWatcher } from './LifecycleWatcher.js';\nimport { importFSPromises } from './util.js';\n/**\n * Represents a DOM frame.\n *\n * To understand frames, you can think of frames as `<iframe>` elements. Just\n * like iframes, frames can be nested, and when JavaScript is executed in a\n * frame, the JavaScript does not effect frames inside the ambient frame the\n * JavaScript executes in.\n *\n * @example\n * At any point in time, {@link Page | pages} expose their current frame\n * tree via the {@link Page.mainFrame} and {@link Frame.childFrames} methods.\n *\n * @example\n * An example of dumping frame tree:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com/chrome/browser/canary.html');\n *   dumpFrameTree(page.mainFrame(), '');\n *   await browser.close();\n *\n *   function dumpFrameTree(frame, indent) {\n *     console.log(indent + frame.url());\n *     for (const child of frame.childFrames()) {\n *       dumpFrameTree(child, indent + '  ');\n *     }\n *   }\n * })();\n * ```\n *\n * @example\n * An example of getting text from an iframe element:\n *\n * ```ts\n * const frame = page.frames().find(frame => frame.name() === 'myframe');\n * const text = await frame.$eval('.selector', element => element.textContent);\n * console.log(text);\n * ```\n *\n * @remarks\n * Frame lifecycles are controlled by three events that are all dispatched on\n * the parent {@link Frame.page | page}:\n *\n * - {@link PageEmittedEvents.FrameAttached}\n * - {@link PageEmittedEvents.FrameNavigated}\n * - {@link PageEmittedEvents.FrameDetached}\n *\n * @public\n */\nexport class Frame {\n  /**\n   * @internal\n   */\n  constructor(frameManager, frameId, parentFrameId, client) {\n    _Frame_url.set(this, '');\n    _Frame_detached.set(this, false);\n    _Frame_client.set(this, void 0);\n    /**\n     * @internal\n     */\n    this._loaderId = '';\n    /**\n     * @internal\n     */\n    this._hasStartedLoading = false;\n    /**\n     * @internal\n     */\n    this._lifecycleEvents = new Set();\n    this._frameManager = frameManager;\n    __classPrivateFieldSet(this, _Frame_url, '', \"f\");\n    this._id = frameId;\n    this._parentId = parentFrameId;\n    __classPrivateFieldSet(this, _Frame_detached, false, \"f\");\n    this._loaderId = '';\n    this.updateClient(client);\n  }\n  /**\n   * @internal\n   */\n  updateClient(client) {\n    __classPrivateFieldSet(this, _Frame_client, client, \"f\");\n    this.worlds = {\n      [MAIN_WORLD]: new IsolatedWorld(this),\n      [PUPPETEER_WORLD]: new IsolatedWorld(this)\n    };\n  }\n  /**\n   * The page associated with the frame.\n   */\n  page() {\n    return this._frameManager.page();\n  }\n  /**\n   * Is `true` if the frame is an out-of-process (OOP) frame. Otherwise,\n   * `false`.\n   */\n  isOOPFrame() {\n    return __classPrivateFieldGet(this, _Frame_client, \"f\") !== this._frameManager.client;\n  }\n  /**\n   * Navigates a frame to the given url.\n   *\n   * @remarks\n   * Navigation to `about:blank` or navigation to the same URL with a different\n   * hash will succeed and return `null`.\n   *\n   * :::warning\n   *\n   * Headless mode doesn't support navigation to a PDF document. See the {@link\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=761295 | upstream\n   * issue}.\n   *\n   * :::\n   *\n   * @param url - the URL to navigate the frame to. This should include the\n   * scheme, e.g. `https://`.\n   * @param options - navigation options. `waitUntil` is useful to define when\n   * the navigation should be considered successful - see the docs for\n   * {@link PuppeteerLifeCycleEvent} for more details.\n   *\n   * @returns A promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect.\n   * @throws This method will throw an error if:\n   *\n   * - there's an SSL error (e.g. in case of self-signed certificates).\n   * - target URL is invalid.\n   * - the `timeout` is exceeded during navigation.\n   * - the remote server does not respond or is unreachable.\n   * - the main resource failed to load.\n   *\n   * This method will not throw an error when any valid HTTP status code is\n   * returned by the remote server, including 404 \"Not Found\" and 500 \"Internal\n   * Server Error\". The status code for such responses can be retrieved by\n   * calling {@link HTTPResponse.status}.\n   */\n  goto(url, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        referer = _this._frameManager.networkManager.extraHTTPHeaders()['referer'],\n        referrerPolicy = _this._frameManager.networkManager.extraHTTPHeaders()['referer-policy'],\n        waitUntil = ['load'],\n        timeout = _this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      let ensureNewDocumentNavigation = false;\n      const watcher = new LifecycleWatcher(_this._frameManager, _this, waitUntil, timeout);\n      let error = yield Promise.race([navigate(__classPrivateFieldGet(_this, _Frame_client, \"f\"), url, referer, referrerPolicy, _this._id), watcher.timeoutOrTerminationPromise()]);\n      if (!error) {\n        error = yield Promise.race([watcher.timeoutOrTerminationPromise(), ensureNewDocumentNavigation ? watcher.newDocumentNavigationPromise() : watcher.sameDocumentNavigationPromise()]);\n      }\n      try {\n        if (error) {\n          throw error;\n        }\n        return yield watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n      function navigate(_x, _x2, _x3, _x4, _x5) {\n        return _navigate.apply(this, arguments);\n      }\n      function _navigate() {\n        _navigate = _asyncToGenerator(function* (client, url, referrer, referrerPolicy, frameId) {\n          try {\n            const response = yield client.send('Page.navigate', {\n              url,\n              referrer,\n              frameId,\n              referrerPolicy\n            });\n            ensureNewDocumentNavigation = !!response.loaderId;\n            if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n              return null;\n            }\n            return response.errorText ? new Error(`${response.errorText} at ${url}`) : null;\n          } catch (error) {\n            if (isErrorLike(error)) {\n              return error;\n            }\n            throw error;\n          }\n        });\n        return _navigate.apply(this, arguments);\n      }\n    })();\n  }\n  /**\n   * Waits for the frame to navigate. It is useful for when you run code which\n   * will indirectly cause the frame to navigate.\n   *\n   * Usage of the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n   * to change the URL is considered a navigation.\n   *\n   * @example\n   *\n   * ```ts\n   * const [response] = await Promise.all([\n   *   // The navigation promise resolves after navigation has finished\n   *   frame.waitForNavigation(),\n   *   // Clicking the link will indirectly cause a navigation\n   *   frame.click('a.my-link'),\n   * ]);\n   * ```\n   *\n   * @param options - options to configure when the navigation is consided\n   * finished.\n   * @returns a promise that resolves when the frame navigates to a new URL.\n   */\n  waitForNavigation(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        waitUntil = ['load'],\n        timeout = _this2._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      const watcher = new LifecycleWatcher(_this2._frameManager, _this2, waitUntil, timeout);\n      const error = yield Promise.race([watcher.timeoutOrTerminationPromise(), watcher.sameDocumentNavigationPromise(), watcher.newDocumentNavigationPromise()]);\n      try {\n        if (error) {\n          throw error;\n        }\n        return yield watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n    })();\n  }\n  /**\n   * @internal\n   */\n  _client() {\n    return __classPrivateFieldGet(this, _Frame_client, \"f\");\n  }\n  /**\n   * @internal\n   */\n  executionContext() {\n    return this.worlds[MAIN_WORLD].executionContext();\n  }\n  /**\n   * Behaves identically to {@link Page.evaluateHandle} except it's run within\n   * the context of this frame.\n   *\n   * @see {@link Page.evaluateHandle} for details.\n   */\n  evaluateHandle(pageFunction, ...args) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.worlds[MAIN_WORLD].evaluateHandle(pageFunction, ...args);\n    })();\n  }\n  /**\n   * Behaves identically to {@link Page.evaluate} except it's run within the\n   * the context of this frame.\n   *\n   * @see {@link Page.evaluate} for details.\n   */\n  evaluate(pageFunction, ...args) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.worlds[MAIN_WORLD].evaluate(pageFunction, ...args);\n    })();\n  }\n  /**\n   * Queries the frame for an element matching the given selector.\n   *\n   * @param selector - The selector to query for.\n   * @returns A {@link ElementHandle | element handle} to the first element\n   * matching the given selector. Otherwise, `null`.\n   */\n  $(selector) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.worlds[MAIN_WORLD].$(selector);\n    })();\n  }\n  /**\n   * Queries the frame for all elements matching the given selector.\n   *\n   * @param selector - The selector to query for.\n   * @returns An array of {@link ElementHandle | element handles} that point to\n   * elements matching the given selector.\n   */\n  $$(selector) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.worlds[MAIN_WORLD].$$(selector);\n    })();\n  }\n  /**\n   * Runs the given function on the first element matching the given selector in\n   * the frame.\n   *\n   * If the given function returns a promise, then this method will wait till\n   * the promise resolves.\n   *\n   * @example\n   *\n   * ```ts\n   * const searchValue = await frame.$eval('#search', el => el.value);\n   * ```\n   *\n   * @param selector - The selector to query for.\n   * @param pageFunction - The function to be evaluated in the frame's context.\n   * The first element matching the selector will be passed to the function as\n   * its first argument.\n   * @param args - Additional arguments to pass to `pageFunction`.\n   * @returns A promise to the result of the function.\n   */\n  $eval(selector, pageFunction, ...args) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.worlds[MAIN_WORLD].$eval(selector, pageFunction, ...args);\n    })();\n  }\n  /**\n   * Runs the given function on an array of elements matching the given selector\n   * in the frame.\n   *\n   * If the given function returns a promise, then this method will wait till\n   * the promise resolves.\n   *\n   * @example\n   *\n   * ```js\n   * const divsCounts = await frame.$$eval('div', divs => divs.length);\n   * ```\n   *\n   * @param selector - The selector to query for.\n   * @param pageFunction - The function to be evaluated in the frame's context.\n   * An array of elements matching the given selector will be passed to the\n   * function as its first argument.\n   * @param args - Additional arguments to pass to `pageFunction`.\n   * @returns A promise to the result of the function.\n   */\n  $$eval(selector, pageFunction, ...args) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return _this8.worlds[MAIN_WORLD].$$eval(selector, pageFunction, ...args);\n    })();\n  }\n  /**\n   * @deprecated Use {@link Frame.$$} with the `xpath` prefix.\n   *\n   * Example: `await frame.$$('xpath/' + xpathExpression)`\n   *\n   * This method evaluates the given XPath expression and returns the results.\n   * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n   * automatically.\n   * @param expression - the XPath expression to evaluate.\n   */\n  $x(expression) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return _this9.worlds[MAIN_WORLD].$x(expression);\n    })();\n  }\n  /**\n   * Waits for an element matching the given selector to appear in the frame.\n   *\n   * This method works across navigations.\n   *\n   * @example\n   *\n   * ```ts\n   * import puppeteer from 'puppeteer';\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   let currentURL;\n   *   page\n   *     .mainFrame()\n   *     .waitForSelector('img')\n   *     .then(() => console.log('First URL with image: ' + currentURL));\n   *\n   *   for (currentURL of [\n   *     'https://example.com',\n   *     'https://google.com',\n   *     'https://bbc.com',\n   *   ]) {\n   *     await page.goto(currentURL);\n   *   }\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param selector - The selector to query and wait for.\n   * @param options - Options for customizing waiting behavior.\n   * @returns An element matching the given selector.\n   * @throws Throws if an element matching the given selector doesn't appear.\n   */\n  waitForSelector(selector, options = {}) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        updatedSelector,\n        QueryHandler\n      } = getQueryHandlerAndSelector(selector);\n      return yield QueryHandler.waitFor(_this10, updatedSelector, options);\n    })();\n  }\n  /**\n   * @deprecated Use {@link Frame.waitForSelector} with the `xpath` prefix.\n   *\n   * Example: `await frame.waitForSelector('xpath/' + xpathExpression)`\n   *\n   * The method evaluates the XPath expression relative to the Frame.\n   * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n   * automatically.\n   *\n   * Wait for the `xpath` to appear in page. If at the moment of calling the\n   * method the `xpath` already exists, the method will return immediately. If\n   * the xpath doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * For a code example, see the example for {@link Frame.waitForSelector}. That\n   * function behaves identically other than taking a CSS selector rather than\n   * an XPath.\n   *\n   * @param xpath - the XPath expression to wait for.\n   * @param options - options to configure the visibility of the element and how\n   * long to wait before timing out.\n   */\n  waitForXPath(xpath, options = {}) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (xpath.startsWith('//')) {\n        xpath = `.${xpath}`;\n      }\n      return _this11.waitForSelector(`xpath/${xpath}`, options);\n    })();\n  }\n  /**\n   * @example\n   * The `waitForFunction` can be used to observe viewport size change:\n   *\n   * ```ts\n   * import puppeteer from 'puppeteer';\n   *\n   * (async () => {\n   * .  const browser = await puppeteer.launch();\n   * .  const page = await browser.newPage();\n   * .  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n   * .  page.setViewport({width: 50, height: 50});\n   * .  await watchDog;\n   * .  await browser.close();\n   * })();\n   * ```\n   *\n   * To pass arguments from Node.js to the predicate of `page.waitForFunction` function:\n   *\n   * ```ts\n   * const selector = '.foo';\n   * await frame.waitForFunction(\n   *   selector => !!document.querySelector(selector),\n   *   {}, // empty options object\n   *   selector\n   * );\n   * ```\n   *\n   * @param pageFunction - the function to evaluate in the frame context.\n   * @param options - options to configure the polling method and timeout.\n   * @param args - arguments to pass to the `pageFunction`.\n   * @returns the promise which resolve when the `pageFunction` returns a truthy value.\n   */\n  waitForFunction(pageFunction, options = {}, ...args) {\n    return this.worlds[MAIN_WORLD].waitForFunction(pageFunction, options, ...args);\n  }\n  /**\n   * The full HTML contents of the frame, including the DOCTYPE.\n   */\n  content() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      return _this12.worlds[PUPPETEER_WORLD].content();\n    })();\n  }\n  /**\n   * Set the content of the frame.\n   *\n   * @param html - HTML markup to assign to the page.\n   * @param options - Options to configure how long before timing out and at\n   * what point to consider the content setting successful.\n   */\n  setContent(html, options = {}) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return _this13.worlds[PUPPETEER_WORLD].setContent(html, options);\n    })();\n  }\n  /**\n   * The frame's `name` attribute as specified in the tag.\n   *\n   * @remarks\n   * If the name is empty, it returns the `id` attribute instead.\n   *\n   * @remarks\n   * This value is calculated once when the frame is created, and will not\n   * update if the attribute is changed later.\n   */\n  name() {\n    return this._name || '';\n  }\n  /**\n   * The frame's URL.\n   */\n  url() {\n    return __classPrivateFieldGet(this, _Frame_url, \"f\");\n  }\n  /**\n   * The parent frame, if any. Detached and main frames return `null`.\n   */\n  parentFrame() {\n    return this._frameManager._frameTree.parentFrame(this._id) || null;\n  }\n  /**\n   * An array of child frames.\n   */\n  childFrames() {\n    return this._frameManager._frameTree.childFrames(this._id);\n  }\n  /**\n   * Is`true` if the frame has been detached. Otherwise, `false`.\n   */\n  isDetached() {\n    return __classPrivateFieldGet(this, _Frame_detached, \"f\");\n  }\n  /**\n   * Adds a `<script>` tag into the page with the desired url or content.\n   *\n   * @param options - Options for the script.\n   * @returns An {@link ElementHandle | element handle} to the injected\n   * `<script>` element.\n   */\n  addScriptTag(options) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      let {\n        content = '',\n        type\n      } = options;\n      const {\n        path\n      } = options;\n      if (+!!options.url + +!!path + +!!content !== 1) {\n        throw new Error('Exactly one of `url`, `path`, or `content` must be specified.');\n      }\n      if (path) {\n        let fs;\n        try {\n          fs = (yield import('fs')).promises;\n        } catch (error) {\n          if (error instanceof TypeError) {\n            throw new Error('Can only pass a file path in a Node-like environment.');\n          }\n          throw error;\n        }\n        content = yield fs.readFile(path, 'utf8');\n        content += `//# sourceURL=${path.replace(/\\n/g, '')}`;\n      }\n      type = type !== null && type !== void 0 ? type : 'text/javascript';\n      return _this14.worlds[MAIN_WORLD].transferHandle(yield _this14.worlds[PUPPETEER_WORLD].evaluateHandle( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* ({\n          createDeferredPromise\n        }, {\n          url,\n          id,\n          type,\n          content\n        }) {\n          const promise = createDeferredPromise();\n          const script = document.createElement('script');\n          script.type = type;\n          script.text = content;\n          if (url) {\n            script.src = url;\n            script.addEventListener('load', () => {\n              return promise.resolve();\n            }, {\n              once: true\n            });\n            script.addEventListener('error', event => {\n              var _a;\n              promise.reject(new Error((_a = event.message) !== null && _a !== void 0 ? _a : 'Could not load script'));\n            }, {\n              once: true\n            });\n          } else {\n            promise.resolve();\n          }\n          if (id) {\n            script.id = id;\n          }\n          document.head.appendChild(script);\n          yield promise;\n          return script;\n        });\n        return function (_x6, _x7) {\n          return _ref.apply(this, arguments);\n        };\n      }(), LazyArg.create(context => {\n        return context.puppeteerUtil;\n      }), {\n        ...options,\n        type,\n        content\n      }));\n    })();\n  }\n  addStyleTag(options) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      let {\n        content = ''\n      } = options;\n      const {\n        path\n      } = options;\n      if (+!!options.url + +!!path + +!!content !== 1) {\n        throw new Error('Exactly one of `url`, `path`, or `content` must be specified.');\n      }\n      if (path) {\n        const fs = yield importFSPromises();\n        content = yield fs.readFile(path, 'utf8');\n        content += '/*# sourceURL=' + path.replace(/\\n/g, '') + '*/';\n        options.content = content;\n      }\n      return _this15.worlds[MAIN_WORLD].transferHandle(yield _this15.worlds[PUPPETEER_WORLD].evaluateHandle( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* ({\n          createDeferredPromise\n        }, {\n          url,\n          content\n        }) {\n          const promise = createDeferredPromise();\n          let element;\n          if (!url) {\n            element = document.createElement('style');\n            element.appendChild(document.createTextNode(content));\n          } else {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = url;\n            element = link;\n          }\n          element.addEventListener('load', () => {\n            promise.resolve();\n          }, {\n            once: true\n          });\n          element.addEventListener('error', event => {\n            var _a;\n            promise.reject(new Error((_a = event.message) !== null && _a !== void 0 ? _a : 'Could not load style'));\n          }, {\n            once: true\n          });\n          document.head.appendChild(element);\n          yield promise;\n          return element;\n        });\n        return function (_x8, _x9) {\n          return _ref2.apply(this, arguments);\n        };\n      }(), LazyArg.create(context => {\n        return context.puppeteerUtil;\n      }), options));\n    })();\n  }\n  /**\n   * Clicks the first element found that matches `selector`.\n   *\n   * @remarks\n   * If `click()` triggers a navigation event and there's a separate\n   * `page.waitForNavigation()` promise to be resolved, you may end up with a\n   * race condition that yields unexpected results. The correct pattern for\n   * click and wait for navigation is the following:\n   *\n   * ```ts\n   * const [response] = await Promise.all([\n   *   page.waitForNavigation(waitOptions),\n   *   frame.click(selector, clickOptions),\n   * ]);\n   * ```\n   *\n   * @param selector - The selector to query for.\n   */\n  click(selector, options = {}) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      return _this16.worlds[PUPPETEER_WORLD].click(selector, options);\n    })();\n  }\n  /**\n   * Focuses the first element that matches the `selector`.\n   *\n   * @param selector - The selector to query for.\n   * @throws Throws if there's no element matching `selector`.\n   */\n  focus(selector) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      return _this17.worlds[PUPPETEER_WORLD].focus(selector);\n    })();\n  }\n  /**\n   * Hovers the pointer over the center of the first element that matches the\n   * `selector`.\n   *\n   * @param selector - The selector to query for.\n   * @throws Throws if there's no element matching `selector`.\n   */\n  hover(selector) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      return _this18.worlds[PUPPETEER_WORLD].hover(selector);\n    })();\n  }\n  /**\n   * Selects a set of value on the first `<select>` element that matches the\n   * `selector`.\n   *\n   * @example\n   *\n   * ```ts\n   * frame.select('select#colors', 'blue'); // single selection\n   * frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n   * ```\n   *\n   * @param selector - The selector to query for.\n   * @param values - The array of values to select. If the `<select>` has the\n   * `multiple` attribute, all values are considered, otherwise only the first\n   * one is taken into account.\n   * @returns the list of values that were successfully selected.\n   * @throws Throws if there's no `<select>` matching `selector`.\n   */\n  select(selector, ...values) {\n    return this.worlds[PUPPETEER_WORLD].select(selector, ...values);\n  }\n  /**\n   * Taps the first element that matches the `selector`.\n   *\n   * @param selector - The selector to query for.\n   * @throws Throws if there's no element matching `selector`.\n   */\n  tap(selector) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      return _this19.worlds[PUPPETEER_WORLD].tap(selector);\n    })();\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character\n   * in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`, use\n   * {@link Keyboard.press}.\n   *\n   * @example\n   *\n   * ```ts\n   * await frame.type('#mytextarea', 'Hello'); // Types instantly\n   * await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param selector - the selector for the element to type into. If there are\n   * multiple the first will be used.\n   * @param text - text to type into the element\n   * @param options - takes one option, `delay`, which sets the time to wait\n   * between key presses in milliseconds. Defaults to `0`.\n   */\n  type(selector, text, options) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      return _this20.worlds[PUPPETEER_WORLD].type(selector, text, options);\n    })();\n  }\n  /**\n   * @deprecated Replace with `new Promise(r => setTimeout(r, milliseconds));`.\n   *\n   * Causes your script to wait for the given number of milliseconds.\n   *\n   * @remarks\n   * It's generally recommended to not wait for a number of seconds, but instead\n   * use {@link Frame.waitForSelector}, {@link Frame.waitForXPath} or\n   * {@link Frame.waitForFunction} to wait for exactly the conditions you want.\n   *\n   * @example\n   *\n   * Wait for 1 second:\n   *\n   * ```ts\n   * await frame.waitForTimeout(1000);\n   * ```\n   *\n   * @param milliseconds - the number of milliseconds to wait.\n   */\n  waitForTimeout(milliseconds) {\n    return new Promise(resolve => {\n      setTimeout(resolve, milliseconds);\n    });\n  }\n  /**\n   * The frame's title.\n   */\n  title() {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      return _this21.worlds[PUPPETEER_WORLD].title();\n    })();\n  }\n  /**\n   * @internal\n   */\n  _deviceRequestPromptManager() {\n    if (this.isOOPFrame()) {\n      return this._frameManager._deviceRequestPromptManager(__classPrivateFieldGet(this, _Frame_client, \"f\"));\n    }\n    const parentFrame = this.parentFrame();\n    assert(parentFrame !== null);\n    return parentFrame._deviceRequestPromptManager();\n  }\n  /**\n   * This method is typically coupled with an action that triggers a device\n   * request from an api such as WebBluetooth.\n   *\n   * :::caution\n   *\n   * This must be called before the device request is made. It will not return a\n   * currently active device prompt.\n   *\n   * :::\n   *\n   * @example\n   *\n   * ```ts\n   * const [devicePrompt] = Promise.all([\n   *   frame.waitForDevicePrompt(),\n   *   frame.click('#connect-bluetooth'),\n   * ]);\n   * await devicePrompt.select(\n   *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))\n   * );\n   * ```\n   */\n  waitForDevicePrompt(options = {}) {\n    return this._deviceRequestPromptManager().waitForDevicePrompt(options);\n  }\n  /**\n   * @internal\n   */\n  _navigated(framePayload) {\n    this._name = framePayload.name;\n    __classPrivateFieldSet(this, _Frame_url, `${framePayload.url}${framePayload.urlFragment || ''}`, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _navigatedWithinDocument(url) {\n    __classPrivateFieldSet(this, _Frame_url, url, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _onLifecycleEvent(loaderId, name) {\n    if (name === 'init') {\n      this._loaderId = loaderId;\n      this._lifecycleEvents.clear();\n    }\n    this._lifecycleEvents.add(name);\n  }\n  /**\n   * @internal\n   */\n  _onLoadingStopped() {\n    this._lifecycleEvents.add('DOMContentLoaded');\n    this._lifecycleEvents.add('load');\n  }\n  /**\n   * @internal\n   */\n  _onLoadingStarted() {\n    this._hasStartedLoading = true;\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    __classPrivateFieldSet(this, _Frame_detached, true, \"f\");\n    this.worlds[MAIN_WORLD]._detach();\n    this.worlds[PUPPETEER_WORLD]._detach();\n  }\n}\n_Frame_url = new WeakMap(), _Frame_detached = new WeakMap(), _Frame_client = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Frame_url","_Frame_detached","_Frame_client","assert","isErrorLike","getQueryHandlerAndSelector","IsolatedWorld","MAIN_WORLD","PUPPETEER_WORLD","LazyArg","LifecycleWatcher","importFSPromises","Frame","constructor","frameManager","frameId","parentFrameId","client","_loaderId","_hasStartedLoading","_lifecycleEvents","Set","_frameManager","_id","_parentId","updateClient","worlds","page","isOOPFrame","goto","url","options","referer","networkManager","extraHTTPHeaders","referrerPolicy","waitUntil","timeout","timeoutSettings","navigationTimeout","ensureNewDocumentNavigation","watcher","error","Promise","race","navigate","timeoutOrTerminationPromise","newDocumentNavigationPromise","sameDocumentNavigationPromise","navigationResponse","dispose","referrer","response","send","loaderId","errorText","Error","waitForNavigation","_client","executionContext","evaluateHandle","pageFunction","args","evaluate","$","selector","$$","$eval","$$eval","$x","expression","waitForSelector","updatedSelector","QueryHandler","waitFor","waitForXPath","xpath","startsWith","waitForFunction","content","setContent","html","name","_name","parentFrame","_frameTree","childFrames","isDetached","addScriptTag","type","path","fs","promises","readFile","replace","transferHandle","createDeferredPromise","id","promise","script","document","createElement","text","src","addEventListener","resolve","once","event","_a","reject","message","head","appendChild","create","context","puppeteerUtil","addStyleTag","element","createTextNode","link","rel","href","click","focus","hover","select","values","tap","waitForTimeout","milliseconds","setTimeout","title","_deviceRequestPromptManager","waitForDevicePrompt","_navigated","framePayload","urlFragment","_navigatedWithinDocument","_onLifecycleEvent","clear","add","_onLoadingStopped","_onLoadingStarted","_detach","WeakMap"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/common/Frame.js"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Frame_url, _Frame_detached, _Frame_client;\nimport { assert } from '../util/assert.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { getQueryHandlerAndSelector } from './GetQueryHandler.js';\nimport { IsolatedWorld, } from './IsolatedWorld.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { LazyArg } from './LazyArg.js';\nimport { LifecycleWatcher } from './LifecycleWatcher.js';\nimport { importFSPromises } from './util.js';\n/**\n * Represents a DOM frame.\n *\n * To understand frames, you can think of frames as `<iframe>` elements. Just\n * like iframes, frames can be nested, and when JavaScript is executed in a\n * frame, the JavaScript does not effect frames inside the ambient frame the\n * JavaScript executes in.\n *\n * @example\n * At any point in time, {@link Page | pages} expose their current frame\n * tree via the {@link Page.mainFrame} and {@link Frame.childFrames} methods.\n *\n * @example\n * An example of dumping frame tree:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com/chrome/browser/canary.html');\n *   dumpFrameTree(page.mainFrame(), '');\n *   await browser.close();\n *\n *   function dumpFrameTree(frame, indent) {\n *     console.log(indent + frame.url());\n *     for (const child of frame.childFrames()) {\n *       dumpFrameTree(child, indent + '  ');\n *     }\n *   }\n * })();\n * ```\n *\n * @example\n * An example of getting text from an iframe element:\n *\n * ```ts\n * const frame = page.frames().find(frame => frame.name() === 'myframe');\n * const text = await frame.$eval('.selector', element => element.textContent);\n * console.log(text);\n * ```\n *\n * @remarks\n * Frame lifecycles are controlled by three events that are all dispatched on\n * the parent {@link Frame.page | page}:\n *\n * - {@link PageEmittedEvents.FrameAttached}\n * - {@link PageEmittedEvents.FrameNavigated}\n * - {@link PageEmittedEvents.FrameDetached}\n *\n * @public\n */\nexport class Frame {\n    /**\n     * @internal\n     */\n    constructor(frameManager, frameId, parentFrameId, client) {\n        _Frame_url.set(this, '');\n        _Frame_detached.set(this, false);\n        _Frame_client.set(this, void 0);\n        /**\n         * @internal\n         */\n        this._loaderId = '';\n        /**\n         * @internal\n         */\n        this._hasStartedLoading = false;\n        /**\n         * @internal\n         */\n        this._lifecycleEvents = new Set();\n        this._frameManager = frameManager;\n        __classPrivateFieldSet(this, _Frame_url, '', \"f\");\n        this._id = frameId;\n        this._parentId = parentFrameId;\n        __classPrivateFieldSet(this, _Frame_detached, false, \"f\");\n        this._loaderId = '';\n        this.updateClient(client);\n    }\n    /**\n     * @internal\n     */\n    updateClient(client) {\n        __classPrivateFieldSet(this, _Frame_client, client, \"f\");\n        this.worlds = {\n            [MAIN_WORLD]: new IsolatedWorld(this),\n            [PUPPETEER_WORLD]: new IsolatedWorld(this),\n        };\n    }\n    /**\n     * The page associated with the frame.\n     */\n    page() {\n        return this._frameManager.page();\n    }\n    /**\n     * Is `true` if the frame is an out-of-process (OOP) frame. Otherwise,\n     * `false`.\n     */\n    isOOPFrame() {\n        return __classPrivateFieldGet(this, _Frame_client, \"f\") !== this._frameManager.client;\n    }\n    /**\n     * Navigates a frame to the given url.\n     *\n     * @remarks\n     * Navigation to `about:blank` or navigation to the same URL with a different\n     * hash will succeed and return `null`.\n     *\n     * :::warning\n     *\n     * Headless mode doesn't support navigation to a PDF document. See the {@link\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=761295 | upstream\n     * issue}.\n     *\n     * :::\n     *\n     * @param url - the URL to navigate the frame to. This should include the\n     * scheme, e.g. `https://`.\n     * @param options - navigation options. `waitUntil` is useful to define when\n     * the navigation should be considered successful - see the docs for\n     * {@link PuppeteerLifeCycleEvent} for more details.\n     *\n     * @returns A promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     * @throws This method will throw an error if:\n     *\n     * - there's an SSL error (e.g. in case of self-signed certificates).\n     * - target URL is invalid.\n     * - the `timeout` is exceeded during navigation.\n     * - the remote server does not respond or is unreachable.\n     * - the main resource failed to load.\n     *\n     * This method will not throw an error when any valid HTTP status code is\n     * returned by the remote server, including 404 \"Not Found\" and 500 \"Internal\n     * Server Error\". The status code for such responses can be retrieved by\n     * calling {@link HTTPResponse.status}.\n     */\n    async goto(url, options = {}) {\n        const { referer = this._frameManager.networkManager.extraHTTPHeaders()['referer'], referrerPolicy = this._frameManager.networkManager.extraHTTPHeaders()['referer-policy'], waitUntil = ['load'], timeout = this._frameManager.timeoutSettings.navigationTimeout(), } = options;\n        let ensureNewDocumentNavigation = false;\n        const watcher = new LifecycleWatcher(this._frameManager, this, waitUntil, timeout);\n        let error = await Promise.race([\n            navigate(__classPrivateFieldGet(this, _Frame_client, \"f\"), url, referer, referrerPolicy, this._id),\n            watcher.timeoutOrTerminationPromise(),\n        ]);\n        if (!error) {\n            error = await Promise.race([\n                watcher.timeoutOrTerminationPromise(),\n                ensureNewDocumentNavigation\n                    ? watcher.newDocumentNavigationPromise()\n                    : watcher.sameDocumentNavigationPromise(),\n            ]);\n        }\n        try {\n            if (error) {\n                throw error;\n            }\n            return await watcher.navigationResponse();\n        }\n        finally {\n            watcher.dispose();\n        }\n        async function navigate(client, url, referrer, referrerPolicy, frameId) {\n            try {\n                const response = await client.send('Page.navigate', {\n                    url,\n                    referrer,\n                    frameId,\n                    referrerPolicy,\n                });\n                ensureNewDocumentNavigation = !!response.loaderId;\n                if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n                    return null;\n                }\n                return response.errorText\n                    ? new Error(`${response.errorText} at ${url}`)\n                    : null;\n            }\n            catch (error) {\n                if (isErrorLike(error)) {\n                    return error;\n                }\n                throw error;\n            }\n        }\n    }\n    /**\n     * Waits for the frame to navigate. It is useful for when you run code which\n     * will indirectly cause the frame to navigate.\n     *\n     * Usage of the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n     * to change the URL is considered a navigation.\n     *\n     * @example\n     *\n     * ```ts\n     * const [response] = await Promise.all([\n     *   // The navigation promise resolves after navigation has finished\n     *   frame.waitForNavigation(),\n     *   // Clicking the link will indirectly cause a navigation\n     *   frame.click('a.my-link'),\n     * ]);\n     * ```\n     *\n     * @param options - options to configure when the navigation is consided\n     * finished.\n     * @returns a promise that resolves when the frame navigates to a new URL.\n     */\n    async waitForNavigation(options = {}) {\n        const { waitUntil = ['load'], timeout = this._frameManager.timeoutSettings.navigationTimeout(), } = options;\n        const watcher = new LifecycleWatcher(this._frameManager, this, waitUntil, timeout);\n        const error = await Promise.race([\n            watcher.timeoutOrTerminationPromise(),\n            watcher.sameDocumentNavigationPromise(),\n            watcher.newDocumentNavigationPromise(),\n        ]);\n        try {\n            if (error) {\n                throw error;\n            }\n            return await watcher.navigationResponse();\n        }\n        finally {\n            watcher.dispose();\n        }\n    }\n    /**\n     * @internal\n     */\n    _client() {\n        return __classPrivateFieldGet(this, _Frame_client, \"f\");\n    }\n    /**\n     * @internal\n     */\n    executionContext() {\n        return this.worlds[MAIN_WORLD].executionContext();\n    }\n    /**\n     * Behaves identically to {@link Page.evaluateHandle} except it's run within\n     * the context of this frame.\n     *\n     * @see {@link Page.evaluateHandle} for details.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return this.worlds[MAIN_WORLD].evaluateHandle(pageFunction, ...args);\n    }\n    /**\n     * Behaves identically to {@link Page.evaluate} except it's run within the\n     * the context of this frame.\n     *\n     * @see {@link Page.evaluate} for details.\n     */\n    async evaluate(pageFunction, ...args) {\n        return this.worlds[MAIN_WORLD].evaluate(pageFunction, ...args);\n    }\n    /**\n     * Queries the frame for an element matching the given selector.\n     *\n     * @param selector - The selector to query for.\n     * @returns A {@link ElementHandle | element handle} to the first element\n     * matching the given selector. Otherwise, `null`.\n     */\n    async $(selector) {\n        return this.worlds[MAIN_WORLD].$(selector);\n    }\n    /**\n     * Queries the frame for all elements matching the given selector.\n     *\n     * @param selector - The selector to query for.\n     * @returns An array of {@link ElementHandle | element handles} that point to\n     * elements matching the given selector.\n     */\n    async $$(selector) {\n        return this.worlds[MAIN_WORLD].$$(selector);\n    }\n    /**\n     * Runs the given function on the first element matching the given selector in\n     * the frame.\n     *\n     * If the given function returns a promise, then this method will wait till\n     * the promise resolves.\n     *\n     * @example\n     *\n     * ```ts\n     * const searchValue = await frame.$eval('#search', el => el.value);\n     * ```\n     *\n     * @param selector - The selector to query for.\n     * @param pageFunction - The function to be evaluated in the frame's context.\n     * The first element matching the selector will be passed to the function as\n     * its first argument.\n     * @param args - Additional arguments to pass to `pageFunction`.\n     * @returns A promise to the result of the function.\n     */\n    async $eval(selector, pageFunction, ...args) {\n        return this.worlds[MAIN_WORLD].$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * Runs the given function on an array of elements matching the given selector\n     * in the frame.\n     *\n     * If the given function returns a promise, then this method will wait till\n     * the promise resolves.\n     *\n     * @example\n     *\n     * ```js\n     * const divsCounts = await frame.$$eval('div', divs => divs.length);\n     * ```\n     *\n     * @param selector - The selector to query for.\n     * @param pageFunction - The function to be evaluated in the frame's context.\n     * An array of elements matching the given selector will be passed to the\n     * function as its first argument.\n     * @param args - Additional arguments to pass to `pageFunction`.\n     * @returns A promise to the result of the function.\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        return this.worlds[MAIN_WORLD].$$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * @deprecated Use {@link Frame.$$} with the `xpath` prefix.\n     *\n     * Example: `await frame.$$('xpath/' + xpathExpression)`\n     *\n     * This method evaluates the given XPath expression and returns the results.\n     * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n     * automatically.\n     * @param expression - the XPath expression to evaluate.\n     */\n    async $x(expression) {\n        return this.worlds[MAIN_WORLD].$x(expression);\n    }\n    /**\n     * Waits for an element matching the given selector to appear in the frame.\n     *\n     * This method works across navigations.\n     *\n     * @example\n     *\n     * ```ts\n     * import puppeteer from 'puppeteer';\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   let currentURL;\n     *   page\n     *     .mainFrame()\n     *     .waitForSelector('img')\n     *     .then(() => console.log('First URL with image: ' + currentURL));\n     *\n     *   for (currentURL of [\n     *     'https://example.com',\n     *     'https://google.com',\n     *     'https://bbc.com',\n     *   ]) {\n     *     await page.goto(currentURL);\n     *   }\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     * @param selector - The selector to query and wait for.\n     * @param options - Options for customizing waiting behavior.\n     * @returns An element matching the given selector.\n     * @throws Throws if an element matching the given selector doesn't appear.\n     */\n    async waitForSelector(selector, options = {}) {\n        const { updatedSelector, QueryHandler } = getQueryHandlerAndSelector(selector);\n        return (await QueryHandler.waitFor(this, updatedSelector, options));\n    }\n    /**\n     * @deprecated Use {@link Frame.waitForSelector} with the `xpath` prefix.\n     *\n     * Example: `await frame.waitForSelector('xpath/' + xpathExpression)`\n     *\n     * The method evaluates the XPath expression relative to the Frame.\n     * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n     * automatically.\n     *\n     * Wait for the `xpath` to appear in page. If at the moment of calling the\n     * method the `xpath` already exists, the method will return immediately. If\n     * the xpath doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * For a code example, see the example for {@link Frame.waitForSelector}. That\n     * function behaves identically other than taking a CSS selector rather than\n     * an XPath.\n     *\n     * @param xpath - the XPath expression to wait for.\n     * @param options - options to configure the visibility of the element and how\n     * long to wait before timing out.\n     */\n    async waitForXPath(xpath, options = {}) {\n        if (xpath.startsWith('//')) {\n            xpath = `.${xpath}`;\n        }\n        return this.waitForSelector(`xpath/${xpath}`, options);\n    }\n    /**\n     * @example\n     * The `waitForFunction` can be used to observe viewport size change:\n     *\n     * ```ts\n     * import puppeteer from 'puppeteer';\n     *\n     * (async () => {\n     * .  const browser = await puppeteer.launch();\n     * .  const page = await browser.newPage();\n     * .  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n     * .  page.setViewport({width: 50, height: 50});\n     * .  await watchDog;\n     * .  await browser.close();\n     * })();\n     * ```\n     *\n     * To pass arguments from Node.js to the predicate of `page.waitForFunction` function:\n     *\n     * ```ts\n     * const selector = '.foo';\n     * await frame.waitForFunction(\n     *   selector => !!document.querySelector(selector),\n     *   {}, // empty options object\n     *   selector\n     * );\n     * ```\n     *\n     * @param pageFunction - the function to evaluate in the frame context.\n     * @param options - options to configure the polling method and timeout.\n     * @param args - arguments to pass to the `pageFunction`.\n     * @returns the promise which resolve when the `pageFunction` returns a truthy value.\n     */\n    waitForFunction(pageFunction, options = {}, ...args) {\n        return this.worlds[MAIN_WORLD].waitForFunction(pageFunction, options, ...args);\n    }\n    /**\n     * The full HTML contents of the frame, including the DOCTYPE.\n     */\n    async content() {\n        return this.worlds[PUPPETEER_WORLD].content();\n    }\n    /**\n     * Set the content of the frame.\n     *\n     * @param html - HTML markup to assign to the page.\n     * @param options - Options to configure how long before timing out and at\n     * what point to consider the content setting successful.\n     */\n    async setContent(html, options = {}) {\n        return this.worlds[PUPPETEER_WORLD].setContent(html, options);\n    }\n    /**\n     * The frame's `name` attribute as specified in the tag.\n     *\n     * @remarks\n     * If the name is empty, it returns the `id` attribute instead.\n     *\n     * @remarks\n     * This value is calculated once when the frame is created, and will not\n     * update if the attribute is changed later.\n     */\n    name() {\n        return this._name || '';\n    }\n    /**\n     * The frame's URL.\n     */\n    url() {\n        return __classPrivateFieldGet(this, _Frame_url, \"f\");\n    }\n    /**\n     * The parent frame, if any. Detached and main frames return `null`.\n     */\n    parentFrame() {\n        return this._frameManager._frameTree.parentFrame(this._id) || null;\n    }\n    /**\n     * An array of child frames.\n     */\n    childFrames() {\n        return this._frameManager._frameTree.childFrames(this._id);\n    }\n    /**\n     * Is`true` if the frame has been detached. Otherwise, `false`.\n     */\n    isDetached() {\n        return __classPrivateFieldGet(this, _Frame_detached, \"f\");\n    }\n    /**\n     * Adds a `<script>` tag into the page with the desired url or content.\n     *\n     * @param options - Options for the script.\n     * @returns An {@link ElementHandle | element handle} to the injected\n     * `<script>` element.\n     */\n    async addScriptTag(options) {\n        let { content = '', type } = options;\n        const { path } = options;\n        if (+!!options.url + +!!path + +!!content !== 1) {\n            throw new Error('Exactly one of `url`, `path`, or `content` must be specified.');\n        }\n        if (path) {\n            let fs;\n            try {\n                fs = (await import('fs')).promises;\n            }\n            catch (error) {\n                if (error instanceof TypeError) {\n                    throw new Error('Can only pass a file path in a Node-like environment.');\n                }\n                throw error;\n            }\n            content = await fs.readFile(path, 'utf8');\n            content += `//# sourceURL=${path.replace(/\\n/g, '')}`;\n        }\n        type = type !== null && type !== void 0 ? type : 'text/javascript';\n        return this.worlds[MAIN_WORLD].transferHandle(await this.worlds[PUPPETEER_WORLD].evaluateHandle(async ({ createDeferredPromise }, { url, id, type, content }) => {\n            const promise = createDeferredPromise();\n            const script = document.createElement('script');\n            script.type = type;\n            script.text = content;\n            if (url) {\n                script.src = url;\n                script.addEventListener('load', () => {\n                    return promise.resolve();\n                }, { once: true });\n                script.addEventListener('error', event => {\n                    var _a;\n                    promise.reject(new Error((_a = event.message) !== null && _a !== void 0 ? _a : 'Could not load script'));\n                }, { once: true });\n            }\n            else {\n                promise.resolve();\n            }\n            if (id) {\n                script.id = id;\n            }\n            document.head.appendChild(script);\n            await promise;\n            return script;\n        }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n        }), { ...options, type, content }));\n    }\n    async addStyleTag(options) {\n        let { content = '' } = options;\n        const { path } = options;\n        if (+!!options.url + +!!path + +!!content !== 1) {\n            throw new Error('Exactly one of `url`, `path`, or `content` must be specified.');\n        }\n        if (path) {\n            const fs = await importFSPromises();\n            content = await fs.readFile(path, 'utf8');\n            content += '/*# sourceURL=' + path.replace(/\\n/g, '') + '*/';\n            options.content = content;\n        }\n        return this.worlds[MAIN_WORLD].transferHandle(await this.worlds[PUPPETEER_WORLD].evaluateHandle(async ({ createDeferredPromise }, { url, content }) => {\n            const promise = createDeferredPromise();\n            let element;\n            if (!url) {\n                element = document.createElement('style');\n                element.appendChild(document.createTextNode(content));\n            }\n            else {\n                const link = document.createElement('link');\n                link.rel = 'stylesheet';\n                link.href = url;\n                element = link;\n            }\n            element.addEventListener('load', () => {\n                promise.resolve();\n            }, { once: true });\n            element.addEventListener('error', event => {\n                var _a;\n                promise.reject(new Error((_a = event.message) !== null && _a !== void 0 ? _a : 'Could not load style'));\n            }, { once: true });\n            document.head.appendChild(element);\n            await promise;\n            return element;\n        }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n        }), options));\n    }\n    /**\n     * Clicks the first element found that matches `selector`.\n     *\n     * @remarks\n     * If `click()` triggers a navigation event and there's a separate\n     * `page.waitForNavigation()` promise to be resolved, you may end up with a\n     * race condition that yields unexpected results. The correct pattern for\n     * click and wait for navigation is the following:\n     *\n     * ```ts\n     * const [response] = await Promise.all([\n     *   page.waitForNavigation(waitOptions),\n     *   frame.click(selector, clickOptions),\n     * ]);\n     * ```\n     *\n     * @param selector - The selector to query for.\n     */\n    async click(selector, options = {}) {\n        return this.worlds[PUPPETEER_WORLD].click(selector, options);\n    }\n    /**\n     * Focuses the first element that matches the `selector`.\n     *\n     * @param selector - The selector to query for.\n     * @throws Throws if there's no element matching `selector`.\n     */\n    async focus(selector) {\n        return this.worlds[PUPPETEER_WORLD].focus(selector);\n    }\n    /**\n     * Hovers the pointer over the center of the first element that matches the\n     * `selector`.\n     *\n     * @param selector - The selector to query for.\n     * @throws Throws if there's no element matching `selector`.\n     */\n    async hover(selector) {\n        return this.worlds[PUPPETEER_WORLD].hover(selector);\n    }\n    /**\n     * Selects a set of value on the first `<select>` element that matches the\n     * `selector`.\n     *\n     * @example\n     *\n     * ```ts\n     * frame.select('select#colors', 'blue'); // single selection\n     * frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n     * ```\n     *\n     * @param selector - The selector to query for.\n     * @param values - The array of values to select. If the `<select>` has the\n     * `multiple` attribute, all values are considered, otherwise only the first\n     * one is taken into account.\n     * @returns the list of values that were successfully selected.\n     * @throws Throws if there's no `<select>` matching `selector`.\n     */\n    select(selector, ...values) {\n        return this.worlds[PUPPETEER_WORLD].select(selector, ...values);\n    }\n    /**\n     * Taps the first element that matches the `selector`.\n     *\n     * @param selector - The selector to query for.\n     * @throws Throws if there's no element matching `selector`.\n     */\n    async tap(selector) {\n        return this.worlds[PUPPETEER_WORLD].tap(selector);\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character\n     * in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`, use\n     * {@link Keyboard.press}.\n     *\n     * @example\n     *\n     * ```ts\n     * await frame.type('#mytextarea', 'Hello'); // Types instantly\n     * await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param selector - the selector for the element to type into. If there are\n     * multiple the first will be used.\n     * @param text - text to type into the element\n     * @param options - takes one option, `delay`, which sets the time to wait\n     * between key presses in milliseconds. Defaults to `0`.\n     */\n    async type(selector, text, options) {\n        return this.worlds[PUPPETEER_WORLD].type(selector, text, options);\n    }\n    /**\n     * @deprecated Replace with `new Promise(r => setTimeout(r, milliseconds));`.\n     *\n     * Causes your script to wait for the given number of milliseconds.\n     *\n     * @remarks\n     * It's generally recommended to not wait for a number of seconds, but instead\n     * use {@link Frame.waitForSelector}, {@link Frame.waitForXPath} or\n     * {@link Frame.waitForFunction} to wait for exactly the conditions you want.\n     *\n     * @example\n     *\n     * Wait for 1 second:\n     *\n     * ```ts\n     * await frame.waitForTimeout(1000);\n     * ```\n     *\n     * @param milliseconds - the number of milliseconds to wait.\n     */\n    waitForTimeout(milliseconds) {\n        return new Promise(resolve => {\n            setTimeout(resolve, milliseconds);\n        });\n    }\n    /**\n     * The frame's title.\n     */\n    async title() {\n        return this.worlds[PUPPETEER_WORLD].title();\n    }\n    /**\n     * @internal\n     */\n    _deviceRequestPromptManager() {\n        if (this.isOOPFrame()) {\n            return this._frameManager._deviceRequestPromptManager(__classPrivateFieldGet(this, _Frame_client, \"f\"));\n        }\n        const parentFrame = this.parentFrame();\n        assert(parentFrame !== null);\n        return parentFrame._deviceRequestPromptManager();\n    }\n    /**\n     * This method is typically coupled with an action that triggers a device\n     * request from an api such as WebBluetooth.\n     *\n     * :::caution\n     *\n     * This must be called before the device request is made. It will not return a\n     * currently active device prompt.\n     *\n     * :::\n     *\n     * @example\n     *\n     * ```ts\n     * const [devicePrompt] = Promise.all([\n     *   frame.waitForDevicePrompt(),\n     *   frame.click('#connect-bluetooth'),\n     * ]);\n     * await devicePrompt.select(\n     *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))\n     * );\n     * ```\n     */\n    waitForDevicePrompt(options = {}) {\n        return this._deviceRequestPromptManager().waitForDevicePrompt(options);\n    }\n    /**\n     * @internal\n     */\n    _navigated(framePayload) {\n        this._name = framePayload.name;\n        __classPrivateFieldSet(this, _Frame_url, `${framePayload.url}${framePayload.urlFragment || ''}`, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _navigatedWithinDocument(url) {\n        __classPrivateFieldSet(this, _Frame_url, url, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _onLifecycleEvent(loaderId, name) {\n        if (name === 'init') {\n            this._loaderId = loaderId;\n            this._lifecycleEvents.clear();\n        }\n        this._lifecycleEvents.add(name);\n    }\n    /**\n     * @internal\n     */\n    _onLoadingStopped() {\n        this._lifecycleEvents.add('DOMContentLoaded');\n        this._lifecycleEvents.add('load');\n    }\n    /**\n     * @internal\n     */\n    _onLoadingStarted() {\n        this._hasStartedLoading = true;\n    }\n    /**\n     * @internal\n     */\n    _detach() {\n        __classPrivateFieldSet(this, _Frame_detached, true, \"f\");\n        this.worlds[MAIN_WORLD]._detach();\n        this.worlds[PUPPETEER_WORLD]._detach();\n    }\n}\n_Frame_url = new WeakMap(), _Frame_detached = new WeakMap(), _Frame_client = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}