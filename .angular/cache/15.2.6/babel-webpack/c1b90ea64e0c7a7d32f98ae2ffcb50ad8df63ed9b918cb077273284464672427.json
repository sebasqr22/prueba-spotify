{"ast":null,"code":"import _asyncToGenerator from \"/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a reference to a JavaScript object. Instances can be created using\n * {@link Page.evaluateHandle}.\n *\n * Handles prevent the referenced JavaScript object from being garbage-collected\n * unless the handle is purposely {@link JSHandle.dispose | disposed}. JSHandles\n * are auto-disposed when their associated frame is navigated away or the parent\n * context gets destroyed.\n *\n * Handles can be used as arguments for any evaluation function such as\n * {@link Page.$eval}, {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n * They are resolved to their referenced object.\n *\n * @example\n *\n * ```ts\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * @public\n */\nexport class JSHandle {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * @internal\n   */\n  get disposed() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * @internal\n   */\n  executionContext() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * @internal\n   */\n  get client() {\n    throw new Error('Not implemented');\n  }\n  evaluate() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  evaluateHandle() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  getProperty() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  /**\n   * Gets a map of handles representing the properties of the current handle.\n   *\n   * @example\n   *\n   * ```ts\n   * const listHandle = await page.evaluateHandle(() => document.body.children);\n   * const properties = await listHandle.getProperties();\n   * const children = [];\n   * for (const property of properties.values()) {\n   *   const element = property.asElement();\n   *   if (element) {\n   *     children.push(element);\n   *   }\n   * }\n   * children; // holds elementHandles to all children of document.body\n   * ```\n   */\n  getProperties() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  /**\n   * A vanilla object representing the serializable portions of the\n   * referenced object.\n   * @throws Throws if the object cannot be serialized due to circularity.\n   *\n   * @remarks\n   * If the object has a `toJSON` function, it **will not** be called.\n   */\n  jsonValue() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  asElement() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Releases the object referenced by the handle for garbage collection.\n   */\n  dispose() {\n    return _asyncToGenerator(function* () {\n      throw new Error('Not implemented');\n    })();\n  }\n  /**\n   * Returns a string representation of the JSHandle.\n   *\n   * @remarks\n   * Useful during debugging.\n   */\n  toString() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * @internal\n   */\n  get id() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Provides access to the\n   * [Protocol.Runtime.RemoteObject](https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject)\n   * backing this handle.\n   */\n  remoteObject() {\n    throw new Error('Not implemented');\n  }\n}","map":{"version":3,"names":["JSHandle","constructor","disposed","Error","executionContext","client","evaluate","evaluateHandle","getProperty","getProperties","jsonValue","asElement","dispose","toString","id","remoteObject"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/prueba-spotify/node_modules/puppeteer-core/lib/esm/puppeteer/api/JSHandle.js"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a reference to a JavaScript object. Instances can be created using\n * {@link Page.evaluateHandle}.\n *\n * Handles prevent the referenced JavaScript object from being garbage-collected\n * unless the handle is purposely {@link JSHandle.dispose | disposed}. JSHandles\n * are auto-disposed when their associated frame is navigated away or the parent\n * context gets destroyed.\n *\n * Handles can be used as arguments for any evaluation function such as\n * {@link Page.$eval}, {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n * They are resolved to their referenced object.\n *\n * @example\n *\n * ```ts\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * @public\n */\nexport class JSHandle {\n    /**\n     * @internal\n     */\n    constructor() { }\n    /**\n     * @internal\n     */\n    get disposed() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * @internal\n     */\n    executionContext() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * @internal\n     */\n    get client() {\n        throw new Error('Not implemented');\n    }\n    async evaluate() {\n        throw new Error('Not implemented');\n    }\n    async evaluateHandle() {\n        throw new Error('Not implemented');\n    }\n    async getProperty() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Gets a map of handles representing the properties of the current handle.\n     *\n     * @example\n     *\n     * ```ts\n     * const listHandle = await page.evaluateHandle(() => document.body.children);\n     * const properties = await listHandle.getProperties();\n     * const children = [];\n     * for (const property of properties.values()) {\n     *   const element = property.asElement();\n     *   if (element) {\n     *     children.push(element);\n     *   }\n     * }\n     * children; // holds elementHandles to all children of document.body\n     * ```\n     */\n    async getProperties() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * A vanilla object representing the serializable portions of the\n     * referenced object.\n     * @throws Throws if the object cannot be serialized due to circularity.\n     *\n     * @remarks\n     * If the object has a `toJSON` function, it **will not** be called.\n     */\n    async jsonValue() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Either `null` or the handle itself if the handle is an\n     * instance of {@link ElementHandle}.\n     */\n    asElement() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Releases the object referenced by the handle for garbage collection.\n     */\n    async dispose() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Returns a string representation of the JSHandle.\n     *\n     * @remarks\n     * Useful during debugging.\n     */\n    toString() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * @internal\n     */\n    get id() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Provides access to the\n     * [Protocol.Runtime.RemoteObject](https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject)\n     * backing this handle.\n     */\n    remoteObject() {\n        throw new Error('Not implemented');\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,CAAC;EAClB;AACJ;AACA;EACIC,WAAW,GAAG,CAAE;EAChB;AACJ;AACA;EACI,IAAIC,QAAQ,GAAG;IACX,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACIC,gBAAgB,GAAG;IACf,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACI,IAAIE,MAAM,GAAG;IACT,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACMG,QAAQ,GAAG;IAAA;MACb,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACMI,cAAc,GAAG;IAAA;MACnB,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACMK,WAAW,GAAG;IAAA;MAChB,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUM,aAAa,GAAG;IAAA;MAClB,MAAM,IAAIN,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUO,SAAS,GAAG;IAAA;MACd,MAAM,IAAIP,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACA;AACJ;AACA;AACA;EACIQ,SAAS,GAAG;IACR,MAAM,IAAIR,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACUS,OAAO,GAAG;IAAA;MACZ,MAAM,IAAIT,KAAK,CAAC,iBAAiB,CAAC;IAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIU,QAAQ,GAAG;IACP,MAAM,IAAIV,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;EACI,IAAIW,EAAE,GAAG;IACL,MAAM,IAAIX,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;EACIY,YAAY,GAAG;IACX,MAAM,IAAIZ,KAAK,CAAC,iBAAiB,CAAC;EACtC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}